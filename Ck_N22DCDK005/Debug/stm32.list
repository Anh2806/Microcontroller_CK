
stm32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000926c  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004e8  08009380  08009380  0000a380  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009868  08009868  0000b1dc  2**0
                  CONTENTS
  4 .ARM          00000008  08009868  08009868  0000a868  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009870  08009870  0000b1dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009870  08009870  0000a870  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009874  08009874  0000a874  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001dc  20000000  08009878  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000230  200001dc  08009a54  0000b1dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000040c  08009a54  0000b40c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000b1dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dc35  00000000  00000000  0000b205  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021c4  00000000  00000000  00018e3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e18  00000000  00000000  0001b000  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000afd  00000000  00000000  0001be18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000191f0  00000000  00000000  0001c915  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010098  00000000  00000000  00035b05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091498  00000000  00000000  00045b9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d7035  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005088  00000000  00000000  000d7078  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000057  00000000  00000000  000dc100  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001dc 	.word	0x200001dc
 800012c:	00000000 	.word	0x00000000
 8000130:	08009364 	.word	0x08009364

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e0 	.word	0x200001e0
 800014c:	08009364 	.word	0x08009364

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_fmul>:
 8000160:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000164:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000168:	bf1e      	ittt	ne
 800016a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800016e:	ea92 0f0c 	teqne	r2, ip
 8000172:	ea93 0f0c 	teqne	r3, ip
 8000176:	d06f      	beq.n	8000258 <__aeabi_fmul+0xf8>
 8000178:	441a      	add	r2, r3
 800017a:	ea80 0c01 	eor.w	ip, r0, r1
 800017e:	0240      	lsls	r0, r0, #9
 8000180:	bf18      	it	ne
 8000182:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000186:	d01e      	beq.n	80001c6 <__aeabi_fmul+0x66>
 8000188:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800018c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000190:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000194:	fba0 3101 	umull	r3, r1, r0, r1
 8000198:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 800019c:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80001a0:	bf3e      	ittt	cc
 80001a2:	0049      	lslcc	r1, r1, #1
 80001a4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80001a8:	005b      	lslcc	r3, r3, #1
 80001aa:	ea40 0001 	orr.w	r0, r0, r1
 80001ae:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80001b2:	2afd      	cmp	r2, #253	@ 0xfd
 80001b4:	d81d      	bhi.n	80001f2 <__aeabi_fmul+0x92>
 80001b6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80001ba:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001be:	bf08      	it	eq
 80001c0:	f020 0001 	biceq.w	r0, r0, #1
 80001c4:	4770      	bx	lr
 80001c6:	f090 0f00 	teq	r0, #0
 80001ca:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80001ce:	bf08      	it	eq
 80001d0:	0249      	lsleq	r1, r1, #9
 80001d2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001d6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001da:	3a7f      	subs	r2, #127	@ 0x7f
 80001dc:	bfc2      	ittt	gt
 80001de:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80001e2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001e6:	4770      	bxgt	lr
 80001e8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80001ec:	f04f 0300 	mov.w	r3, #0
 80001f0:	3a01      	subs	r2, #1
 80001f2:	dc5d      	bgt.n	80002b0 <__aeabi_fmul+0x150>
 80001f4:	f112 0f19 	cmn.w	r2, #25
 80001f8:	bfdc      	itt	le
 80001fa:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 80001fe:	4770      	bxle	lr
 8000200:	f1c2 0200 	rsb	r2, r2, #0
 8000204:	0041      	lsls	r1, r0, #1
 8000206:	fa21 f102 	lsr.w	r1, r1, r2
 800020a:	f1c2 0220 	rsb	r2, r2, #32
 800020e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000212:	ea5f 0031 	movs.w	r0, r1, rrx
 8000216:	f140 0000 	adc.w	r0, r0, #0
 800021a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800021e:	bf08      	it	eq
 8000220:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000224:	4770      	bx	lr
 8000226:	f092 0f00 	teq	r2, #0
 800022a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 800022e:	bf02      	ittt	eq
 8000230:	0040      	lsleq	r0, r0, #1
 8000232:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000236:	3a01      	subeq	r2, #1
 8000238:	d0f9      	beq.n	800022e <__aeabi_fmul+0xce>
 800023a:	ea40 000c 	orr.w	r0, r0, ip
 800023e:	f093 0f00 	teq	r3, #0
 8000242:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000246:	bf02      	ittt	eq
 8000248:	0049      	lsleq	r1, r1, #1
 800024a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800024e:	3b01      	subeq	r3, #1
 8000250:	d0f9      	beq.n	8000246 <__aeabi_fmul+0xe6>
 8000252:	ea41 010c 	orr.w	r1, r1, ip
 8000256:	e78f      	b.n	8000178 <__aeabi_fmul+0x18>
 8000258:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800025c:	ea92 0f0c 	teq	r2, ip
 8000260:	bf18      	it	ne
 8000262:	ea93 0f0c 	teqne	r3, ip
 8000266:	d00a      	beq.n	800027e <__aeabi_fmul+0x11e>
 8000268:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 800026c:	bf18      	it	ne
 800026e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000272:	d1d8      	bne.n	8000226 <__aeabi_fmul+0xc6>
 8000274:	ea80 0001 	eor.w	r0, r0, r1
 8000278:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f090 0f00 	teq	r0, #0
 8000282:	bf17      	itett	ne
 8000284:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000288:	4608      	moveq	r0, r1
 800028a:	f091 0f00 	teqne	r1, #0
 800028e:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000292:	d014      	beq.n	80002be <__aeabi_fmul+0x15e>
 8000294:	ea92 0f0c 	teq	r2, ip
 8000298:	d101      	bne.n	800029e <__aeabi_fmul+0x13e>
 800029a:	0242      	lsls	r2, r0, #9
 800029c:	d10f      	bne.n	80002be <__aeabi_fmul+0x15e>
 800029e:	ea93 0f0c 	teq	r3, ip
 80002a2:	d103      	bne.n	80002ac <__aeabi_fmul+0x14c>
 80002a4:	024b      	lsls	r3, r1, #9
 80002a6:	bf18      	it	ne
 80002a8:	4608      	movne	r0, r1
 80002aa:	d108      	bne.n	80002be <__aeabi_fmul+0x15e>
 80002ac:	ea80 0001 	eor.w	r0, r0, r1
 80002b0:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80002b4:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80002b8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80002bc:	4770      	bx	lr
 80002be:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80002c2:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80002c6:	4770      	bx	lr

080002c8 <__aeabi_drsub>:
 80002c8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002cc:	e002      	b.n	80002d4 <__adddf3>
 80002ce:	bf00      	nop

080002d0 <__aeabi_dsub>:
 80002d0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002d4 <__adddf3>:
 80002d4:	b530      	push	{r4, r5, lr}
 80002d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002de:	ea94 0f05 	teq	r4, r5
 80002e2:	bf08      	it	eq
 80002e4:	ea90 0f02 	teqeq	r0, r2
 80002e8:	bf1f      	itttt	ne
 80002ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002fa:	f000 80e2 	beq.w	80004c2 <__adddf3+0x1ee>
 80002fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000302:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000306:	bfb8      	it	lt
 8000308:	426d      	neglt	r5, r5
 800030a:	dd0c      	ble.n	8000326 <__adddf3+0x52>
 800030c:	442c      	add	r4, r5
 800030e:	ea80 0202 	eor.w	r2, r0, r2
 8000312:	ea81 0303 	eor.w	r3, r1, r3
 8000316:	ea82 0000 	eor.w	r0, r2, r0
 800031a:	ea83 0101 	eor.w	r1, r3, r1
 800031e:	ea80 0202 	eor.w	r2, r0, r2
 8000322:	ea81 0303 	eor.w	r3, r1, r3
 8000326:	2d36      	cmp	r5, #54	@ 0x36
 8000328:	bf88      	it	hi
 800032a:	bd30      	pophi	{r4, r5, pc}
 800032c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000330:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000334:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000338:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800033c:	d002      	beq.n	8000344 <__adddf3+0x70>
 800033e:	4240      	negs	r0, r0
 8000340:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000344:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000348:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800034c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000350:	d002      	beq.n	8000358 <__adddf3+0x84>
 8000352:	4252      	negs	r2, r2
 8000354:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000358:	ea94 0f05 	teq	r4, r5
 800035c:	f000 80a7 	beq.w	80004ae <__adddf3+0x1da>
 8000360:	f1a4 0401 	sub.w	r4, r4, #1
 8000364:	f1d5 0e20 	rsbs	lr, r5, #32
 8000368:	db0d      	blt.n	8000386 <__adddf3+0xb2>
 800036a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800036e:	fa22 f205 	lsr.w	r2, r2, r5
 8000372:	1880      	adds	r0, r0, r2
 8000374:	f141 0100 	adc.w	r1, r1, #0
 8000378:	fa03 f20e 	lsl.w	r2, r3, lr
 800037c:	1880      	adds	r0, r0, r2
 800037e:	fa43 f305 	asr.w	r3, r3, r5
 8000382:	4159      	adcs	r1, r3
 8000384:	e00e      	b.n	80003a4 <__adddf3+0xd0>
 8000386:	f1a5 0520 	sub.w	r5, r5, #32
 800038a:	f10e 0e20 	add.w	lr, lr, #32
 800038e:	2a01      	cmp	r2, #1
 8000390:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000394:	bf28      	it	cs
 8000396:	f04c 0c02 	orrcs.w	ip, ip, #2
 800039a:	fa43 f305 	asr.w	r3, r3, r5
 800039e:	18c0      	adds	r0, r0, r3
 80003a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a8:	d507      	bpl.n	80003ba <__adddf3+0xe6>
 80003aa:	f04f 0e00 	mov.w	lr, #0
 80003ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80003b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80003ba:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003be:	d31b      	bcc.n	80003f8 <__adddf3+0x124>
 80003c0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003c4:	d30c      	bcc.n	80003e0 <__adddf3+0x10c>
 80003c6:	0849      	lsrs	r1, r1, #1
 80003c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80003cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d0:	f104 0401 	add.w	r4, r4, #1
 80003d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003dc:	f080 809a 	bcs.w	8000514 <__adddf3+0x240>
 80003e0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003e4:	bf08      	it	eq
 80003e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003ea:	f150 0000 	adcs.w	r0, r0, #0
 80003ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003f2:	ea41 0105 	orr.w	r1, r1, r5
 80003f6:	bd30      	pop	{r4, r5, pc}
 80003f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003fc:	4140      	adcs	r0, r0
 80003fe:	eb41 0101 	adc.w	r1, r1, r1
 8000402:	3c01      	subs	r4, #1
 8000404:	bf28      	it	cs
 8000406:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800040a:	d2e9      	bcs.n	80003e0 <__adddf3+0x10c>
 800040c:	f091 0f00 	teq	r1, #0
 8000410:	bf04      	itt	eq
 8000412:	4601      	moveq	r1, r0
 8000414:	2000      	moveq	r0, #0
 8000416:	fab1 f381 	clz	r3, r1
 800041a:	bf08      	it	eq
 800041c:	3320      	addeq	r3, #32
 800041e:	f1a3 030b 	sub.w	r3, r3, #11
 8000422:	f1b3 0220 	subs.w	r2, r3, #32
 8000426:	da0c      	bge.n	8000442 <__adddf3+0x16e>
 8000428:	320c      	adds	r2, #12
 800042a:	dd08      	ble.n	800043e <__adddf3+0x16a>
 800042c:	f102 0c14 	add.w	ip, r2, #20
 8000430:	f1c2 020c 	rsb	r2, r2, #12
 8000434:	fa01 f00c 	lsl.w	r0, r1, ip
 8000438:	fa21 f102 	lsr.w	r1, r1, r2
 800043c:	e00c      	b.n	8000458 <__adddf3+0x184>
 800043e:	f102 0214 	add.w	r2, r2, #20
 8000442:	bfd8      	it	le
 8000444:	f1c2 0c20 	rsble	ip, r2, #32
 8000448:	fa01 f102 	lsl.w	r1, r1, r2
 800044c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000450:	bfdc      	itt	le
 8000452:	ea41 010c 	orrle.w	r1, r1, ip
 8000456:	4090      	lslle	r0, r2
 8000458:	1ae4      	subs	r4, r4, r3
 800045a:	bfa2      	ittt	ge
 800045c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000460:	4329      	orrge	r1, r5
 8000462:	bd30      	popge	{r4, r5, pc}
 8000464:	ea6f 0404 	mvn.w	r4, r4
 8000468:	3c1f      	subs	r4, #31
 800046a:	da1c      	bge.n	80004a6 <__adddf3+0x1d2>
 800046c:	340c      	adds	r4, #12
 800046e:	dc0e      	bgt.n	800048e <__adddf3+0x1ba>
 8000470:	f104 0414 	add.w	r4, r4, #20
 8000474:	f1c4 0220 	rsb	r2, r4, #32
 8000478:	fa20 f004 	lsr.w	r0, r0, r4
 800047c:	fa01 f302 	lsl.w	r3, r1, r2
 8000480:	ea40 0003 	orr.w	r0, r0, r3
 8000484:	fa21 f304 	lsr.w	r3, r1, r4
 8000488:	ea45 0103 	orr.w	r1, r5, r3
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	f1c4 040c 	rsb	r4, r4, #12
 8000492:	f1c4 0220 	rsb	r2, r4, #32
 8000496:	fa20 f002 	lsr.w	r0, r0, r2
 800049a:	fa01 f304 	lsl.w	r3, r1, r4
 800049e:	ea40 0003 	orr.w	r0, r0, r3
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	fa21 f004 	lsr.w	r0, r1, r4
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	f094 0f00 	teq	r4, #0
 80004b2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004b6:	bf06      	itte	eq
 80004b8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004bc:	3401      	addeq	r4, #1
 80004be:	3d01      	subne	r5, #1
 80004c0:	e74e      	b.n	8000360 <__adddf3+0x8c>
 80004c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004c6:	bf18      	it	ne
 80004c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004cc:	d029      	beq.n	8000522 <__adddf3+0x24e>
 80004ce:	ea94 0f05 	teq	r4, r5
 80004d2:	bf08      	it	eq
 80004d4:	ea90 0f02 	teqeq	r0, r2
 80004d8:	d005      	beq.n	80004e6 <__adddf3+0x212>
 80004da:	ea54 0c00 	orrs.w	ip, r4, r0
 80004de:	bf04      	itt	eq
 80004e0:	4619      	moveq	r1, r3
 80004e2:	4610      	moveq	r0, r2
 80004e4:	bd30      	pop	{r4, r5, pc}
 80004e6:	ea91 0f03 	teq	r1, r3
 80004ea:	bf1e      	ittt	ne
 80004ec:	2100      	movne	r1, #0
 80004ee:	2000      	movne	r0, #0
 80004f0:	bd30      	popne	{r4, r5, pc}
 80004f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004f6:	d105      	bne.n	8000504 <__adddf3+0x230>
 80004f8:	0040      	lsls	r0, r0, #1
 80004fa:	4149      	adcs	r1, r1
 80004fc:	bf28      	it	cs
 80004fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000502:	bd30      	pop	{r4, r5, pc}
 8000504:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000508:	bf3c      	itt	cc
 800050a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800050e:	bd30      	popcc	{r4, r5, pc}
 8000510:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000514:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000518:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800051c:	f04f 0000 	mov.w	r0, #0
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000526:	bf1a      	itte	ne
 8000528:	4619      	movne	r1, r3
 800052a:	4610      	movne	r0, r2
 800052c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000530:	bf1c      	itt	ne
 8000532:	460b      	movne	r3, r1
 8000534:	4602      	movne	r2, r0
 8000536:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800053a:	bf06      	itte	eq
 800053c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000540:	ea91 0f03 	teqeq	r1, r3
 8000544:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	bf00      	nop

0800054c <__aeabi_ui2d>:
 800054c:	f090 0f00 	teq	r0, #0
 8000550:	bf04      	itt	eq
 8000552:	2100      	moveq	r1, #0
 8000554:	4770      	bxeq	lr
 8000556:	b530      	push	{r4, r5, lr}
 8000558:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800055c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000560:	f04f 0500 	mov.w	r5, #0
 8000564:	f04f 0100 	mov.w	r1, #0
 8000568:	e750      	b.n	800040c <__adddf3+0x138>
 800056a:	bf00      	nop

0800056c <__aeabi_i2d>:
 800056c:	f090 0f00 	teq	r0, #0
 8000570:	bf04      	itt	eq
 8000572:	2100      	moveq	r1, #0
 8000574:	4770      	bxeq	lr
 8000576:	b530      	push	{r4, r5, lr}
 8000578:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800057c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000580:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000584:	bf48      	it	mi
 8000586:	4240      	negmi	r0, r0
 8000588:	f04f 0100 	mov.w	r1, #0
 800058c:	e73e      	b.n	800040c <__adddf3+0x138>
 800058e:	bf00      	nop

08000590 <__aeabi_f2d>:
 8000590:	0042      	lsls	r2, r0, #1
 8000592:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000596:	ea4f 0131 	mov.w	r1, r1, rrx
 800059a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800059e:	bf1f      	itttt	ne
 80005a0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005a4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005ac:	4770      	bxne	lr
 80005ae:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005b2:	bf08      	it	eq
 80005b4:	4770      	bxeq	lr
 80005b6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005ba:	bf04      	itt	eq
 80005bc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c0:	4770      	bxeq	lr
 80005c2:	b530      	push	{r4, r5, lr}
 80005c4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005cc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d0:	e71c      	b.n	800040c <__adddf3+0x138>
 80005d2:	bf00      	nop

080005d4 <__aeabi_ul2d>:
 80005d4:	ea50 0201 	orrs.w	r2, r0, r1
 80005d8:	bf08      	it	eq
 80005da:	4770      	bxeq	lr
 80005dc:	b530      	push	{r4, r5, lr}
 80005de:	f04f 0500 	mov.w	r5, #0
 80005e2:	e00a      	b.n	80005fa <__aeabi_l2d+0x16>

080005e4 <__aeabi_l2d>:
 80005e4:	ea50 0201 	orrs.w	r2, r0, r1
 80005e8:	bf08      	it	eq
 80005ea:	4770      	bxeq	lr
 80005ec:	b530      	push	{r4, r5, lr}
 80005ee:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005f2:	d502      	bpl.n	80005fa <__aeabi_l2d+0x16>
 80005f4:	4240      	negs	r0, r0
 80005f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005fa:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005fe:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000602:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000606:	f43f aed8 	beq.w	80003ba <__adddf3+0xe6>
 800060a:	f04f 0203 	mov.w	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000622:	f1c2 0320 	rsb	r3, r2, #32
 8000626:	fa00 fc03 	lsl.w	ip, r0, r3
 800062a:	fa20 f002 	lsr.w	r0, r0, r2
 800062e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000632:	ea40 000e 	orr.w	r0, r0, lr
 8000636:	fa21 f102 	lsr.w	r1, r1, r2
 800063a:	4414      	add	r4, r2
 800063c:	e6bd      	b.n	80003ba <__adddf3+0xe6>
 800063e:	bf00      	nop

08000640 <__aeabi_dmul>:
 8000640:	b570      	push	{r4, r5, r6, lr}
 8000642:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000646:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800064a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800064e:	bf1d      	ittte	ne
 8000650:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000654:	ea94 0f0c 	teqne	r4, ip
 8000658:	ea95 0f0c 	teqne	r5, ip
 800065c:	f000 f8de 	bleq	800081c <__aeabi_dmul+0x1dc>
 8000660:	442c      	add	r4, r5
 8000662:	ea81 0603 	eor.w	r6, r1, r3
 8000666:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800066a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800066e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000672:	bf18      	it	ne
 8000674:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000678:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800067c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000680:	d038      	beq.n	80006f4 <__aeabi_dmul+0xb4>
 8000682:	fba0 ce02 	umull	ip, lr, r0, r2
 8000686:	f04f 0500 	mov.w	r5, #0
 800068a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800068e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000692:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000696:	f04f 0600 	mov.w	r6, #0
 800069a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800069e:	f09c 0f00 	teq	ip, #0
 80006a2:	bf18      	it	ne
 80006a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006ac:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006b4:	d204      	bcs.n	80006c0 <__aeabi_dmul+0x80>
 80006b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006ba:	416d      	adcs	r5, r5
 80006bc:	eb46 0606 	adc.w	r6, r6, r6
 80006c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006d4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d8:	bf88      	it	hi
 80006da:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006de:	d81e      	bhi.n	800071e <__aeabi_dmul+0xde>
 80006e0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006e4:	bf08      	it	eq
 80006e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006ea:	f150 0000 	adcs.w	r0, r0, #0
 80006ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f8:	ea46 0101 	orr.w	r1, r6, r1
 80006fc:	ea40 0002 	orr.w	r0, r0, r2
 8000700:	ea81 0103 	eor.w	r1, r1, r3
 8000704:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000708:	bfc2      	ittt	gt
 800070a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800070e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000712:	bd70      	popgt	{r4, r5, r6, pc}
 8000714:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000718:	f04f 0e00 	mov.w	lr, #0
 800071c:	3c01      	subs	r4, #1
 800071e:	f300 80ab 	bgt.w	8000878 <__aeabi_dmul+0x238>
 8000722:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000726:	bfde      	ittt	le
 8000728:	2000      	movle	r0, #0
 800072a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800072e:	bd70      	pople	{r4, r5, r6, pc}
 8000730:	f1c4 0400 	rsb	r4, r4, #0
 8000734:	3c20      	subs	r4, #32
 8000736:	da35      	bge.n	80007a4 <__aeabi_dmul+0x164>
 8000738:	340c      	adds	r4, #12
 800073a:	dc1b      	bgt.n	8000774 <__aeabi_dmul+0x134>
 800073c:	f104 0414 	add.w	r4, r4, #20
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f305 	lsl.w	r3, r0, r5
 8000748:	fa20 f004 	lsr.w	r0, r0, r4
 800074c:	fa01 f205 	lsl.w	r2, r1, r5
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000758:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800075c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000760:	fa21 f604 	lsr.w	r6, r1, r4
 8000764:	eb42 0106 	adc.w	r1, r2, r6
 8000768:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800076c:	bf08      	it	eq
 800076e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000772:	bd70      	pop	{r4, r5, r6, pc}
 8000774:	f1c4 040c 	rsb	r4, r4, #12
 8000778:	f1c4 0520 	rsb	r5, r4, #32
 800077c:	fa00 f304 	lsl.w	r3, r0, r4
 8000780:	fa20 f005 	lsr.w	r0, r0, r5
 8000784:	fa01 f204 	lsl.w	r2, r1, r4
 8000788:	ea40 0002 	orr.w	r0, r0, r2
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000794:	f141 0100 	adc.w	r1, r1, #0
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f1c4 0520 	rsb	r5, r4, #32
 80007a8:	fa00 f205 	lsl.w	r2, r0, r5
 80007ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b0:	fa20 f304 	lsr.w	r3, r0, r4
 80007b4:	fa01 f205 	lsl.w	r2, r1, r5
 80007b8:	ea43 0302 	orr.w	r3, r3, r2
 80007bc:	fa21 f004 	lsr.w	r0, r1, r4
 80007c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007c4:	fa21 f204 	lsr.w	r2, r1, r4
 80007c8:	ea20 0002 	bic.w	r0, r0, r2
 80007cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007d4:	bf08      	it	eq
 80007d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007da:	bd70      	pop	{r4, r5, r6, pc}
 80007dc:	f094 0f00 	teq	r4, #0
 80007e0:	d10f      	bne.n	8000802 <__aeabi_dmul+0x1c2>
 80007e2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007e6:	0040      	lsls	r0, r0, #1
 80007e8:	eb41 0101 	adc.w	r1, r1, r1
 80007ec:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f0:	bf08      	it	eq
 80007f2:	3c01      	subeq	r4, #1
 80007f4:	d0f7      	beq.n	80007e6 <__aeabi_dmul+0x1a6>
 80007f6:	ea41 0106 	orr.w	r1, r1, r6
 80007fa:	f095 0f00 	teq	r5, #0
 80007fe:	bf18      	it	ne
 8000800:	4770      	bxne	lr
 8000802:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000806:	0052      	lsls	r2, r2, #1
 8000808:	eb43 0303 	adc.w	r3, r3, r3
 800080c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000810:	bf08      	it	eq
 8000812:	3d01      	subeq	r5, #1
 8000814:	d0f7      	beq.n	8000806 <__aeabi_dmul+0x1c6>
 8000816:	ea43 0306 	orr.w	r3, r3, r6
 800081a:	4770      	bx	lr
 800081c:	ea94 0f0c 	teq	r4, ip
 8000820:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000824:	bf18      	it	ne
 8000826:	ea95 0f0c 	teqne	r5, ip
 800082a:	d00c      	beq.n	8000846 <__aeabi_dmul+0x206>
 800082c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000830:	bf18      	it	ne
 8000832:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000836:	d1d1      	bne.n	80007dc <__aeabi_dmul+0x19c>
 8000838:	ea81 0103 	eor.w	r1, r1, r3
 800083c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000840:	f04f 0000 	mov.w	r0, #0
 8000844:	bd70      	pop	{r4, r5, r6, pc}
 8000846:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800084a:	bf06      	itte	eq
 800084c:	4610      	moveq	r0, r2
 800084e:	4619      	moveq	r1, r3
 8000850:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000854:	d019      	beq.n	800088a <__aeabi_dmul+0x24a>
 8000856:	ea94 0f0c 	teq	r4, ip
 800085a:	d102      	bne.n	8000862 <__aeabi_dmul+0x222>
 800085c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000860:	d113      	bne.n	800088a <__aeabi_dmul+0x24a>
 8000862:	ea95 0f0c 	teq	r5, ip
 8000866:	d105      	bne.n	8000874 <__aeabi_dmul+0x234>
 8000868:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800086c:	bf1c      	itt	ne
 800086e:	4610      	movne	r0, r2
 8000870:	4619      	movne	r1, r3
 8000872:	d10a      	bne.n	800088a <__aeabi_dmul+0x24a>
 8000874:	ea81 0103 	eor.w	r1, r1, r3
 8000878:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800087c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000880:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000884:	f04f 0000 	mov.w	r0, #0
 8000888:	bd70      	pop	{r4, r5, r6, pc}
 800088a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800088e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000892:	bd70      	pop	{r4, r5, r6, pc}

08000894 <__aeabi_ddiv>:
 8000894:	b570      	push	{r4, r5, r6, lr}
 8000896:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800089a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800089e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008a2:	bf1d      	ittte	ne
 80008a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a8:	ea94 0f0c 	teqne	r4, ip
 80008ac:	ea95 0f0c 	teqne	r5, ip
 80008b0:	f000 f8a7 	bleq	8000a02 <__aeabi_ddiv+0x16e>
 80008b4:	eba4 0405 	sub.w	r4, r4, r5
 80008b8:	ea81 0e03 	eor.w	lr, r1, r3
 80008bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008c4:	f000 8088 	beq.w	80009d8 <__aeabi_ddiv+0x144>
 80008c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008cc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008ec:	429d      	cmp	r5, r3
 80008ee:	bf08      	it	eq
 80008f0:	4296      	cmpeq	r6, r2
 80008f2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008f6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008fa:	d202      	bcs.n	8000902 <__aeabi_ddiv+0x6e>
 80008fc:	085b      	lsrs	r3, r3, #1
 80008fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000902:	1ab6      	subs	r6, r6, r2
 8000904:	eb65 0503 	sbc.w	r5, r5, r3
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000912:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 000c 	orrcs.w	r0, r0, ip
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000970:	ea55 0e06 	orrs.w	lr, r5, r6
 8000974:	d018      	beq.n	80009a8 <__aeabi_ddiv+0x114>
 8000976:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800097a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800097e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000982:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000986:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800098a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800098e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000992:	d1c0      	bne.n	8000916 <__aeabi_ddiv+0x82>
 8000994:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000998:	d10b      	bne.n	80009b2 <__aeabi_ddiv+0x11e>
 800099a:	ea41 0100 	orr.w	r1, r1, r0
 800099e:	f04f 0000 	mov.w	r0, #0
 80009a2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009a6:	e7b6      	b.n	8000916 <__aeabi_ddiv+0x82>
 80009a8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009ac:	bf04      	itt	eq
 80009ae:	4301      	orreq	r1, r0
 80009b0:	2000      	moveq	r0, #0
 80009b2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009b6:	bf88      	it	hi
 80009b8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009bc:	f63f aeaf 	bhi.w	800071e <__aeabi_dmul+0xde>
 80009c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009c4:	bf04      	itt	eq
 80009c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009ce:	f150 0000 	adcs.w	r0, r0, #0
 80009d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	pop	{r4, r5, r6, pc}
 80009d8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009e4:	bfc2      	ittt	gt
 80009e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	popgt	{r4, r5, r6, pc}
 80009f0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009f4:	f04f 0e00 	mov.w	lr, #0
 80009f8:	3c01      	subs	r4, #1
 80009fa:	e690      	b.n	800071e <__aeabi_dmul+0xde>
 80009fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000a00:	e68d      	b.n	800071e <__aeabi_dmul+0xde>
 8000a02:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a06:	ea94 0f0c 	teq	r4, ip
 8000a0a:	bf08      	it	eq
 8000a0c:	ea95 0f0c 	teqeq	r5, ip
 8000a10:	f43f af3b 	beq.w	800088a <__aeabi_dmul+0x24a>
 8000a14:	ea94 0f0c 	teq	r4, ip
 8000a18:	d10a      	bne.n	8000a30 <__aeabi_ddiv+0x19c>
 8000a1a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a1e:	f47f af34 	bne.w	800088a <__aeabi_dmul+0x24a>
 8000a22:	ea95 0f0c 	teq	r5, ip
 8000a26:	f47f af25 	bne.w	8000874 <__aeabi_dmul+0x234>
 8000a2a:	4610      	mov	r0, r2
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	e72c      	b.n	800088a <__aeabi_dmul+0x24a>
 8000a30:	ea95 0f0c 	teq	r5, ip
 8000a34:	d106      	bne.n	8000a44 <__aeabi_ddiv+0x1b0>
 8000a36:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a3a:	f43f aefd 	beq.w	8000838 <__aeabi_dmul+0x1f8>
 8000a3e:	4610      	mov	r0, r2
 8000a40:	4619      	mov	r1, r3
 8000a42:	e722      	b.n	800088a <__aeabi_dmul+0x24a>
 8000a44:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a48:	bf18      	it	ne
 8000a4a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a4e:	f47f aec5 	bne.w	80007dc <__aeabi_dmul+0x19c>
 8000a52:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a56:	f47f af0d 	bne.w	8000874 <__aeabi_dmul+0x234>
 8000a5a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a5e:	f47f aeeb 	bne.w	8000838 <__aeabi_dmul+0x1f8>
 8000a62:	e712      	b.n	800088a <__aeabi_dmul+0x24a>

08000a64 <__gedf2>:
 8000a64:	f04f 3cff 	mov.w	ip, #4294967295
 8000a68:	e006      	b.n	8000a78 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__ledf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	e002      	b.n	8000a78 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__cmpdf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	bf18      	it	ne
 8000a8a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a8e:	d01b      	beq.n	8000ac8 <__cmpdf2+0x54>
 8000a90:	b001      	add	sp, #4
 8000a92:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a96:	bf0c      	ite	eq
 8000a98:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a9c:	ea91 0f03 	teqne	r1, r3
 8000aa0:	bf02      	ittt	eq
 8000aa2:	ea90 0f02 	teqeq	r0, r2
 8000aa6:	2000      	moveq	r0, #0
 8000aa8:	4770      	bxeq	lr
 8000aaa:	f110 0f00 	cmn.w	r0, #0
 8000aae:	ea91 0f03 	teq	r1, r3
 8000ab2:	bf58      	it	pl
 8000ab4:	4299      	cmppl	r1, r3
 8000ab6:	bf08      	it	eq
 8000ab8:	4290      	cmpeq	r0, r2
 8000aba:	bf2c      	ite	cs
 8000abc:	17d8      	asrcs	r0, r3, #31
 8000abe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ac2:	f040 0001 	orr.w	r0, r0, #1
 8000ac6:	4770      	bx	lr
 8000ac8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000acc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad0:	d102      	bne.n	8000ad8 <__cmpdf2+0x64>
 8000ad2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ad6:	d107      	bne.n	8000ae8 <__cmpdf2+0x74>
 8000ad8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000adc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae0:	d1d6      	bne.n	8000a90 <__cmpdf2+0x1c>
 8000ae2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ae6:	d0d3      	beq.n	8000a90 <__cmpdf2+0x1c>
 8000ae8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop

08000af0 <__aeabi_cdrcmple>:
 8000af0:	4684      	mov	ip, r0
 8000af2:	4610      	mov	r0, r2
 8000af4:	4662      	mov	r2, ip
 8000af6:	468c      	mov	ip, r1
 8000af8:	4619      	mov	r1, r3
 8000afa:	4663      	mov	r3, ip
 8000afc:	e000      	b.n	8000b00 <__aeabi_cdcmpeq>
 8000afe:	bf00      	nop

08000b00 <__aeabi_cdcmpeq>:
 8000b00:	b501      	push	{r0, lr}
 8000b02:	f7ff ffb7 	bl	8000a74 <__cmpdf2>
 8000b06:	2800      	cmp	r0, #0
 8000b08:	bf48      	it	mi
 8000b0a:	f110 0f00 	cmnmi.w	r0, #0
 8000b0e:	bd01      	pop	{r0, pc}

08000b10 <__aeabi_dcmpeq>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff fff4 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b18:	bf0c      	ite	eq
 8000b1a:	2001      	moveq	r0, #1
 8000b1c:	2000      	movne	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmplt>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffea 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b2c:	bf34      	ite	cc
 8000b2e:	2001      	movcc	r0, #1
 8000b30:	2000      	movcs	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmple>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffe0 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b40:	bf94      	ite	ls
 8000b42:	2001      	movls	r0, #1
 8000b44:	2000      	movhi	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpge>:
 8000b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b50:	f7ff ffce 	bl	8000af0 <__aeabi_cdrcmple>
 8000b54:	bf94      	ite	ls
 8000b56:	2001      	movls	r0, #1
 8000b58:	2000      	movhi	r0, #0
 8000b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5e:	bf00      	nop

08000b60 <__aeabi_dcmpgt>:
 8000b60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b64:	f7ff ffc4 	bl	8000af0 <__aeabi_cdrcmple>
 8000b68:	bf34      	ite	cc
 8000b6a:	2001      	movcc	r0, #1
 8000b6c:	2000      	movcs	r0, #0
 8000b6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b72:	bf00      	nop

08000b74 <__aeabi_dcmpun>:
 8000b74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b7c:	d102      	bne.n	8000b84 <__aeabi_dcmpun+0x10>
 8000b7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b82:	d10a      	bne.n	8000b9a <__aeabi_dcmpun+0x26>
 8000b84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b8c:	d102      	bne.n	8000b94 <__aeabi_dcmpun+0x20>
 8000b8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b92:	d102      	bne.n	8000b9a <__aeabi_dcmpun+0x26>
 8000b94:	f04f 0000 	mov.w	r0, #0
 8000b98:	4770      	bx	lr
 8000b9a:	f04f 0001 	mov.w	r0, #1
 8000b9e:	4770      	bx	lr

08000ba0 <__aeabi_d2iz>:
 8000ba0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ba4:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba8:	d215      	bcs.n	8000bd6 <__aeabi_d2iz+0x36>
 8000baa:	d511      	bpl.n	8000bd0 <__aeabi_d2iz+0x30>
 8000bac:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bb4:	d912      	bls.n	8000bdc <__aeabi_d2iz+0x3c>
 8000bb6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bba:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bbe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bc2:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bc6:	fa23 f002 	lsr.w	r0, r3, r2
 8000bca:	bf18      	it	ne
 8000bcc:	4240      	negne	r0, r0
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d105      	bne.n	8000be8 <__aeabi_d2iz+0x48>
 8000bdc:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be0:	bf08      	it	eq
 8000be2:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop

08000bf0 <__aeabi_d2uiz>:
 8000bf0:	004a      	lsls	r2, r1, #1
 8000bf2:	d211      	bcs.n	8000c18 <__aeabi_d2uiz+0x28>
 8000bf4:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bf8:	d211      	bcs.n	8000c1e <__aeabi_d2uiz+0x2e>
 8000bfa:	d50d      	bpl.n	8000c18 <__aeabi_d2uiz+0x28>
 8000bfc:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c00:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c04:	d40e      	bmi.n	8000c24 <__aeabi_d2uiz+0x34>
 8000c06:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c0e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c12:	fa23 f002 	lsr.w	r0, r3, r2
 8000c16:	4770      	bx	lr
 8000c18:	f04f 0000 	mov.w	r0, #0
 8000c1c:	4770      	bx	lr
 8000c1e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c22:	d102      	bne.n	8000c2a <__aeabi_d2uiz+0x3a>
 8000c24:	f04f 30ff 	mov.w	r0, #4294967295
 8000c28:	4770      	bx	lr
 8000c2a:	f04f 0000 	mov.w	r0, #0
 8000c2e:	4770      	bx	lr

08000c30 <__aeabi_d2f>:
 8000c30:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c34:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c38:	bf24      	itt	cs
 8000c3a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c3e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c42:	d90d      	bls.n	8000c60 <__aeabi_d2f+0x30>
 8000c44:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c48:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c4c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c50:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c54:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c58:	bf08      	it	eq
 8000c5a:	f020 0001 	biceq.w	r0, r0, #1
 8000c5e:	4770      	bx	lr
 8000c60:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c64:	d121      	bne.n	8000caa <__aeabi_d2f+0x7a>
 8000c66:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c6a:	bfbc      	itt	lt
 8000c6c:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c70:	4770      	bxlt	lr
 8000c72:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c76:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c7a:	f1c2 0218 	rsb	r2, r2, #24
 8000c7e:	f1c2 0c20 	rsb	ip, r2, #32
 8000c82:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c86:	fa20 f002 	lsr.w	r0, r0, r2
 8000c8a:	bf18      	it	ne
 8000c8c:	f040 0001 	orrne.w	r0, r0, #1
 8000c90:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c94:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c98:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c9c:	ea40 000c 	orr.w	r0, r0, ip
 8000ca0:	fa23 f302 	lsr.w	r3, r3, r2
 8000ca4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca8:	e7cc      	b.n	8000c44 <__aeabi_d2f+0x14>
 8000caa:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cae:	d107      	bne.n	8000cc0 <__aeabi_d2f+0x90>
 8000cb0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cb4:	bf1e      	ittt	ne
 8000cb6:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cba:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cbe:	4770      	bxne	lr
 8000cc0:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cc4:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cc8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ccc:	4770      	bx	lr
 8000cce:	bf00      	nop

08000cd0 <__gesf2>:
 8000cd0:	f04f 3cff 	mov.w	ip, #4294967295
 8000cd4:	e006      	b.n	8000ce4 <__cmpsf2+0x4>
 8000cd6:	bf00      	nop

08000cd8 <__lesf2>:
 8000cd8:	f04f 0c01 	mov.w	ip, #1
 8000cdc:	e002      	b.n	8000ce4 <__cmpsf2+0x4>
 8000cde:	bf00      	nop

08000ce0 <__cmpsf2>:
 8000ce0:	f04f 0c01 	mov.w	ip, #1
 8000ce4:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ce8:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000cec:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000cf0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000cf4:	bf18      	it	ne
 8000cf6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cfa:	d011      	beq.n	8000d20 <__cmpsf2+0x40>
 8000cfc:	b001      	add	sp, #4
 8000cfe:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000d02:	bf18      	it	ne
 8000d04:	ea90 0f01 	teqne	r0, r1
 8000d08:	bf58      	it	pl
 8000d0a:	ebb2 0003 	subspl.w	r0, r2, r3
 8000d0e:	bf88      	it	hi
 8000d10:	17c8      	asrhi	r0, r1, #31
 8000d12:	bf38      	it	cc
 8000d14:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000d18:	bf18      	it	ne
 8000d1a:	f040 0001 	orrne.w	r0, r0, #1
 8000d1e:	4770      	bx	lr
 8000d20:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d24:	d102      	bne.n	8000d2c <__cmpsf2+0x4c>
 8000d26:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000d2a:	d105      	bne.n	8000d38 <__cmpsf2+0x58>
 8000d2c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000d30:	d1e4      	bne.n	8000cfc <__cmpsf2+0x1c>
 8000d32:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000d36:	d0e1      	beq.n	8000cfc <__cmpsf2+0x1c>
 8000d38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000d3c:	4770      	bx	lr
 8000d3e:	bf00      	nop

08000d40 <__aeabi_cfrcmple>:
 8000d40:	4684      	mov	ip, r0
 8000d42:	4608      	mov	r0, r1
 8000d44:	4661      	mov	r1, ip
 8000d46:	e7ff      	b.n	8000d48 <__aeabi_cfcmpeq>

08000d48 <__aeabi_cfcmpeq>:
 8000d48:	b50f      	push	{r0, r1, r2, r3, lr}
 8000d4a:	f7ff ffc9 	bl	8000ce0 <__cmpsf2>
 8000d4e:	2800      	cmp	r0, #0
 8000d50:	bf48      	it	mi
 8000d52:	f110 0f00 	cmnmi.w	r0, #0
 8000d56:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000d58 <__aeabi_fcmpeq>:
 8000d58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d5c:	f7ff fff4 	bl	8000d48 <__aeabi_cfcmpeq>
 8000d60:	bf0c      	ite	eq
 8000d62:	2001      	moveq	r0, #1
 8000d64:	2000      	movne	r0, #0
 8000d66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d6a:	bf00      	nop

08000d6c <__aeabi_fcmplt>:
 8000d6c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d70:	f7ff ffea 	bl	8000d48 <__aeabi_cfcmpeq>
 8000d74:	bf34      	ite	cc
 8000d76:	2001      	movcc	r0, #1
 8000d78:	2000      	movcs	r0, #0
 8000d7a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d7e:	bf00      	nop

08000d80 <__aeabi_fcmple>:
 8000d80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d84:	f7ff ffe0 	bl	8000d48 <__aeabi_cfcmpeq>
 8000d88:	bf94      	ite	ls
 8000d8a:	2001      	movls	r0, #1
 8000d8c:	2000      	movhi	r0, #0
 8000d8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d92:	bf00      	nop

08000d94 <__aeabi_fcmpge>:
 8000d94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d98:	f7ff ffd2 	bl	8000d40 <__aeabi_cfrcmple>
 8000d9c:	bf94      	ite	ls
 8000d9e:	2001      	movls	r0, #1
 8000da0:	2000      	movhi	r0, #0
 8000da2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000da6:	bf00      	nop

08000da8 <__aeabi_fcmpgt>:
 8000da8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000dac:	f7ff ffc8 	bl	8000d40 <__aeabi_cfrcmple>
 8000db0:	bf34      	ite	cc
 8000db2:	2001      	movcc	r0, #1
 8000db4:	2000      	movcs	r0, #0
 8000db6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000dba:	bf00      	nop

08000dbc <__aeabi_d2lz>:
 8000dbc:	b538      	push	{r3, r4, r5, lr}
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	4604      	mov	r4, r0
 8000dc4:	460d      	mov	r5, r1
 8000dc6:	f7ff fead 	bl	8000b24 <__aeabi_dcmplt>
 8000dca:	b928      	cbnz	r0, 8000dd8 <__aeabi_d2lz+0x1c>
 8000dcc:	4620      	mov	r0, r4
 8000dce:	4629      	mov	r1, r5
 8000dd0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000dd4:	f000 b80a 	b.w	8000dec <__aeabi_d2ulz>
 8000dd8:	4620      	mov	r0, r4
 8000dda:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000dde:	f000 f805 	bl	8000dec <__aeabi_d2ulz>
 8000de2:	4240      	negs	r0, r0
 8000de4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000de8:	bd38      	pop	{r3, r4, r5, pc}
 8000dea:	bf00      	nop

08000dec <__aeabi_d2ulz>:
 8000dec:	b5d0      	push	{r4, r6, r7, lr}
 8000dee:	2200      	movs	r2, #0
 8000df0:	4b0b      	ldr	r3, [pc, #44]	@ (8000e20 <__aeabi_d2ulz+0x34>)
 8000df2:	4606      	mov	r6, r0
 8000df4:	460f      	mov	r7, r1
 8000df6:	f7ff fc23 	bl	8000640 <__aeabi_dmul>
 8000dfa:	f7ff fef9 	bl	8000bf0 <__aeabi_d2uiz>
 8000dfe:	4604      	mov	r4, r0
 8000e00:	f7ff fba4 	bl	800054c <__aeabi_ui2d>
 8000e04:	2200      	movs	r2, #0
 8000e06:	4b07      	ldr	r3, [pc, #28]	@ (8000e24 <__aeabi_d2ulz+0x38>)
 8000e08:	f7ff fc1a 	bl	8000640 <__aeabi_dmul>
 8000e0c:	4602      	mov	r2, r0
 8000e0e:	460b      	mov	r3, r1
 8000e10:	4630      	mov	r0, r6
 8000e12:	4639      	mov	r1, r7
 8000e14:	f7ff fa5c 	bl	80002d0 <__aeabi_dsub>
 8000e18:	f7ff feea 	bl	8000bf0 <__aeabi_d2uiz>
 8000e1c:	4621      	mov	r1, r4
 8000e1e:	bdd0      	pop	{r4, r6, r7, pc}
 8000e20:	3df00000 	.word	0x3df00000
 8000e24:	41f00000 	.word	0x41f00000

08000e28 <LCD_Write_4bit>:
#define LCD_Send_cmd_4bit(Value)		LCD_Write_4bit(Value,0)
#define LCD_Send_data(Value)			LCD_Write_8bit(Value,1)
#define LCD_SetCursor(row,col)			LCD_Send_cmd(0x80+(row*64)+col)
#define LCD_clear()						LCD_Write_8bit(0x01,0)
// Ham gui du lieu 4-bit toi LCD
void LCD_Write_4bit(uint8_t value, uint8_t cmd_data) {
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b082      	sub	sp, #8
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	4603      	mov	r3, r0
 8000e30:	460a      	mov	r2, r1
 8000e32:	71fb      	strb	r3, [r7, #7]
 8000e34:	4613      	mov	r3, r2
 8000e36:	71bb      	strb	r3, [r7, #6]
	LCD_Write_Pin(LCD_RS_Pin, cmd_data); // Xac dinh la lenh (0) hay du lieu(1)
 8000e38:	79bb      	ldrb	r3, [r7, #6]
 8000e3a:	461a      	mov	r2, r3
 8000e3c:	2120      	movs	r1, #32
 8000e3e:	4822      	ldr	r0, [pc, #136]	@ (8000ec8 <LCD_Write_4bit+0xa0>)
 8000e40:	f001 fed0 	bl	8002be4 <HAL_GPIO_WritePin>
	LCD_Set_Pin(LCD_E_Pin);//Kich hoat chan E
 8000e44:	2201      	movs	r2, #1
 8000e46:	2110      	movs	r1, #16
 8000e48:	481f      	ldr	r0, [pc, #124]	@ (8000ec8 <LCD_Write_4bit+0xa0>)
 8000e4a:	f001 fecb 	bl	8002be4 <HAL_GPIO_WritePin>
	LCD_Delay_ms(1);
 8000e4e:	2001      	movs	r0, #1
 8000e50:	f000 ff08 	bl	8001c64 <HAL_Delay>
	//Gui tung bit toi cac chan D4-D7
	LCD_Write_Pin(LCD_D4_Pin, LCD_GetBit(value,0));
 8000e54:	79fb      	ldrb	r3, [r7, #7]
 8000e56:	f003 0301 	and.w	r3, r3, #1
 8000e5a:	b2db      	uxtb	r3, r3
 8000e5c:	461a      	mov	r2, r3
 8000e5e:	2108      	movs	r1, #8
 8000e60:	4819      	ldr	r0, [pc, #100]	@ (8000ec8 <LCD_Write_4bit+0xa0>)
 8000e62:	f001 febf 	bl	8002be4 <HAL_GPIO_WritePin>
	LCD_Write_Pin(LCD_D5_Pin, LCD_GetBit(value,1));
 8000e66:	79fb      	ldrb	r3, [r7, #7]
 8000e68:	085b      	lsrs	r3, r3, #1
 8000e6a:	b2db      	uxtb	r3, r3
 8000e6c:	f003 0301 	and.w	r3, r3, #1
 8000e70:	b2db      	uxtb	r3, r3
 8000e72:	461a      	mov	r2, r3
 8000e74:	2104      	movs	r1, #4
 8000e76:	4814      	ldr	r0, [pc, #80]	@ (8000ec8 <LCD_Write_4bit+0xa0>)
 8000e78:	f001 feb4 	bl	8002be4 <HAL_GPIO_WritePin>
	LCD_Write_Pin(LCD_D6_Pin, LCD_GetBit(value,2));
 8000e7c:	79fb      	ldrb	r3, [r7, #7]
 8000e7e:	089b      	lsrs	r3, r3, #2
 8000e80:	b2db      	uxtb	r3, r3
 8000e82:	f003 0301 	and.w	r3, r3, #1
 8000e86:	b2db      	uxtb	r3, r3
 8000e88:	461a      	mov	r2, r3
 8000e8a:	2102      	movs	r1, #2
 8000e8c:	480e      	ldr	r0, [pc, #56]	@ (8000ec8 <LCD_Write_4bit+0xa0>)
 8000e8e:	f001 fea9 	bl	8002be4 <HAL_GPIO_WritePin>
	LCD_Write_Pin(LCD_D7_Pin, LCD_GetBit(value,3));
 8000e92:	79fb      	ldrb	r3, [r7, #7]
 8000e94:	08db      	lsrs	r3, r3, #3
 8000e96:	b2db      	uxtb	r3, r3
 8000e98:	f003 0301 	and.w	r3, r3, #1
 8000e9c:	b2db      	uxtb	r3, r3
 8000e9e:	461a      	mov	r2, r3
 8000ea0:	2101      	movs	r1, #1
 8000ea2:	4809      	ldr	r0, [pc, #36]	@ (8000ec8 <LCD_Write_4bit+0xa0>)
 8000ea4:	f001 fe9e 	bl	8002be4 <HAL_GPIO_WritePin>
	LCD_Delay_ms(1);
 8000ea8:	2001      	movs	r0, #1
 8000eaa:	f000 fedb 	bl	8001c64 <HAL_Delay>
	LCD_Reset_Pin(LCD_E_Pin);//Tat chan E
 8000eae:	2200      	movs	r2, #0
 8000eb0:	2110      	movs	r1, #16
 8000eb2:	4805      	ldr	r0, [pc, #20]	@ (8000ec8 <LCD_Write_4bit+0xa0>)
 8000eb4:	f001 fe96 	bl	8002be4 <HAL_GPIO_WritePin>
	LCD_Delay_ms(1);
 8000eb8:	2001      	movs	r0, #1
 8000eba:	f000 fed3 	bl	8001c64 <HAL_Delay>
}
 8000ebe:	bf00      	nop
 8000ec0:	3708      	adds	r7, #8
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	40010c00 	.word	0x40010c00

08000ecc <LCD_Write_8bit>:
// ham gui du lieu 8-bit toi LCD
void LCD_Write_8bit(uint8_t value, uint8_t cmd_data) {
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b082      	sub	sp, #8
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	460a      	mov	r2, r1
 8000ed6:	71fb      	strb	r3, [r7, #7]
 8000ed8:	4613      	mov	r3, r2
 8000eda:	71bb      	strb	r3, [r7, #6]
	LCD_Write_4bit((value >> 4) & 0x0F, cmd_data);//Gui 4-bit cao
 8000edc:	79fb      	ldrb	r3, [r7, #7]
 8000ede:	091b      	lsrs	r3, r3, #4
 8000ee0:	b2db      	uxtb	r3, r3
 8000ee2:	79ba      	ldrb	r2, [r7, #6]
 8000ee4:	4611      	mov	r1, r2
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	f7ff ff9e 	bl	8000e28 <LCD_Write_4bit>
	LCD_Write_4bit(value & 0x0F, cmd_data);//Gui 4-bit thap
 8000eec:	79fb      	ldrb	r3, [r7, #7]
 8000eee:	f003 030f 	and.w	r3, r3, #15
 8000ef2:	b2db      	uxtb	r3, r3
 8000ef4:	79ba      	ldrb	r2, [r7, #6]
 8000ef6:	4611      	mov	r1, r2
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f7ff ff95 	bl	8000e28 <LCD_Write_4bit>
}
 8000efe:	bf00      	nop
 8000f00:	3708      	adds	r7, #8
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}

08000f06 <LCD_Send_string>:

void LCD_Send_string(char *ptr) {
 8000f06:	b580      	push	{r7, lr}
 8000f08:	b084      	sub	sp, #16
 8000f0a:	af00      	add	r7, sp, #0
 8000f0c:	6078      	str	r0, [r7, #4]
	int i;
	int len;
	len = strlen(ptr); // tinh do dai chuoi
 8000f0e:	6878      	ldr	r0, [r7, #4]
 8000f10:	f7ff f91e 	bl	8000150 <strlen>
 8000f14:	4603      	mov	r3, r0
 8000f16:	60bb      	str	r3, [r7, #8]
	for (i = 0; i < len; i++) {
 8000f18:	2300      	movs	r3, #0
 8000f1a:	60fb      	str	r3, [r7, #12]
 8000f1c:	e00a      	b.n	8000f34 <LCD_Send_string+0x2e>
		LCD_Write_8bit(ptr[i], 1); // gui tung ky tu len LCD
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	687a      	ldr	r2, [r7, #4]
 8000f22:	4413      	add	r3, r2
 8000f24:	781b      	ldrb	r3, [r3, #0]
 8000f26:	2101      	movs	r1, #1
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f7ff ffcf 	bl	8000ecc <LCD_Write_8bit>
	for (i = 0; i < len; i++) {
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	3301      	adds	r3, #1
 8000f32:	60fb      	str	r3, [r7, #12]
 8000f34:	68fa      	ldr	r2, [r7, #12]
 8000f36:	68bb      	ldr	r3, [r7, #8]
 8000f38:	429a      	cmp	r2, r3
 8000f3a:	dbf0      	blt.n	8000f1e <LCD_Send_string+0x18>
	}
}
 8000f3c:	bf00      	nop
 8000f3e:	bf00      	nop
 8000f40:	3710      	adds	r7, #16
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}

08000f46 <LCD_init>:
void LCD_init() {
 8000f46:	b580      	push	{r7, lr}
 8000f48:	af00      	add	r7, sp, #0
	LCD_Send_cmd_4bit(0x03); //Che do khoi tao LCD
 8000f4a:	2100      	movs	r1, #0
 8000f4c:	2003      	movs	r0, #3
 8000f4e:	f7ff ff6b 	bl	8000e28 <LCD_Write_4bit>
	LCD_Delay_ms(5);
 8000f52:	2005      	movs	r0, #5
 8000f54:	f000 fe86 	bl	8001c64 <HAL_Delay>
	LCD_Send_cmd_4bit(0x03);
 8000f58:	2100      	movs	r1, #0
 8000f5a:	2003      	movs	r0, #3
 8000f5c:	f7ff ff64 	bl	8000e28 <LCD_Write_4bit>
	LCD_Delay_ms(1);
 8000f60:	2001      	movs	r0, #1
 8000f62:	f000 fe7f 	bl	8001c64 <HAL_Delay>
	LCD_Send_cmd_4bit(0x03);
 8000f66:	2100      	movs	r1, #0
 8000f68:	2003      	movs	r0, #3
 8000f6a:	f7ff ff5d 	bl	8000e28 <LCD_Write_4bit>
	LCD_Delay_ms(1);
 8000f6e:	2001      	movs	r0, #1
 8000f70:	f000 fe78 	bl	8001c64 <HAL_Delay>
	LCD_Send_cmd_4bit(0x02); // Chuyen ve che do 4-bit
 8000f74:	2100      	movs	r1, #0
 8000f76:	2002      	movs	r0, #2
 8000f78:	f7ff ff56 	bl	8000e28 <LCD_Write_4bit>
	LCD_Delay_ms(1);
 8000f7c:	2001      	movs	r0, #1
 8000f7e:	f000 fe71 	bl	8001c64 <HAL_Delay>
	LCD_Send_cmd(0x28); //4-bit, 2 dong, fort 5x8
 8000f82:	2100      	movs	r1, #0
 8000f84:	2028      	movs	r0, #40	@ 0x28
 8000f86:	f7ff ffa1 	bl	8000ecc <LCD_Write_8bit>
	LCD_Delay_ms(1);
 8000f8a:	2001      	movs	r0, #1
 8000f8c:	f000 fe6a 	bl	8001c64 <HAL_Delay>
	LCD_Send_cmd(0x0C); //Bat hien thi, tat con tro
 8000f90:	2100      	movs	r1, #0
 8000f92:	200c      	movs	r0, #12
 8000f94:	f7ff ff9a 	bl	8000ecc <LCD_Write_8bit>
	LCD_Delay_ms(1);
 8000f98:	2001      	movs	r0, #1
 8000f9a:	f000 fe63 	bl	8001c64 <HAL_Delay>
}
 8000f9e:	bf00      	nop
 8000fa0:	bd80      	pop	{r7, pc}
	...

08000fa4 <Read_ADC_Value>:
int b = 3;


    //HAL_UART_Transmit(&huart1, (uint8_t *)str, strlen(str), HAL_MAX_DELAY);

uint32_t Read_ADC_Value(void) {
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b082      	sub	sp, #8
 8000fa8:	af00      	add	r7, sp, #0
    uint32_t adcValue = 0;
 8000faa:	2300      	movs	r3, #0
 8000fac:	607b      	str	r3, [r7, #4]
    HAL_ADC_Start(&hadc1); // Start Chuyen doi ADC
 8000fae:	480b      	ldr	r0, [pc, #44]	@ (8000fdc <Read_ADC_Value+0x38>)
 8000fb0:	f000 ff54 	bl	8001e5c <HAL_ADC_Start>
    if (HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY) == HAL_OK) {
 8000fb4:	f04f 31ff 	mov.w	r1, #4294967295
 8000fb8:	4808      	ldr	r0, [pc, #32]	@ (8000fdc <Read_ADC_Value+0x38>)
 8000fba:	f001 f829 	bl	8002010 <HAL_ADC_PollForConversion>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d103      	bne.n	8000fcc <Read_ADC_Value+0x28>
        adcValue = HAL_ADC_GetValue(&hadc1); // Lay gia trị ADC
 8000fc4:	4805      	ldr	r0, [pc, #20]	@ (8000fdc <Read_ADC_Value+0x38>)
 8000fc6:	f001 f929 	bl	800221c <HAL_ADC_GetValue>
 8000fca:	6078      	str	r0, [r7, #4]
    }
    HAL_ADC_Stop(&hadc1); // Stop ADC
 8000fcc:	4803      	ldr	r0, [pc, #12]	@ (8000fdc <Read_ADC_Value+0x38>)
 8000fce:	f000 fff3 	bl	8001fb8 <HAL_ADC_Stop>
    return adcValue;
 8000fd2:	687b      	ldr	r3, [r7, #4]
}
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	3708      	adds	r7, #8
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}
 8000fdc:	200001f8 	.word	0x200001f8

08000fe0 <HAL_GPIO_EXTI_Callback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) { //Ham ngat ngoai
 8000fe0:	b480      	push	{r7}
 8000fe2:	b083      	sub	sp, #12
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	80fb      	strh	r3, [r7, #6]
	if ( GPIO_Pin == GPIO_PIN_1) { // Nut Start de hoat dong STM32
 8000fea:	88fb      	ldrh	r3, [r7, #6]
 8000fec:	2b02      	cmp	r3, #2
 8000fee:	d103      	bne.n	8000ff8 <HAL_GPIO_EXTI_Callback+0x18>
		 a = 1;
 8000ff0:	4b07      	ldr	r3, [pc, #28]	@ (8001010 <HAL_GPIO_EXTI_Callback+0x30>)
 8000ff2:	2201      	movs	r2, #1
 8000ff4:	601a      	str	r2, [r3, #0]
	} else if ( GPIO_Pin == GPIO_PIN_2) { // Nut Stop de Ngat hoat dong STM32
		a = 0;
	}
}
 8000ff6:	e005      	b.n	8001004 <HAL_GPIO_EXTI_Callback+0x24>
	} else if ( GPIO_Pin == GPIO_PIN_2) { // Nut Stop de Ngat hoat dong STM32
 8000ff8:	88fb      	ldrh	r3, [r7, #6]
 8000ffa:	2b04      	cmp	r3, #4
 8000ffc:	d102      	bne.n	8001004 <HAL_GPIO_EXTI_Callback+0x24>
		a = 0;
 8000ffe:	4b04      	ldr	r3, [pc, #16]	@ (8001010 <HAL_GPIO_EXTI_Callback+0x30>)
 8001000:	2200      	movs	r2, #0
 8001002:	601a      	str	r2, [r3, #0]
}
 8001004:	bf00      	nop
 8001006:	370c      	adds	r7, #12
 8001008:	46bd      	mov	sp, r7
 800100a:	bc80      	pop	{r7}
 800100c:	4770      	bx	lr
 800100e:	bf00      	nop
 8001010:	20000000 	.word	0x20000000

08001014 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) { // Ham timer
 8001014:	b580      	push	{r7, lr}
 8001016:	b082      	sub	sp, #8
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
	if ( a == 1) { // start thi den Pin_13 se nhay theo
 800101c:	4b06      	ldr	r3, [pc, #24]	@ (8001038 <HAL_TIM_PeriodElapsedCallback+0x24>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	2b01      	cmp	r3, #1
 8001022:	d104      	bne.n	800102e <HAL_TIM_PeriodElapsedCallback+0x1a>
	UNUSED(htim);
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13);
 8001024:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001028:	4804      	ldr	r0, [pc, #16]	@ (800103c <HAL_TIM_PeriodElapsedCallback+0x28>)
 800102a:	f001 fdf3 	bl	8002c14 <HAL_GPIO_TogglePin>
	}
}
 800102e:	bf00      	nop
 8001030:	3708      	adds	r7, #8
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	20000000 	.word	0x20000000
 800103c:	40010c00 	.word	0x40010c00

08001040 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b096      	sub	sp, #88	@ 0x58
 8001044:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001046:	f000 fdab 	bl	8001ba0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800104a:	f000 fa1d 	bl	8001488 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800104e:	f000 fb1f 	bl	8001690 <MX_GPIO_Init>
  MX_ADC1_Init();
 8001052:	f000 fa69 	bl	8001528 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8001056:	f000 faf1 	bl	800163c <MX_USART1_UART_Init>
  MX_TIM2_Init();
 800105a:	f000 faa3 	bl	80015a4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  LCD_init();
 800105e:	f7ff ff72 	bl	8000f46 <LCD_init>

  char uartBuf[50];    // Bộ đệm để lưu dữ liệu gửi qua UART
     uint32_t adcValue = 0; // Luu gia tri doc tu ADC
 8001062:	2300      	movs	r3, #0
 8001064:	657b      	str	r3, [r7, #84]	@ 0x54
     float voltage = 0.0; // Luu gia tri dien ap
 8001066:	f04f 0300 	mov.w	r3, #0
 800106a:	653b      	str	r3, [r7, #80]	@ 0x50
     float temperature = 0.0; // Luu gia tri nhiet do
 800106c:	f04f 0300 	mov.w	r3, #0
 8001070:	64fb      	str	r3, [r7, #76]	@ 0x4c
     HAL_TIM_Base_Start_IT(&htim2); // Start tim2 va Mode ngat
 8001072:	48af      	ldr	r0, [pc, #700]	@ (8001330 <main+0x2f0>)
 8001074:	f002 fbcc 	bl	8003810 <HAL_TIM_Base_Start_IT>
     LCD_init(); //Khoi tao man hinh LCD
 8001078:	f7ff ff65 	bl	8000f46 <LCD_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (HAL_UART_Receive(&huart1, (uint8_t*)&rx_data, 1, 1000) == HAL_OK) {
 800107c:	f107 0117 	add.w	r1, r7, #23
 8001080:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001084:	2201      	movs	r2, #1
 8001086:	48ab      	ldr	r0, [pc, #684]	@ (8001334 <main+0x2f4>)
 8001088:	f003 f83f 	bl	800410a <HAL_UART_Receive>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d13f      	bne.n	8001112 <main+0xd2>
	     		if ( rx_data == '8') { // Start Giao dien
 8001092:	7dfb      	ldrb	r3, [r7, #23]
 8001094:	2b38      	cmp	r3, #56	@ 0x38
 8001096:	d103      	bne.n	80010a0 <main+0x60>
	     			a = 1;
 8001098:	4ba7      	ldr	r3, [pc, #668]	@ (8001338 <main+0x2f8>)
 800109a:	2201      	movs	r2, #1
 800109c:	601a      	str	r2, [r3, #0]
 800109e:	e038      	b.n	8001112 <main+0xd2>
	     		} else if ( rx_data == '9') { //Stop Giao dien
 80010a0:	7dfb      	ldrb	r3, [r7, #23]
 80010a2:	2b39      	cmp	r3, #57	@ 0x39
 80010a4:	d103      	bne.n	80010ae <main+0x6e>
	     			a = 0;
 80010a6:	4ba4      	ldr	r3, [pc, #656]	@ (8001338 <main+0x2f8>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	601a      	str	r2, [r3, #0]
 80010ac:	e031      	b.n	8001112 <main+0xd2>
	     		} else if ( rx_data == '0') {
 80010ae:	7dfb      	ldrb	r3, [r7, #23]
 80010b0:	2b30      	cmp	r3, #48	@ 0x30
 80010b2:	d10d      	bne.n	80010d0 <main+0x90>
	     			__HAL_TIM_SET_AUTORELOAD(&htim2,499);
 80010b4:	4b9e      	ldr	r3, [pc, #632]	@ (8001330 <main+0x2f0>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	f240 12f3 	movw	r2, #499	@ 0x1f3
 80010bc:	62da      	str	r2, [r3, #44]	@ 0x2c
 80010be:	4b9c      	ldr	r3, [pc, #624]	@ (8001330 <main+0x2f0>)
 80010c0:	f240 12f3 	movw	r2, #499	@ 0x1f3
 80010c4:	60da      	str	r2, [r3, #12]
	     			__HAL_TIM_SET_COUNTER(&htim2,0);
 80010c6:	4b9a      	ldr	r3, [pc, #616]	@ (8001330 <main+0x2f0>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	2200      	movs	r2, #0
 80010cc:	625a      	str	r2, [r3, #36]	@ 0x24
 80010ce:	e020      	b.n	8001112 <main+0xd2>
	     		} else if ( rx_data == '1') {
 80010d0:	7dfb      	ldrb	r3, [r7, #23]
 80010d2:	2b31      	cmp	r3, #49	@ 0x31
 80010d4:	d10d      	bne.n	80010f2 <main+0xb2>
	     			__HAL_TIM_SET_AUTORELOAD(&htim2,999);
 80010d6:	4b96      	ldr	r3, [pc, #600]	@ (8001330 <main+0x2f0>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80010de:	62da      	str	r2, [r3, #44]	@ 0x2c
 80010e0:	4b93      	ldr	r3, [pc, #588]	@ (8001330 <main+0x2f0>)
 80010e2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80010e6:	60da      	str	r2, [r3, #12]
	     			__HAL_TIM_SET_COUNTER(&htim2,0);
 80010e8:	4b91      	ldr	r3, [pc, #580]	@ (8001330 <main+0x2f0>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	2200      	movs	r2, #0
 80010ee:	625a      	str	r2, [r3, #36]	@ 0x24
 80010f0:	e00f      	b.n	8001112 <main+0xd2>
	     	} else if ( rx_data == '2') {
 80010f2:	7dfb      	ldrb	r3, [r7, #23]
 80010f4:	2b32      	cmp	r3, #50	@ 0x32
 80010f6:	d10c      	bne.n	8001112 <main+0xd2>
     			__HAL_TIM_SET_AUTORELOAD(&htim2,1999);
 80010f8:	4b8d      	ldr	r3, [pc, #564]	@ (8001330 <main+0x2f0>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 8001100:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001102:	4b8b      	ldr	r3, [pc, #556]	@ (8001330 <main+0x2f0>)
 8001104:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 8001108:	60da      	str	r2, [r3, #12]
     			__HAL_TIM_SET_COUNTER(&htim2,0);
 800110a:	4b89      	ldr	r3, [pc, #548]	@ (8001330 <main+0x2f0>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	2200      	movs	r2, #0
 8001110:	625a      	str	r2, [r3, #36]	@ 0x24
	     	}
	  }
	  if ( a == 1 || b == 4) { // Neu gia trị a==1 thi se thoai man dieu kien va kich hoạc trong ngoặc
 8001112:	4b89      	ldr	r3, [pc, #548]	@ (8001338 <main+0x2f8>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	2b01      	cmp	r3, #1
 8001118:	d004      	beq.n	8001124 <main+0xe4>
 800111a:	4b88      	ldr	r3, [pc, #544]	@ (800133c <main+0x2fc>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	2b04      	cmp	r3, #4
 8001120:	f040 8188 	bne.w	8001434 <main+0x3f4>
	  adcValue = Read_ADC_Value(); // doc giá trị ADC
 8001124:	f7ff ff3e 	bl	8000fa4 <Read_ADC_Value>
 8001128:	6578      	str	r0, [r7, #84]	@ 0x54
	        voltage = (adcValue * 3.3) / 4095.0; //Dien tu ADC
 800112a:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800112c:	f7ff fa0e 	bl	800054c <__aeabi_ui2d>
 8001130:	a37b      	add	r3, pc, #492	@ (adr r3, 8001320 <main+0x2e0>)
 8001132:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001136:	f7ff fa83 	bl	8000640 <__aeabi_dmul>
 800113a:	4602      	mov	r2, r0
 800113c:	460b      	mov	r3, r1
 800113e:	4610      	mov	r0, r2
 8001140:	4619      	mov	r1, r3
 8001142:	a379      	add	r3, pc, #484	@ (adr r3, 8001328 <main+0x2e8>)
 8001144:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001148:	f7ff fba4 	bl	8000894 <__aeabi_ddiv>
 800114c:	4602      	mov	r2, r0
 800114e:	460b      	mov	r3, r1
 8001150:	4610      	mov	r0, r2
 8001152:	4619      	mov	r1, r3
 8001154:	f7ff fd6c 	bl	8000c30 <__aeabi_d2f>
 8001158:	4603      	mov	r3, r0
 800115a:	653b      	str	r3, [r7, #80]	@ 0x50
	        temperature = voltage * 100;        //Nhiet do tu LM35
 800115c:	4978      	ldr	r1, [pc, #480]	@ (8001340 <main+0x300>)
 800115e:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8001160:	f7fe fffe 	bl	8000160 <__aeabi_fmul>
 8001164:	4603      	mov	r3, r0
 8001166:	64fb      	str	r3, [r7, #76]	@ 0x4c

	        sprintf(uartBuf, "%.2f\r\n", temperature);// dinh dang chuoi nhiet do de hien thi va gui qua UART
 8001168:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 800116a:	f7ff fa11 	bl	8000590 <__aeabi_f2d>
 800116e:	4602      	mov	r2, r0
 8001170:	460b      	mov	r3, r1
 8001172:	f107 0018 	add.w	r0, r7, #24
 8001176:	4973      	ldr	r1, [pc, #460]	@ (8001344 <main+0x304>)
 8001178:	f004 fcc6 	bl	8005b08 <siprintf>
	        HAL_UART_Transmit(&huart1, (uint8_t*)uartBuf, strlen(uartBuf),1000);//Gui chuoi qua UART1
 800117c:	f107 0318 	add.w	r3, r7, #24
 8001180:	4618      	mov	r0, r3
 8001182:	f7fe ffe5 	bl	8000150 <strlen>
 8001186:	4603      	mov	r3, r0
 8001188:	b29a      	uxth	r2, r3
 800118a:	f107 0118 	add.w	r1, r7, #24
 800118e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001192:	4868      	ldr	r0, [pc, #416]	@ (8001334 <main+0x2f4>)
 8001194:	f002 ff2e 	bl	8003ff4 <HAL_UART_Transmit>
	        //Dinh dang chuoi nhiet do cho LCD
	        char lcdBuf[16];
	        sprintf(lcdBuf, "Nhiet Do: %.2f", temperature);
 8001198:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 800119a:	f7ff f9f9 	bl	8000590 <__aeabi_f2d>
 800119e:	4602      	mov	r2, r0
 80011a0:	460b      	mov	r3, r1
 80011a2:	1d38      	adds	r0, r7, #4
 80011a4:	4968      	ldr	r1, [pc, #416]	@ (8001348 <main+0x308>)
 80011a6:	f004 fcaf 	bl	8005b08 <siprintf>
	        LCD_SetCursor(0, 0);
 80011aa:	2100      	movs	r1, #0
 80011ac:	2080      	movs	r0, #128	@ 0x80
 80011ae:	f7ff fe8d 	bl	8000ecc <LCD_Write_8bit>
	        LCD_Send_string(lcdBuf);
 80011b2:	1d3b      	adds	r3, r7, #4
 80011b4:	4618      	mov	r0, r3
 80011b6:	f7ff fea6 	bl	8000f06 <LCD_Send_string>
	        HAL_Delay(1000);
 80011ba:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80011be:	f000 fd51 	bl	8001c64 <HAL_Delay>
	        if (temperature > 16.0 && temperature < 32.0) { // < 20% (80°C * 0.2)
 80011c2:	f04f 4183 	mov.w	r1, #1098907648	@ 0x41800000
 80011c6:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80011c8:	f7ff fdee 	bl	8000da8 <__aeabi_fcmpgt>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d031      	beq.n	8001236 <main+0x1f6>
 80011d2:	f04f 4184 	mov.w	r1, #1107296256	@ 0x42000000
 80011d6:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80011d8:	f7ff fdc8 	bl	8000d6c <__aeabi_fcmplt>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d029      	beq.n	8001236 <main+0x1f6>
	            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);  // Chỉ PB9 sáng
 80011e2:	2201      	movs	r2, #1
 80011e4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80011e8:	4858      	ldr	r0, [pc, #352]	@ (800134c <main+0x30c>)
 80011ea:	f001 fcfb 	bl	8002be4 <HAL_GPIO_WritePin>
	            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 80011ee:	2200      	movs	r2, #0
 80011f0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80011f4:	4855      	ldr	r0, [pc, #340]	@ (800134c <main+0x30c>)
 80011f6:	f001 fcf5 	bl	8002be4 <HAL_GPIO_WritePin>
	            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);
 80011fa:	2200      	movs	r2, #0
 80011fc:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001200:	4852      	ldr	r0, [pc, #328]	@ (800134c <main+0x30c>)
 8001202:	f001 fcef 	bl	8002be4 <HAL_GPIO_WritePin>
	            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8001206:	2200      	movs	r2, #0
 8001208:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800120c:	484f      	ldr	r0, [pc, #316]	@ (800134c <main+0x30c>)
 800120e:	f001 fce9 	bl	8002be4 <HAL_GPIO_WritePin>
	            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 8001212:	2200      	movs	r2, #0
 8001214:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001218:	484c      	ldr	r0, [pc, #304]	@ (800134c <main+0x30c>)
 800121a:	f001 fce3 	bl	8002be4 <HAL_GPIO_WritePin>
	            LCD_clear();
 800121e:	2100      	movs	r1, #0
 8001220:	2001      	movs	r0, #1
 8001222:	f7ff fe53 	bl	8000ecc <LCD_Write_8bit>
	            LCD_SetCursor(0,0);
 8001226:	2100      	movs	r1, #0
 8001228:	2080      	movs	r0, #128	@ 0x80
 800122a:	f7ff fe4f 	bl	8000ecc <LCD_Write_8bit>
	            LCD_Send_string("Nhiet do tot");
 800122e:	4848      	ldr	r0, [pc, #288]	@ (8001350 <main+0x310>)
 8001230:	f7ff fe69 	bl	8000f06 <LCD_Send_string>
 8001234:	e0f9      	b.n	800142a <main+0x3ea>
	        } else if (temperature > 32.0 && temperature < 48.0 ) { // 20-40% (80°C * 0.4)
 8001236:	f04f 4184 	mov.w	r1, #1107296256	@ 0x42000000
 800123a:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 800123c:	f7ff fdb4 	bl	8000da8 <__aeabi_fcmpgt>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d030      	beq.n	80012a8 <main+0x268>
 8001246:	4943      	ldr	r1, [pc, #268]	@ (8001354 <main+0x314>)
 8001248:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 800124a:	f7ff fd8f 	bl	8000d6c <__aeabi_fcmplt>
 800124e:	4603      	mov	r3, r0
 8001250:	2b00      	cmp	r3, #0
 8001252:	d029      	beq.n	80012a8 <main+0x268>
	            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 8001254:	2201      	movs	r2, #1
 8001256:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800125a:	483c      	ldr	r0, [pc, #240]	@ (800134c <main+0x30c>)
 800125c:	f001 fcc2 	bl	8002be4 <HAL_GPIO_WritePin>
	            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET); // PB9, PB10 sáng
 8001260:	2201      	movs	r2, #1
 8001262:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001266:	4839      	ldr	r0, [pc, #228]	@ (800134c <main+0x30c>)
 8001268:	f001 fcbc 	bl	8002be4 <HAL_GPIO_WritePin>
	            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);
 800126c:	2200      	movs	r2, #0
 800126e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001272:	4836      	ldr	r0, [pc, #216]	@ (800134c <main+0x30c>)
 8001274:	f001 fcb6 	bl	8002be4 <HAL_GPIO_WritePin>
	            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8001278:	2200      	movs	r2, #0
 800127a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800127e:	4833      	ldr	r0, [pc, #204]	@ (800134c <main+0x30c>)
 8001280:	f001 fcb0 	bl	8002be4 <HAL_GPIO_WritePin>
	            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 8001284:	2200      	movs	r2, #0
 8001286:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800128a:	4830      	ldr	r0, [pc, #192]	@ (800134c <main+0x30c>)
 800128c:	f001 fcaa 	bl	8002be4 <HAL_GPIO_WritePin>
	            LCD_clear();
 8001290:	2100      	movs	r1, #0
 8001292:	2001      	movs	r0, #1
 8001294:	f7ff fe1a 	bl	8000ecc <LCD_Write_8bit>
	            LCD_SetCursor(0,0);
 8001298:	2100      	movs	r1, #0
 800129a:	2080      	movs	r0, #128	@ 0x80
 800129c:	f7ff fe16 	bl	8000ecc <LCD_Write_8bit>
	            LCD_Send_string("Nhiet do kha on");
 80012a0:	482d      	ldr	r0, [pc, #180]	@ (8001358 <main+0x318>)
 80012a2:	f7ff fe30 	bl	8000f06 <LCD_Send_string>
 80012a6:	e0c0      	b.n	800142a <main+0x3ea>
	        } else if (temperature > 48.0 && temperature < 64.0) { // 40-60% (80°C * 0.6)
 80012a8:	492a      	ldr	r1, [pc, #168]	@ (8001354 <main+0x314>)
 80012aa:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80012ac:	f7ff fd7c 	bl	8000da8 <__aeabi_fcmpgt>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d054      	beq.n	8001360 <main+0x320>
 80012b6:	f04f 4185 	mov.w	r1, #1115684864	@ 0x42800000
 80012ba:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80012bc:	f7ff fd56 	bl	8000d6c <__aeabi_fcmplt>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d04c      	beq.n	8001360 <main+0x320>
	            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 80012c6:	2201      	movs	r2, #1
 80012c8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80012cc:	481f      	ldr	r0, [pc, #124]	@ (800134c <main+0x30c>)
 80012ce:	f001 fc89 	bl	8002be4 <HAL_GPIO_WritePin>
	            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 80012d2:	2201      	movs	r2, #1
 80012d4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80012d8:	481c      	ldr	r0, [pc, #112]	@ (800134c <main+0x30c>)
 80012da:	f001 fc83 	bl	8002be4 <HAL_GPIO_WritePin>
	            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET); // PB9, PB10, PB11 sáng
 80012de:	2201      	movs	r2, #1
 80012e0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80012e4:	4819      	ldr	r0, [pc, #100]	@ (800134c <main+0x30c>)
 80012e6:	f001 fc7d 	bl	8002be4 <HAL_GPIO_WritePin>
	            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 80012ea:	2200      	movs	r2, #0
 80012ec:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80012f0:	4816      	ldr	r0, [pc, #88]	@ (800134c <main+0x30c>)
 80012f2:	f001 fc77 	bl	8002be4 <HAL_GPIO_WritePin>
	            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 80012f6:	2200      	movs	r2, #0
 80012f8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80012fc:	4813      	ldr	r0, [pc, #76]	@ (800134c <main+0x30c>)
 80012fe:	f001 fc71 	bl	8002be4 <HAL_GPIO_WritePin>
	            LCD_clear();
 8001302:	2100      	movs	r1, #0
 8001304:	2001      	movs	r0, #1
 8001306:	f7ff fde1 	bl	8000ecc <LCD_Write_8bit>
	            LCD_SetCursor(0,0);
 800130a:	2100      	movs	r1, #0
 800130c:	2080      	movs	r0, #128	@ 0x80
 800130e:	f7ff fddd 	bl	8000ecc <LCD_Write_8bit>
	            LCD_Send_string("Nhiet do bat on");
 8001312:	4812      	ldr	r0, [pc, #72]	@ (800135c <main+0x31c>)
 8001314:	f7ff fdf7 	bl	8000f06 <LCD_Send_string>
 8001318:	e087      	b.n	800142a <main+0x3ea>
 800131a:	bf00      	nop
 800131c:	f3af 8000 	nop.w
 8001320:	66666666 	.word	0x66666666
 8001324:	400a6666 	.word	0x400a6666
 8001328:	00000000 	.word	0x00000000
 800132c:	40affe00 	.word	0x40affe00
 8001330:	20000228 	.word	0x20000228
 8001334:	20000270 	.word	0x20000270
 8001338:	20000000 	.word	0x20000000
 800133c:	20000004 	.word	0x20000004
 8001340:	42c80000 	.word	0x42c80000
 8001344:	08009380 	.word	0x08009380
 8001348:	08009388 	.word	0x08009388
 800134c:	40010c00 	.word	0x40010c00
 8001350:	08009398 	.word	0x08009398
 8001354:	42400000 	.word	0x42400000
 8001358:	080093a8 	.word	0x080093a8
 800135c:	080093b8 	.word	0x080093b8
	        } else if (temperature > 64.0 && temperature < 80.0) { // 60-80% (80°C * 0.8)
 8001360:	f04f 4185 	mov.w	r1, #1115684864	@ 0x42800000
 8001364:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8001366:	f7ff fd1f 	bl	8000da8 <__aeabi_fcmpgt>
 800136a:	4603      	mov	r3, r0
 800136c:	2b00      	cmp	r3, #0
 800136e:	d030      	beq.n	80013d2 <main+0x392>
 8001370:	493e      	ldr	r1, [pc, #248]	@ (800146c <main+0x42c>)
 8001372:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8001374:	f7ff fcfa 	bl	8000d6c <__aeabi_fcmplt>
 8001378:	4603      	mov	r3, r0
 800137a:	2b00      	cmp	r3, #0
 800137c:	d029      	beq.n	80013d2 <main+0x392>
	            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 800137e:	2201      	movs	r2, #1
 8001380:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001384:	483a      	ldr	r0, [pc, #232]	@ (8001470 <main+0x430>)
 8001386:	f001 fc2d 	bl	8002be4 <HAL_GPIO_WritePin>
	            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 800138a:	2201      	movs	r2, #1
 800138c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001390:	4837      	ldr	r0, [pc, #220]	@ (8001470 <main+0x430>)
 8001392:	f001 fc27 	bl	8002be4 <HAL_GPIO_WritePin>
	            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 8001396:	2201      	movs	r2, #1
 8001398:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800139c:	4834      	ldr	r0, [pc, #208]	@ (8001470 <main+0x430>)
 800139e:	f001 fc21 	bl	8002be4 <HAL_GPIO_WritePin>
	            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 80013a2:	2201      	movs	r2, #1
 80013a4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80013a8:	4831      	ldr	r0, [pc, #196]	@ (8001470 <main+0x430>)
 80013aa:	f001 fc1b 	bl	8002be4 <HAL_GPIO_WritePin>
	            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);// Tất cả PB9-PB12 sáng
 80013ae:	2200      	movs	r2, #0
 80013b0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80013b4:	482e      	ldr	r0, [pc, #184]	@ (8001470 <main+0x430>)
 80013b6:	f001 fc15 	bl	8002be4 <HAL_GPIO_WritePin>
	            LCD_clear();
 80013ba:	2100      	movs	r1, #0
 80013bc:	2001      	movs	r0, #1
 80013be:	f7ff fd85 	bl	8000ecc <LCD_Write_8bit>
	            LCD_SetCursor(0,0);
 80013c2:	2100      	movs	r1, #0
 80013c4:	2080      	movs	r0, #128	@ 0x80
 80013c6:	f7ff fd81 	bl	8000ecc <LCD_Write_8bit>
	            LCD_Send_string("Nhiet do qua muc");
 80013ca:	482a      	ldr	r0, [pc, #168]	@ (8001474 <main+0x434>)
 80013cc:	f7ff fd9b 	bl	8000f06 <LCD_Send_string>
 80013d0:	e02b      	b.n	800142a <main+0x3ea>
	        } else if (temperature > 80.0) {
 80013d2:	4926      	ldr	r1, [pc, #152]	@ (800146c <main+0x42c>)
 80013d4:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80013d6:	f7ff fce7 	bl	8000da8 <__aeabi_fcmpgt>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d024      	beq.n	800142a <main+0x3ea>
	            HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_9); // Tất cả đèn nhấp nháy
 80013e0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80013e4:	4822      	ldr	r0, [pc, #136]	@ (8001470 <main+0x430>)
 80013e6:	f001 fc15 	bl	8002c14 <HAL_GPIO_TogglePin>
	            HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_10);
 80013ea:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80013ee:	4820      	ldr	r0, [pc, #128]	@ (8001470 <main+0x430>)
 80013f0:	f001 fc10 	bl	8002c14 <HAL_GPIO_TogglePin>
	            HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_11);
 80013f4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80013f8:	481d      	ldr	r0, [pc, #116]	@ (8001470 <main+0x430>)
 80013fa:	f001 fc0b 	bl	8002c14 <HAL_GPIO_TogglePin>
	            HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_12);
 80013fe:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001402:	481b      	ldr	r0, [pc, #108]	@ (8001470 <main+0x430>)
 8001404:	f001 fc06 	bl	8002c14 <HAL_GPIO_TogglePin>
	            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
 8001408:	2201      	movs	r2, #1
 800140a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800140e:	4818      	ldr	r0, [pc, #96]	@ (8001470 <main+0x430>)
 8001410:	f001 fbe8 	bl	8002be4 <HAL_GPIO_WritePin>
	            LCD_clear();
 8001414:	2100      	movs	r1, #0
 8001416:	2001      	movs	r0, #1
 8001418:	f7ff fd58 	bl	8000ecc <LCD_Write_8bit>
	            LCD_SetCursor(0,0);
 800141c:	2100      	movs	r1, #0
 800141e:	2080      	movs	r0, #128	@ 0x80
 8001420:	f7ff fd54 	bl	8000ecc <LCD_Write_8bit>
	            LCD_Send_string("Qua Nhietttt!!");
 8001424:	4814      	ldr	r0, [pc, #80]	@ (8001478 <main+0x438>)
 8001426:	f7ff fd6e 	bl	8000f06 <LCD_Send_string>
	        }

	        HAL_Delay(500); // Chu kỳ đc ADC
 800142a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800142e:	f000 fc19 	bl	8001c64 <HAL_Delay>
	  if ( a == 1 || b == 4) { // Neu gia trị a==1 thi se thoai man dieu kien va kich hoạc trong ngoặc
 8001432:	e016      	b.n	8001462 <main+0x422>
} else if ( a == 0 || b == 5) {
 8001434:	4b11      	ldr	r3, [pc, #68]	@ (800147c <main+0x43c>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	2b00      	cmp	r3, #0
 800143a:	d003      	beq.n	8001444 <main+0x404>
 800143c:	4b10      	ldr	r3, [pc, #64]	@ (8001480 <main+0x440>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	2b05      	cmp	r3, #5
 8001442:	d10e      	bne.n	8001462 <main+0x422>
	LCD_clear();//xoa man LCD
 8001444:	2100      	movs	r1, #0
 8001446:	2001      	movs	r0, #1
 8001448:	f7ff fd40 	bl	8000ecc <LCD_Write_8bit>
	LCD_SetCursor(0,0);
 800144c:	2100      	movs	r1, #0
 800144e:	2080      	movs	r0, #128	@ 0x80
 8001450:	f7ff fd3c 	bl	8000ecc <LCD_Write_8bit>
    LCD_Send_string("Stop system");
 8001454:	480b      	ldr	r0, [pc, #44]	@ (8001484 <main+0x444>)
 8001456:	f7ff fd56 	bl	8000f06 <LCD_Send_string>
    HAL_Delay(500);
 800145a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800145e:	f000 fc01 	bl	8001c64 <HAL_Delay>
}
HAL_Delay(500); // Chu kỳ đc ADC
 8001462:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001466:	f000 fbfd 	bl	8001c64 <HAL_Delay>
	  if (HAL_UART_Receive(&huart1, (uint8_t*)&rx_data, 1, 1000) == HAL_OK) {
 800146a:	e607      	b.n	800107c <main+0x3c>
 800146c:	42a00000 	.word	0x42a00000
 8001470:	40010c00 	.word	0x40010c00
 8001474:	080093c8 	.word	0x080093c8
 8001478:	080093dc 	.word	0x080093dc
 800147c:	20000000 	.word	0x20000000
 8001480:	20000004 	.word	0x20000004
 8001484:	080093ec 	.word	0x080093ec

08001488 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b094      	sub	sp, #80	@ 0x50
 800148c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800148e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001492:	2228      	movs	r2, #40	@ 0x28
 8001494:	2100      	movs	r1, #0
 8001496:	4618      	mov	r0, r3
 8001498:	f004 fb99 	bl	8005bce <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800149c:	f107 0314 	add.w	r3, r7, #20
 80014a0:	2200      	movs	r2, #0
 80014a2:	601a      	str	r2, [r3, #0]
 80014a4:	605a      	str	r2, [r3, #4]
 80014a6:	609a      	str	r2, [r3, #8]
 80014a8:	60da      	str	r2, [r3, #12]
 80014aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80014ac:	1d3b      	adds	r3, r7, #4
 80014ae:	2200      	movs	r2, #0
 80014b0:	601a      	str	r2, [r3, #0]
 80014b2:	605a      	str	r2, [r3, #4]
 80014b4:	609a      	str	r2, [r3, #8]
 80014b6:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80014b8:	2302      	movs	r3, #2
 80014ba:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014bc:	2301      	movs	r3, #1
 80014be:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80014c0:	2310      	movs	r3, #16
 80014c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80014c4:	2300      	movs	r3, #0
 80014c6:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014c8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80014cc:	4618      	mov	r0, r3
 80014ce:	f001 fbd3 	bl	8002c78 <HAL_RCC_OscConfig>
 80014d2:	4603      	mov	r3, r0
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d001      	beq.n	80014dc <SystemClock_Config+0x54>
  {
    Error_Handler();
 80014d8:	f000 f93a 	bl	8001750 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014dc:	230f      	movs	r3, #15
 80014de:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80014e0:	2300      	movs	r3, #0
 80014e2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014e4:	2300      	movs	r3, #0
 80014e6:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80014e8:	2300      	movs	r3, #0
 80014ea:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014ec:	2300      	movs	r3, #0
 80014ee:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80014f0:	f107 0314 	add.w	r3, r7, #20
 80014f4:	2100      	movs	r1, #0
 80014f6:	4618      	mov	r0, r3
 80014f8:	f001 fe40 	bl	800317c <HAL_RCC_ClockConfig>
 80014fc:	4603      	mov	r3, r0
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d001      	beq.n	8001506 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8001502:	f000 f925 	bl	8001750 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001506:	2302      	movs	r3, #2
 8001508:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 800150a:	2300      	movs	r3, #0
 800150c:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800150e:	1d3b      	adds	r3, r7, #4
 8001510:	4618      	mov	r0, r3
 8001512:	f001 ffc1 	bl	8003498 <HAL_RCCEx_PeriphCLKConfig>
 8001516:	4603      	mov	r3, r0
 8001518:	2b00      	cmp	r3, #0
 800151a:	d001      	beq.n	8001520 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800151c:	f000 f918 	bl	8001750 <Error_Handler>
  }
}
 8001520:	bf00      	nop
 8001522:	3750      	adds	r7, #80	@ 0x50
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}

08001528 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b084      	sub	sp, #16
 800152c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800152e:	1d3b      	adds	r3, r7, #4
 8001530:	2200      	movs	r2, #0
 8001532:	601a      	str	r2, [r3, #0]
 8001534:	605a      	str	r2, [r3, #4]
 8001536:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001538:	4b18      	ldr	r3, [pc, #96]	@ (800159c <MX_ADC1_Init+0x74>)
 800153a:	4a19      	ldr	r2, [pc, #100]	@ (80015a0 <MX_ADC1_Init+0x78>)
 800153c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800153e:	4b17      	ldr	r3, [pc, #92]	@ (800159c <MX_ADC1_Init+0x74>)
 8001540:	2200      	movs	r2, #0
 8001542:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001544:	4b15      	ldr	r3, [pc, #84]	@ (800159c <MX_ADC1_Init+0x74>)
 8001546:	2201      	movs	r2, #1
 8001548:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800154a:	4b14      	ldr	r3, [pc, #80]	@ (800159c <MX_ADC1_Init+0x74>)
 800154c:	2200      	movs	r2, #0
 800154e:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001550:	4b12      	ldr	r3, [pc, #72]	@ (800159c <MX_ADC1_Init+0x74>)
 8001552:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8001556:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001558:	4b10      	ldr	r3, [pc, #64]	@ (800159c <MX_ADC1_Init+0x74>)
 800155a:	2200      	movs	r2, #0
 800155c:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800155e:	4b0f      	ldr	r3, [pc, #60]	@ (800159c <MX_ADC1_Init+0x74>)
 8001560:	2201      	movs	r2, #1
 8001562:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001564:	480d      	ldr	r0, [pc, #52]	@ (800159c <MX_ADC1_Init+0x74>)
 8001566:	f000 fba1 	bl	8001cac <HAL_ADC_Init>
 800156a:	4603      	mov	r3, r0
 800156c:	2b00      	cmp	r3, #0
 800156e:	d001      	beq.n	8001574 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8001570:	f000 f8ee 	bl	8001750 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001574:	2300      	movs	r3, #0
 8001576:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001578:	2301      	movs	r3, #1
 800157a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800157c:	2300      	movs	r3, #0
 800157e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001580:	1d3b      	adds	r3, r7, #4
 8001582:	4619      	mov	r1, r3
 8001584:	4805      	ldr	r0, [pc, #20]	@ (800159c <MX_ADC1_Init+0x74>)
 8001586:	f000 fe55 	bl	8002234 <HAL_ADC_ConfigChannel>
 800158a:	4603      	mov	r3, r0
 800158c:	2b00      	cmp	r3, #0
 800158e:	d001      	beq.n	8001594 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8001590:	f000 f8de 	bl	8001750 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001594:	bf00      	nop
 8001596:	3710      	adds	r7, #16
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}
 800159c:	200001f8 	.word	0x200001f8
 80015a0:	40012400 	.word	0x40012400

080015a4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b086      	sub	sp, #24
 80015a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015aa:	f107 0308 	add.w	r3, r7, #8
 80015ae:	2200      	movs	r2, #0
 80015b0:	601a      	str	r2, [r3, #0]
 80015b2:	605a      	str	r2, [r3, #4]
 80015b4:	609a      	str	r2, [r3, #8]
 80015b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015b8:	463b      	mov	r3, r7
 80015ba:	2200      	movs	r2, #0
 80015bc:	601a      	str	r2, [r3, #0]
 80015be:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80015c0:	4b1d      	ldr	r3, [pc, #116]	@ (8001638 <MX_TIM2_Init+0x94>)
 80015c2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80015c6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8000;
 80015c8:	4b1b      	ldr	r3, [pc, #108]	@ (8001638 <MX_TIM2_Init+0x94>)
 80015ca:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 80015ce:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015d0:	4b19      	ldr	r3, [pc, #100]	@ (8001638 <MX_TIM2_Init+0x94>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0;
 80015d6:	4b18      	ldr	r3, [pc, #96]	@ (8001638 <MX_TIM2_Init+0x94>)
 80015d8:	2200      	movs	r2, #0
 80015da:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015dc:	4b16      	ldr	r3, [pc, #88]	@ (8001638 <MX_TIM2_Init+0x94>)
 80015de:	2200      	movs	r2, #0
 80015e0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80015e2:	4b15      	ldr	r3, [pc, #84]	@ (8001638 <MX_TIM2_Init+0x94>)
 80015e4:	2280      	movs	r2, #128	@ 0x80
 80015e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80015e8:	4813      	ldr	r0, [pc, #76]	@ (8001638 <MX_TIM2_Init+0x94>)
 80015ea:	f002 f8c1 	bl	8003770 <HAL_TIM_Base_Init>
 80015ee:	4603      	mov	r3, r0
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d001      	beq.n	80015f8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80015f4:	f000 f8ac 	bl	8001750 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015f8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80015fc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80015fe:	f107 0308 	add.w	r3, r7, #8
 8001602:	4619      	mov	r1, r3
 8001604:	480c      	ldr	r0, [pc, #48]	@ (8001638 <MX_TIM2_Init+0x94>)
 8001606:	f002 fa45 	bl	8003a94 <HAL_TIM_ConfigClockSource>
 800160a:	4603      	mov	r3, r0
 800160c:	2b00      	cmp	r3, #0
 800160e:	d001      	beq.n	8001614 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001610:	f000 f89e 	bl	8001750 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001614:	2300      	movs	r3, #0
 8001616:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001618:	2300      	movs	r3, #0
 800161a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800161c:	463b      	mov	r3, r7
 800161e:	4619      	mov	r1, r3
 8001620:	4805      	ldr	r0, [pc, #20]	@ (8001638 <MX_TIM2_Init+0x94>)
 8001622:	f002 fc27 	bl	8003e74 <HAL_TIMEx_MasterConfigSynchronization>
 8001626:	4603      	mov	r3, r0
 8001628:	2b00      	cmp	r3, #0
 800162a:	d001      	beq.n	8001630 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800162c:	f000 f890 	bl	8001750 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001630:	bf00      	nop
 8001632:	3718      	adds	r7, #24
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}
 8001638:	20000228 	.word	0x20000228

0800163c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001640:	4b11      	ldr	r3, [pc, #68]	@ (8001688 <MX_USART1_UART_Init+0x4c>)
 8001642:	4a12      	ldr	r2, [pc, #72]	@ (800168c <MX_USART1_UART_Init+0x50>)
 8001644:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001646:	4b10      	ldr	r3, [pc, #64]	@ (8001688 <MX_USART1_UART_Init+0x4c>)
 8001648:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 800164c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800164e:	4b0e      	ldr	r3, [pc, #56]	@ (8001688 <MX_USART1_UART_Init+0x4c>)
 8001650:	2200      	movs	r2, #0
 8001652:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001654:	4b0c      	ldr	r3, [pc, #48]	@ (8001688 <MX_USART1_UART_Init+0x4c>)
 8001656:	2200      	movs	r2, #0
 8001658:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800165a:	4b0b      	ldr	r3, [pc, #44]	@ (8001688 <MX_USART1_UART_Init+0x4c>)
 800165c:	2200      	movs	r2, #0
 800165e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001660:	4b09      	ldr	r3, [pc, #36]	@ (8001688 <MX_USART1_UART_Init+0x4c>)
 8001662:	220c      	movs	r2, #12
 8001664:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001666:	4b08      	ldr	r3, [pc, #32]	@ (8001688 <MX_USART1_UART_Init+0x4c>)
 8001668:	2200      	movs	r2, #0
 800166a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800166c:	4b06      	ldr	r3, [pc, #24]	@ (8001688 <MX_USART1_UART_Init+0x4c>)
 800166e:	2200      	movs	r2, #0
 8001670:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001672:	4805      	ldr	r0, [pc, #20]	@ (8001688 <MX_USART1_UART_Init+0x4c>)
 8001674:	f002 fc6e 	bl	8003f54 <HAL_UART_Init>
 8001678:	4603      	mov	r3, r0
 800167a:	2b00      	cmp	r3, #0
 800167c:	d001      	beq.n	8001682 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800167e:	f000 f867 	bl	8001750 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001682:	bf00      	nop
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	20000270 	.word	0x20000270
 800168c:	40013800 	.word	0x40013800

08001690 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b086      	sub	sp, #24
 8001694:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001696:	f107 0308 	add.w	r3, r7, #8
 800169a:	2200      	movs	r2, #0
 800169c:	601a      	str	r2, [r3, #0]
 800169e:	605a      	str	r2, [r3, #4]
 80016a0:	609a      	str	r2, [r3, #8]
 80016a2:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016a4:	4b26      	ldr	r3, [pc, #152]	@ (8001740 <MX_GPIO_Init+0xb0>)
 80016a6:	699b      	ldr	r3, [r3, #24]
 80016a8:	4a25      	ldr	r2, [pc, #148]	@ (8001740 <MX_GPIO_Init+0xb0>)
 80016aa:	f043 0304 	orr.w	r3, r3, #4
 80016ae:	6193      	str	r3, [r2, #24]
 80016b0:	4b23      	ldr	r3, [pc, #140]	@ (8001740 <MX_GPIO_Init+0xb0>)
 80016b2:	699b      	ldr	r3, [r3, #24]
 80016b4:	f003 0304 	and.w	r3, r3, #4
 80016b8:	607b      	str	r3, [r7, #4]
 80016ba:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016bc:	4b20      	ldr	r3, [pc, #128]	@ (8001740 <MX_GPIO_Init+0xb0>)
 80016be:	699b      	ldr	r3, [r3, #24]
 80016c0:	4a1f      	ldr	r2, [pc, #124]	@ (8001740 <MX_GPIO_Init+0xb0>)
 80016c2:	f043 0308 	orr.w	r3, r3, #8
 80016c6:	6193      	str	r3, [r2, #24]
 80016c8:	4b1d      	ldr	r3, [pc, #116]	@ (8001740 <MX_GPIO_Init+0xb0>)
 80016ca:	699b      	ldr	r3, [r3, #24]
 80016cc:	f003 0308 	and.w	r3, r3, #8
 80016d0:	603b      	str	r3, [r7, #0]
 80016d2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D7_Pin|D6_Pin|D5_Pin|GPIO_PIN_10
 80016d4:	2200      	movs	r2, #0
 80016d6:	f64b 613f 	movw	r1, #48703	@ 0xbe3f
 80016da:	481a      	ldr	r0, [pc, #104]	@ (8001744 <MX_GPIO_Init+0xb4>)
 80016dc:	f001 fa82 	bl	8002be4 <HAL_GPIO_WritePin>
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15
                          |D4_Pin|E_Pin_Pin|RS_Pin_Pin|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pins : PA1 PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 80016e0:	2306      	movs	r3, #6
 80016e2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80016e4:	4b18      	ldr	r3, [pc, #96]	@ (8001748 <MX_GPIO_Init+0xb8>)
 80016e6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e8:	2300      	movs	r3, #0
 80016ea:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016ec:	f107 0308 	add.w	r3, r7, #8
 80016f0:	4619      	mov	r1, r3
 80016f2:	4816      	ldr	r0, [pc, #88]	@ (800174c <MX_GPIO_Init+0xbc>)
 80016f4:	f001 f8f2 	bl	80028dc <HAL_GPIO_Init>

  /*Configure GPIO pins : D7_Pin D6_Pin D5_Pin PB10
                           PB11 PB12 PB13 PB15
                           D4_Pin E_Pin_Pin RS_Pin_Pin PB9 */
  GPIO_InitStruct.Pin = D7_Pin|D6_Pin|D5_Pin|GPIO_PIN_10
 80016f8:	f64b 633f 	movw	r3, #48703	@ 0xbe3f
 80016fc:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15
                          |D4_Pin|E_Pin_Pin|RS_Pin_Pin|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016fe:	2301      	movs	r3, #1
 8001700:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001702:	2300      	movs	r3, #0
 8001704:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001706:	2302      	movs	r3, #2
 8001708:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800170a:	f107 0308 	add.w	r3, r7, #8
 800170e:	4619      	mov	r1, r3
 8001710:	480c      	ldr	r0, [pc, #48]	@ (8001744 <MX_GPIO_Init+0xb4>)
 8001712:	f001 f8e3 	bl	80028dc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001716:	2200      	movs	r2, #0
 8001718:	2100      	movs	r1, #0
 800171a:	2007      	movs	r0, #7
 800171c:	f000 fff5 	bl	800270a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001720:	2007      	movs	r0, #7
 8001722:	f001 f80e 	bl	8002742 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8001726:	2200      	movs	r2, #0
 8001728:	2100      	movs	r1, #0
 800172a:	2008      	movs	r0, #8
 800172c:	f000 ffed 	bl	800270a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001730:	2008      	movs	r0, #8
 8001732:	f001 f806 	bl	8002742 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001736:	bf00      	nop
 8001738:	3718      	adds	r7, #24
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	40021000 	.word	0x40021000
 8001744:	40010c00 	.word	0x40010c00
 8001748:	10110000 	.word	0x10110000
 800174c:	40010800 	.word	0x40010800

08001750 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001750:	b480      	push	{r7}
 8001752:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001754:	b672      	cpsid	i
}
 8001756:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001758:	bf00      	nop
 800175a:	e7fd      	b.n	8001758 <Error_Handler+0x8>

0800175c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800175c:	b480      	push	{r7}
 800175e:	b085      	sub	sp, #20
 8001760:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001762:	4b15      	ldr	r3, [pc, #84]	@ (80017b8 <HAL_MspInit+0x5c>)
 8001764:	699b      	ldr	r3, [r3, #24]
 8001766:	4a14      	ldr	r2, [pc, #80]	@ (80017b8 <HAL_MspInit+0x5c>)
 8001768:	f043 0301 	orr.w	r3, r3, #1
 800176c:	6193      	str	r3, [r2, #24]
 800176e:	4b12      	ldr	r3, [pc, #72]	@ (80017b8 <HAL_MspInit+0x5c>)
 8001770:	699b      	ldr	r3, [r3, #24]
 8001772:	f003 0301 	and.w	r3, r3, #1
 8001776:	60bb      	str	r3, [r7, #8]
 8001778:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800177a:	4b0f      	ldr	r3, [pc, #60]	@ (80017b8 <HAL_MspInit+0x5c>)
 800177c:	69db      	ldr	r3, [r3, #28]
 800177e:	4a0e      	ldr	r2, [pc, #56]	@ (80017b8 <HAL_MspInit+0x5c>)
 8001780:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001784:	61d3      	str	r3, [r2, #28]
 8001786:	4b0c      	ldr	r3, [pc, #48]	@ (80017b8 <HAL_MspInit+0x5c>)
 8001788:	69db      	ldr	r3, [r3, #28]
 800178a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800178e:	607b      	str	r3, [r7, #4]
 8001790:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8001792:	4b0a      	ldr	r3, [pc, #40]	@ (80017bc <HAL_MspInit+0x60>)
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	60fb      	str	r3, [r7, #12]
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800179e:	60fb      	str	r3, [r7, #12]
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80017a6:	60fb      	str	r3, [r7, #12]
 80017a8:	4a04      	ldr	r2, [pc, #16]	@ (80017bc <HAL_MspInit+0x60>)
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017ae:	bf00      	nop
 80017b0:	3714      	adds	r7, #20
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bc80      	pop	{r7}
 80017b6:	4770      	bx	lr
 80017b8:	40021000 	.word	0x40021000
 80017bc:	40010000 	.word	0x40010000

080017c0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b088      	sub	sp, #32
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017c8:	f107 0310 	add.w	r3, r7, #16
 80017cc:	2200      	movs	r2, #0
 80017ce:	601a      	str	r2, [r3, #0]
 80017d0:	605a      	str	r2, [r3, #4]
 80017d2:	609a      	str	r2, [r3, #8]
 80017d4:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	4a14      	ldr	r2, [pc, #80]	@ (800182c <HAL_ADC_MspInit+0x6c>)
 80017dc:	4293      	cmp	r3, r2
 80017de:	d121      	bne.n	8001824 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80017e0:	4b13      	ldr	r3, [pc, #76]	@ (8001830 <HAL_ADC_MspInit+0x70>)
 80017e2:	699b      	ldr	r3, [r3, #24]
 80017e4:	4a12      	ldr	r2, [pc, #72]	@ (8001830 <HAL_ADC_MspInit+0x70>)
 80017e6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80017ea:	6193      	str	r3, [r2, #24]
 80017ec:	4b10      	ldr	r3, [pc, #64]	@ (8001830 <HAL_ADC_MspInit+0x70>)
 80017ee:	699b      	ldr	r3, [r3, #24]
 80017f0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80017f4:	60fb      	str	r3, [r7, #12]
 80017f6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017f8:	4b0d      	ldr	r3, [pc, #52]	@ (8001830 <HAL_ADC_MspInit+0x70>)
 80017fa:	699b      	ldr	r3, [r3, #24]
 80017fc:	4a0c      	ldr	r2, [pc, #48]	@ (8001830 <HAL_ADC_MspInit+0x70>)
 80017fe:	f043 0304 	orr.w	r3, r3, #4
 8001802:	6193      	str	r3, [r2, #24]
 8001804:	4b0a      	ldr	r3, [pc, #40]	@ (8001830 <HAL_ADC_MspInit+0x70>)
 8001806:	699b      	ldr	r3, [r3, #24]
 8001808:	f003 0304 	and.w	r3, r3, #4
 800180c:	60bb      	str	r3, [r7, #8]
 800180e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001810:	2301      	movs	r3, #1
 8001812:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001814:	2303      	movs	r3, #3
 8001816:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001818:	f107 0310 	add.w	r3, r7, #16
 800181c:	4619      	mov	r1, r3
 800181e:	4805      	ldr	r0, [pc, #20]	@ (8001834 <HAL_ADC_MspInit+0x74>)
 8001820:	f001 f85c 	bl	80028dc <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001824:	bf00      	nop
 8001826:	3720      	adds	r7, #32
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}
 800182c:	40012400 	.word	0x40012400
 8001830:	40021000 	.word	0x40021000
 8001834:	40010800 	.word	0x40010800

08001838 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b084      	sub	sp, #16
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001848:	d113      	bne.n	8001872 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800184a:	4b0c      	ldr	r3, [pc, #48]	@ (800187c <HAL_TIM_Base_MspInit+0x44>)
 800184c:	69db      	ldr	r3, [r3, #28]
 800184e:	4a0b      	ldr	r2, [pc, #44]	@ (800187c <HAL_TIM_Base_MspInit+0x44>)
 8001850:	f043 0301 	orr.w	r3, r3, #1
 8001854:	61d3      	str	r3, [r2, #28]
 8001856:	4b09      	ldr	r3, [pc, #36]	@ (800187c <HAL_TIM_Base_MspInit+0x44>)
 8001858:	69db      	ldr	r3, [r3, #28]
 800185a:	f003 0301 	and.w	r3, r3, #1
 800185e:	60fb      	str	r3, [r7, #12]
 8001860:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001862:	2200      	movs	r2, #0
 8001864:	2100      	movs	r1, #0
 8001866:	201c      	movs	r0, #28
 8001868:	f000 ff4f 	bl	800270a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800186c:	201c      	movs	r0, #28
 800186e:	f000 ff68 	bl	8002742 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8001872:	bf00      	nop
 8001874:	3710      	adds	r7, #16
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	40021000 	.word	0x40021000

08001880 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b088      	sub	sp, #32
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001888:	f107 0310 	add.w	r3, r7, #16
 800188c:	2200      	movs	r2, #0
 800188e:	601a      	str	r2, [r3, #0]
 8001890:	605a      	str	r2, [r3, #4]
 8001892:	609a      	str	r2, [r3, #8]
 8001894:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4a20      	ldr	r2, [pc, #128]	@ (800191c <HAL_UART_MspInit+0x9c>)
 800189c:	4293      	cmp	r3, r2
 800189e:	d139      	bne.n	8001914 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80018a0:	4b1f      	ldr	r3, [pc, #124]	@ (8001920 <HAL_UART_MspInit+0xa0>)
 80018a2:	699b      	ldr	r3, [r3, #24]
 80018a4:	4a1e      	ldr	r2, [pc, #120]	@ (8001920 <HAL_UART_MspInit+0xa0>)
 80018a6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80018aa:	6193      	str	r3, [r2, #24]
 80018ac:	4b1c      	ldr	r3, [pc, #112]	@ (8001920 <HAL_UART_MspInit+0xa0>)
 80018ae:	699b      	ldr	r3, [r3, #24]
 80018b0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80018b4:	60fb      	str	r3, [r7, #12]
 80018b6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018b8:	4b19      	ldr	r3, [pc, #100]	@ (8001920 <HAL_UART_MspInit+0xa0>)
 80018ba:	699b      	ldr	r3, [r3, #24]
 80018bc:	4a18      	ldr	r2, [pc, #96]	@ (8001920 <HAL_UART_MspInit+0xa0>)
 80018be:	f043 0304 	orr.w	r3, r3, #4
 80018c2:	6193      	str	r3, [r2, #24]
 80018c4:	4b16      	ldr	r3, [pc, #88]	@ (8001920 <HAL_UART_MspInit+0xa0>)
 80018c6:	699b      	ldr	r3, [r3, #24]
 80018c8:	f003 0304 	and.w	r3, r3, #4
 80018cc:	60bb      	str	r3, [r7, #8]
 80018ce:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80018d0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80018d4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018d6:	2302      	movs	r3, #2
 80018d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80018da:	2303      	movs	r3, #3
 80018dc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018de:	f107 0310 	add.w	r3, r7, #16
 80018e2:	4619      	mov	r1, r3
 80018e4:	480f      	ldr	r0, [pc, #60]	@ (8001924 <HAL_UART_MspInit+0xa4>)
 80018e6:	f000 fff9 	bl	80028dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80018ea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80018ee:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018f0:	2300      	movs	r3, #0
 80018f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f4:	2300      	movs	r3, #0
 80018f6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018f8:	f107 0310 	add.w	r3, r7, #16
 80018fc:	4619      	mov	r1, r3
 80018fe:	4809      	ldr	r0, [pc, #36]	@ (8001924 <HAL_UART_MspInit+0xa4>)
 8001900:	f000 ffec 	bl	80028dc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001904:	2200      	movs	r2, #0
 8001906:	2100      	movs	r1, #0
 8001908:	2025      	movs	r0, #37	@ 0x25
 800190a:	f000 fefe 	bl	800270a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800190e:	2025      	movs	r0, #37	@ 0x25
 8001910:	f000 ff17 	bl	8002742 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8001914:	bf00      	nop
 8001916:	3720      	adds	r7, #32
 8001918:	46bd      	mov	sp, r7
 800191a:	bd80      	pop	{r7, pc}
 800191c:	40013800 	.word	0x40013800
 8001920:	40021000 	.word	0x40021000
 8001924:	40010800 	.word	0x40010800

08001928 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001928:	b480      	push	{r7}
 800192a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800192c:	bf00      	nop
 800192e:	e7fd      	b.n	800192c <NMI_Handler+0x4>

08001930 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001930:	b480      	push	{r7}
 8001932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001934:	bf00      	nop
 8001936:	e7fd      	b.n	8001934 <HardFault_Handler+0x4>

08001938 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001938:	b480      	push	{r7}
 800193a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800193c:	bf00      	nop
 800193e:	e7fd      	b.n	800193c <MemManage_Handler+0x4>

08001940 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001940:	b480      	push	{r7}
 8001942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001944:	bf00      	nop
 8001946:	e7fd      	b.n	8001944 <BusFault_Handler+0x4>

08001948 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001948:	b480      	push	{r7}
 800194a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800194c:	bf00      	nop
 800194e:	e7fd      	b.n	800194c <UsageFault_Handler+0x4>

08001950 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001950:	b480      	push	{r7}
 8001952:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001954:	bf00      	nop
 8001956:	46bd      	mov	sp, r7
 8001958:	bc80      	pop	{r7}
 800195a:	4770      	bx	lr

0800195c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800195c:	b480      	push	{r7}
 800195e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001960:	bf00      	nop
 8001962:	46bd      	mov	sp, r7
 8001964:	bc80      	pop	{r7}
 8001966:	4770      	bx	lr

08001968 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001968:	b480      	push	{r7}
 800196a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800196c:	bf00      	nop
 800196e:	46bd      	mov	sp, r7
 8001970:	bc80      	pop	{r7}
 8001972:	4770      	bx	lr

08001974 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001978:	f000 f958 	bl	8001c2c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800197c:	bf00      	nop
 800197e:	bd80      	pop	{r7, pc}

08001980 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8001984:	2002      	movs	r0, #2
 8001986:	f001 f95f 	bl	8002c48 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800198a:	bf00      	nop
 800198c:	bd80      	pop	{r7, pc}

0800198e <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 800198e:	b580      	push	{r7, lr}
 8001990:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8001992:	2004      	movs	r0, #4
 8001994:	f001 f958 	bl	8002c48 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8001998:	bf00      	nop
 800199a:	bd80      	pop	{r7, pc}

0800199c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80019a0:	4802      	ldr	r0, [pc, #8]	@ (80019ac <TIM2_IRQHandler+0x10>)
 80019a2:	f001 ff87 	bl	80038b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80019a6:	bf00      	nop
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	20000228 	.word	0x20000228

080019b0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80019b4:	4802      	ldr	r0, [pc, #8]	@ (80019c0 <USART1_IRQHandler+0x10>)
 80019b6:	f002 fc3f 	bl	8004238 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80019ba:	bf00      	nop
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	20000270 	.word	0x20000270

080019c4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80019c4:	b480      	push	{r7}
 80019c6:	af00      	add	r7, sp, #0
  return 1;
 80019c8:	2301      	movs	r3, #1
}
 80019ca:	4618      	mov	r0, r3
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bc80      	pop	{r7}
 80019d0:	4770      	bx	lr

080019d2 <_kill>:

int _kill(int pid, int sig)
{
 80019d2:	b580      	push	{r7, lr}
 80019d4:	b082      	sub	sp, #8
 80019d6:	af00      	add	r7, sp, #0
 80019d8:	6078      	str	r0, [r7, #4]
 80019da:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80019dc:	f004 f94a 	bl	8005c74 <__errno>
 80019e0:	4603      	mov	r3, r0
 80019e2:	2216      	movs	r2, #22
 80019e4:	601a      	str	r2, [r3, #0]
  return -1;
 80019e6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019ea:	4618      	mov	r0, r3
 80019ec:	3708      	adds	r7, #8
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}

080019f2 <_exit>:

void _exit (int status)
{
 80019f2:	b580      	push	{r7, lr}
 80019f4:	b082      	sub	sp, #8
 80019f6:	af00      	add	r7, sp, #0
 80019f8:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80019fa:	f04f 31ff 	mov.w	r1, #4294967295
 80019fe:	6878      	ldr	r0, [r7, #4]
 8001a00:	f7ff ffe7 	bl	80019d2 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001a04:	bf00      	nop
 8001a06:	e7fd      	b.n	8001a04 <_exit+0x12>

08001a08 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b086      	sub	sp, #24
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	60f8      	str	r0, [r7, #12]
 8001a10:	60b9      	str	r1, [r7, #8]
 8001a12:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a14:	2300      	movs	r3, #0
 8001a16:	617b      	str	r3, [r7, #20]
 8001a18:	e00a      	b.n	8001a30 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001a1a:	f3af 8000 	nop.w
 8001a1e:	4601      	mov	r1, r0
 8001a20:	68bb      	ldr	r3, [r7, #8]
 8001a22:	1c5a      	adds	r2, r3, #1
 8001a24:	60ba      	str	r2, [r7, #8]
 8001a26:	b2ca      	uxtb	r2, r1
 8001a28:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a2a:	697b      	ldr	r3, [r7, #20]
 8001a2c:	3301      	adds	r3, #1
 8001a2e:	617b      	str	r3, [r7, #20]
 8001a30:	697a      	ldr	r2, [r7, #20]
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	429a      	cmp	r2, r3
 8001a36:	dbf0      	blt.n	8001a1a <_read+0x12>
  }

  return len;
 8001a38:	687b      	ldr	r3, [r7, #4]
}
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	3718      	adds	r7, #24
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}

08001a42 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a42:	b580      	push	{r7, lr}
 8001a44:	b086      	sub	sp, #24
 8001a46:	af00      	add	r7, sp, #0
 8001a48:	60f8      	str	r0, [r7, #12]
 8001a4a:	60b9      	str	r1, [r7, #8]
 8001a4c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a4e:	2300      	movs	r3, #0
 8001a50:	617b      	str	r3, [r7, #20]
 8001a52:	e009      	b.n	8001a68 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001a54:	68bb      	ldr	r3, [r7, #8]
 8001a56:	1c5a      	adds	r2, r3, #1
 8001a58:	60ba      	str	r2, [r7, #8]
 8001a5a:	781b      	ldrb	r3, [r3, #0]
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a62:	697b      	ldr	r3, [r7, #20]
 8001a64:	3301      	adds	r3, #1
 8001a66:	617b      	str	r3, [r7, #20]
 8001a68:	697a      	ldr	r2, [r7, #20]
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	429a      	cmp	r2, r3
 8001a6e:	dbf1      	blt.n	8001a54 <_write+0x12>
  }
  return len;
 8001a70:	687b      	ldr	r3, [r7, #4]
}
 8001a72:	4618      	mov	r0, r3
 8001a74:	3718      	adds	r7, #24
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}

08001a7a <_close>:

int _close(int file)
{
 8001a7a:	b480      	push	{r7}
 8001a7c:	b083      	sub	sp, #12
 8001a7e:	af00      	add	r7, sp, #0
 8001a80:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001a82:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a86:	4618      	mov	r0, r3
 8001a88:	370c      	adds	r7, #12
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bc80      	pop	{r7}
 8001a8e:	4770      	bx	lr

08001a90 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a90:	b480      	push	{r7}
 8001a92:	b083      	sub	sp, #12
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
 8001a98:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001aa0:	605a      	str	r2, [r3, #4]
  return 0;
 8001aa2:	2300      	movs	r3, #0
}
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	370c      	adds	r7, #12
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bc80      	pop	{r7}
 8001aac:	4770      	bx	lr

08001aae <_isatty>:

int _isatty(int file)
{
 8001aae:	b480      	push	{r7}
 8001ab0:	b083      	sub	sp, #12
 8001ab2:	af00      	add	r7, sp, #0
 8001ab4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001ab6:	2301      	movs	r3, #1
}
 8001ab8:	4618      	mov	r0, r3
 8001aba:	370c      	adds	r7, #12
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bc80      	pop	{r7}
 8001ac0:	4770      	bx	lr

08001ac2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ac2:	b480      	push	{r7}
 8001ac4:	b085      	sub	sp, #20
 8001ac6:	af00      	add	r7, sp, #0
 8001ac8:	60f8      	str	r0, [r7, #12]
 8001aca:	60b9      	str	r1, [r7, #8]
 8001acc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001ace:	2300      	movs	r3, #0
}
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	3714      	adds	r7, #20
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bc80      	pop	{r7}
 8001ad8:	4770      	bx	lr
	...

08001adc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b086      	sub	sp, #24
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ae4:	4a14      	ldr	r2, [pc, #80]	@ (8001b38 <_sbrk+0x5c>)
 8001ae6:	4b15      	ldr	r3, [pc, #84]	@ (8001b3c <_sbrk+0x60>)
 8001ae8:	1ad3      	subs	r3, r2, r3
 8001aea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001aec:	697b      	ldr	r3, [r7, #20]
 8001aee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001af0:	4b13      	ldr	r3, [pc, #76]	@ (8001b40 <_sbrk+0x64>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d102      	bne.n	8001afe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001af8:	4b11      	ldr	r3, [pc, #68]	@ (8001b40 <_sbrk+0x64>)
 8001afa:	4a12      	ldr	r2, [pc, #72]	@ (8001b44 <_sbrk+0x68>)
 8001afc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001afe:	4b10      	ldr	r3, [pc, #64]	@ (8001b40 <_sbrk+0x64>)
 8001b00:	681a      	ldr	r2, [r3, #0]
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	4413      	add	r3, r2
 8001b06:	693a      	ldr	r2, [r7, #16]
 8001b08:	429a      	cmp	r2, r3
 8001b0a:	d207      	bcs.n	8001b1c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b0c:	f004 f8b2 	bl	8005c74 <__errno>
 8001b10:	4603      	mov	r3, r0
 8001b12:	220c      	movs	r2, #12
 8001b14:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b16:	f04f 33ff 	mov.w	r3, #4294967295
 8001b1a:	e009      	b.n	8001b30 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b1c:	4b08      	ldr	r3, [pc, #32]	@ (8001b40 <_sbrk+0x64>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b22:	4b07      	ldr	r3, [pc, #28]	@ (8001b40 <_sbrk+0x64>)
 8001b24:	681a      	ldr	r2, [r3, #0]
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	4413      	add	r3, r2
 8001b2a:	4a05      	ldr	r2, [pc, #20]	@ (8001b40 <_sbrk+0x64>)
 8001b2c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b2e:	68fb      	ldr	r3, [r7, #12]
}
 8001b30:	4618      	mov	r0, r3
 8001b32:	3718      	adds	r7, #24
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bd80      	pop	{r7, pc}
 8001b38:	20005000 	.word	0x20005000
 8001b3c:	00000400 	.word	0x00000400
 8001b40:	200002b8 	.word	0x200002b8
 8001b44:	20000410 	.word	0x20000410

08001b48 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b4c:	bf00      	nop
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bc80      	pop	{r7}
 8001b52:	4770      	bx	lr

08001b54 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001b54:	f7ff fff8 	bl	8001b48 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b58:	480b      	ldr	r0, [pc, #44]	@ (8001b88 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001b5a:	490c      	ldr	r1, [pc, #48]	@ (8001b8c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001b5c:	4a0c      	ldr	r2, [pc, #48]	@ (8001b90 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001b5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b60:	e002      	b.n	8001b68 <LoopCopyDataInit>

08001b62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b66:	3304      	adds	r3, #4

08001b68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b6c:	d3f9      	bcc.n	8001b62 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b6e:	4a09      	ldr	r2, [pc, #36]	@ (8001b94 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001b70:	4c09      	ldr	r4, [pc, #36]	@ (8001b98 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001b72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b74:	e001      	b.n	8001b7a <LoopFillZerobss>

08001b76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b78:	3204      	adds	r2, #4

08001b7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b7c:	d3fb      	bcc.n	8001b76 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b7e:	f004 f87f 	bl	8005c80 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001b82:	f7ff fa5d 	bl	8001040 <main>
  bx lr
 8001b86:	4770      	bx	lr
  ldr r0, =_sdata
 8001b88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b8c:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001b90:	08009878 	.word	0x08009878
  ldr r2, =_sbss
 8001b94:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8001b98:	2000040c 	.word	0x2000040c

08001b9c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001b9c:	e7fe      	b.n	8001b9c <ADC1_2_IRQHandler>
	...

08001ba0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ba4:	4b08      	ldr	r3, [pc, #32]	@ (8001bc8 <HAL_Init+0x28>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4a07      	ldr	r2, [pc, #28]	@ (8001bc8 <HAL_Init+0x28>)
 8001baa:	f043 0310 	orr.w	r3, r3, #16
 8001bae:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bb0:	2003      	movs	r0, #3
 8001bb2:	f000 fd9f 	bl	80026f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001bb6:	200f      	movs	r0, #15
 8001bb8:	f000 f808 	bl	8001bcc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001bbc:	f7ff fdce 	bl	800175c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001bc0:	2300      	movs	r3, #0
}
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	bd80      	pop	{r7, pc}
 8001bc6:	bf00      	nop
 8001bc8:	40022000 	.word	0x40022000

08001bcc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b082      	sub	sp, #8
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001bd4:	4b12      	ldr	r3, [pc, #72]	@ (8001c20 <HAL_InitTick+0x54>)
 8001bd6:	681a      	ldr	r2, [r3, #0]
 8001bd8:	4b12      	ldr	r3, [pc, #72]	@ (8001c24 <HAL_InitTick+0x58>)
 8001bda:	781b      	ldrb	r3, [r3, #0]
 8001bdc:	4619      	mov	r1, r3
 8001bde:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001be2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001be6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bea:	4618      	mov	r0, r3
 8001bec:	f000 fdb7 	bl	800275e <HAL_SYSTICK_Config>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d001      	beq.n	8001bfa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	e00e      	b.n	8001c18 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	2b0f      	cmp	r3, #15
 8001bfe:	d80a      	bhi.n	8001c16 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c00:	2200      	movs	r2, #0
 8001c02:	6879      	ldr	r1, [r7, #4]
 8001c04:	f04f 30ff 	mov.w	r0, #4294967295
 8001c08:	f000 fd7f 	bl	800270a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c0c:	4a06      	ldr	r2, [pc, #24]	@ (8001c28 <HAL_InitTick+0x5c>)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c12:	2300      	movs	r3, #0
 8001c14:	e000      	b.n	8001c18 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c16:	2301      	movs	r3, #1
}
 8001c18:	4618      	mov	r0, r3
 8001c1a:	3708      	adds	r7, #8
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}
 8001c20:	20000008 	.word	0x20000008
 8001c24:	20000010 	.word	0x20000010
 8001c28:	2000000c 	.word	0x2000000c

08001c2c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c30:	4b05      	ldr	r3, [pc, #20]	@ (8001c48 <HAL_IncTick+0x1c>)
 8001c32:	781b      	ldrb	r3, [r3, #0]
 8001c34:	461a      	mov	r2, r3
 8001c36:	4b05      	ldr	r3, [pc, #20]	@ (8001c4c <HAL_IncTick+0x20>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4413      	add	r3, r2
 8001c3c:	4a03      	ldr	r2, [pc, #12]	@ (8001c4c <HAL_IncTick+0x20>)
 8001c3e:	6013      	str	r3, [r2, #0]
}
 8001c40:	bf00      	nop
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bc80      	pop	{r7}
 8001c46:	4770      	bx	lr
 8001c48:	20000010 	.word	0x20000010
 8001c4c:	200002bc 	.word	0x200002bc

08001c50 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c50:	b480      	push	{r7}
 8001c52:	af00      	add	r7, sp, #0
  return uwTick;
 8001c54:	4b02      	ldr	r3, [pc, #8]	@ (8001c60 <HAL_GetTick+0x10>)
 8001c56:	681b      	ldr	r3, [r3, #0]
}
 8001c58:	4618      	mov	r0, r3
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bc80      	pop	{r7}
 8001c5e:	4770      	bx	lr
 8001c60:	200002bc 	.word	0x200002bc

08001c64 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b084      	sub	sp, #16
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c6c:	f7ff fff0 	bl	8001c50 <HAL_GetTick>
 8001c70:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c7c:	d005      	beq.n	8001c8a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c7e:	4b0a      	ldr	r3, [pc, #40]	@ (8001ca8 <HAL_Delay+0x44>)
 8001c80:	781b      	ldrb	r3, [r3, #0]
 8001c82:	461a      	mov	r2, r3
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	4413      	add	r3, r2
 8001c88:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c8a:	bf00      	nop
 8001c8c:	f7ff ffe0 	bl	8001c50 <HAL_GetTick>
 8001c90:	4602      	mov	r2, r0
 8001c92:	68bb      	ldr	r3, [r7, #8]
 8001c94:	1ad3      	subs	r3, r2, r3
 8001c96:	68fa      	ldr	r2, [r7, #12]
 8001c98:	429a      	cmp	r2, r3
 8001c9a:	d8f7      	bhi.n	8001c8c <HAL_Delay+0x28>
  {
  }
}
 8001c9c:	bf00      	nop
 8001c9e:	bf00      	nop
 8001ca0:	3710      	adds	r7, #16
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}
 8001ca6:	bf00      	nop
 8001ca8:	20000010 	.word	0x20000010

08001cac <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b086      	sub	sp, #24
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d101      	bne.n	8001cce <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	e0be      	b.n	8001e4c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	689b      	ldr	r3, [r3, #8]
 8001cd2:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d109      	bne.n	8001cf0 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2200      	movs	r2, #0
 8001ce0:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001cea:	6878      	ldr	r0, [r7, #4]
 8001cec:	f7ff fd68 	bl	80017c0 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001cf0:	6878      	ldr	r0, [r7, #4]
 8001cf2:	f000 fbf1 	bl	80024d8 <ADC_ConversionStop_Disable>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cfe:	f003 0310 	and.w	r3, r3, #16
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	f040 8099 	bne.w	8001e3a <HAL_ADC_Init+0x18e>
 8001d08:	7dfb      	ldrb	r3, [r7, #23]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	f040 8095 	bne.w	8001e3a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d14:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001d18:	f023 0302 	bic.w	r3, r3, #2
 8001d1c:	f043 0202 	orr.w	r2, r3, #2
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001d2c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	7b1b      	ldrb	r3, [r3, #12]
 8001d32:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001d34:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001d36:	68ba      	ldr	r2, [r7, #8]
 8001d38:	4313      	orrs	r3, r2
 8001d3a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	689b      	ldr	r3, [r3, #8]
 8001d40:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001d44:	d003      	beq.n	8001d4e <HAL_ADC_Init+0xa2>
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	689b      	ldr	r3, [r3, #8]
 8001d4a:	2b01      	cmp	r3, #1
 8001d4c:	d102      	bne.n	8001d54 <HAL_ADC_Init+0xa8>
 8001d4e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001d52:	e000      	b.n	8001d56 <HAL_ADC_Init+0xaa>
 8001d54:	2300      	movs	r3, #0
 8001d56:	693a      	ldr	r2, [r7, #16]
 8001d58:	4313      	orrs	r3, r2
 8001d5a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	7d1b      	ldrb	r3, [r3, #20]
 8001d60:	2b01      	cmp	r3, #1
 8001d62:	d119      	bne.n	8001d98 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	7b1b      	ldrb	r3, [r3, #12]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d109      	bne.n	8001d80 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	699b      	ldr	r3, [r3, #24]
 8001d70:	3b01      	subs	r3, #1
 8001d72:	035a      	lsls	r2, r3, #13
 8001d74:	693b      	ldr	r3, [r7, #16]
 8001d76:	4313      	orrs	r3, r2
 8001d78:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001d7c:	613b      	str	r3, [r7, #16]
 8001d7e:	e00b      	b.n	8001d98 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d84:	f043 0220 	orr.w	r2, r3, #32
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d90:	f043 0201 	orr.w	r2, r3, #1
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	685b      	ldr	r3, [r3, #4]
 8001d9e:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	693a      	ldr	r2, [r7, #16]
 8001da8:	430a      	orrs	r2, r1
 8001daa:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	689a      	ldr	r2, [r3, #8]
 8001db2:	4b28      	ldr	r3, [pc, #160]	@ (8001e54 <HAL_ADC_Init+0x1a8>)
 8001db4:	4013      	ands	r3, r2
 8001db6:	687a      	ldr	r2, [r7, #4]
 8001db8:	6812      	ldr	r2, [r2, #0]
 8001dba:	68b9      	ldr	r1, [r7, #8]
 8001dbc:	430b      	orrs	r3, r1
 8001dbe:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	689b      	ldr	r3, [r3, #8]
 8001dc4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001dc8:	d003      	beq.n	8001dd2 <HAL_ADC_Init+0x126>
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	689b      	ldr	r3, [r3, #8]
 8001dce:	2b01      	cmp	r3, #1
 8001dd0:	d104      	bne.n	8001ddc <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	691b      	ldr	r3, [r3, #16]
 8001dd6:	3b01      	subs	r3, #1
 8001dd8:	051b      	lsls	r3, r3, #20
 8001dda:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001de2:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	68fa      	ldr	r2, [r7, #12]
 8001dec:	430a      	orrs	r2, r1
 8001dee:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	689a      	ldr	r2, [r3, #8]
 8001df6:	4b18      	ldr	r3, [pc, #96]	@ (8001e58 <HAL_ADC_Init+0x1ac>)
 8001df8:	4013      	ands	r3, r2
 8001dfa:	68ba      	ldr	r2, [r7, #8]
 8001dfc:	429a      	cmp	r2, r3
 8001dfe:	d10b      	bne.n	8001e18 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2200      	movs	r2, #0
 8001e04:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e0a:	f023 0303 	bic.w	r3, r3, #3
 8001e0e:	f043 0201 	orr.w	r2, r3, #1
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001e16:	e018      	b.n	8001e4a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e1c:	f023 0312 	bic.w	r3, r3, #18
 8001e20:	f043 0210 	orr.w	r2, r3, #16
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e2c:	f043 0201 	orr.w	r2, r3, #1
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001e34:	2301      	movs	r3, #1
 8001e36:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001e38:	e007      	b.n	8001e4a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e3e:	f043 0210 	orr.w	r2, r3, #16
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001e46:	2301      	movs	r3, #1
 8001e48:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001e4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	3718      	adds	r7, #24
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bd80      	pop	{r7, pc}
 8001e54:	ffe1f7fd 	.word	0xffe1f7fd
 8001e58:	ff1f0efe 	.word	0xff1f0efe

08001e5c <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b084      	sub	sp, #16
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e64:	2300      	movs	r3, #0
 8001e66:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001e6e:	2b01      	cmp	r3, #1
 8001e70:	d101      	bne.n	8001e76 <HAL_ADC_Start+0x1a>
 8001e72:	2302      	movs	r3, #2
 8001e74:	e098      	b.n	8001fa8 <HAL_ADC_Start+0x14c>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2201      	movs	r2, #1
 8001e7a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8001e7e:	6878      	ldr	r0, [r7, #4]
 8001e80:	f000 fad0 	bl	8002424 <ADC_Enable>
 8001e84:	4603      	mov	r3, r0
 8001e86:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001e88:	7bfb      	ldrb	r3, [r7, #15]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	f040 8087 	bne.w	8001f9e <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e94:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001e98:	f023 0301 	bic.w	r3, r3, #1
 8001e9c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4a41      	ldr	r2, [pc, #260]	@ (8001fb0 <HAL_ADC_Start+0x154>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d105      	bne.n	8001eba <HAL_ADC_Start+0x5e>
 8001eae:	4b41      	ldr	r3, [pc, #260]	@ (8001fb4 <HAL_ADC_Start+0x158>)
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d115      	bne.n	8001ee6 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ebe:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d026      	beq.n	8001f22 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ed8:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001edc:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001ee4:	e01d      	b.n	8001f22 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001eea:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4a2f      	ldr	r2, [pc, #188]	@ (8001fb4 <HAL_ADC_Start+0x158>)
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	d004      	beq.n	8001f06 <HAL_ADC_Start+0xaa>
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a2b      	ldr	r2, [pc, #172]	@ (8001fb0 <HAL_ADC_Start+0x154>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d10d      	bne.n	8001f22 <HAL_ADC_Start+0xc6>
 8001f06:	4b2b      	ldr	r3, [pc, #172]	@ (8001fb4 <HAL_ADC_Start+0x158>)
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d007      	beq.n	8001f22 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f16:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001f1a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f26:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d006      	beq.n	8001f3c <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f32:	f023 0206 	bic.w	r2, r3, #6
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001f3a:	e002      	b.n	8001f42 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2200      	movs	r2, #0
 8001f40:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	2200      	movs	r2, #0
 8001f46:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f06f 0202 	mvn.w	r2, #2
 8001f52:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	689b      	ldr	r3, [r3, #8]
 8001f5a:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001f5e:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001f62:	d113      	bne.n	8001f8c <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001f68:	4a11      	ldr	r2, [pc, #68]	@ (8001fb0 <HAL_ADC_Start+0x154>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d105      	bne.n	8001f7a <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001f6e:	4b11      	ldr	r3, [pc, #68]	@ (8001fb4 <HAL_ADC_Start+0x158>)
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d108      	bne.n	8001f8c <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	689a      	ldr	r2, [r3, #8]
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8001f88:	609a      	str	r2, [r3, #8]
 8001f8a:	e00c      	b.n	8001fa6 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	689a      	ldr	r2, [r3, #8]
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8001f9a:	609a      	str	r2, [r3, #8]
 8001f9c:	e003      	b.n	8001fa6 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8001fa6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fa8:	4618      	mov	r0, r3
 8001faa:	3710      	adds	r7, #16
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd80      	pop	{r7, pc}
 8001fb0:	40012800 	.word	0x40012800
 8001fb4:	40012400 	.word	0x40012400

08001fb8 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b084      	sub	sp, #16
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001fca:	2b01      	cmp	r3, #1
 8001fcc:	d101      	bne.n	8001fd2 <HAL_ADC_Stop+0x1a>
 8001fce:	2302      	movs	r3, #2
 8001fd0:	e01a      	b.n	8002008 <HAL_ADC_Stop+0x50>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2201      	movs	r2, #1
 8001fd6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001fda:	6878      	ldr	r0, [r7, #4]
 8001fdc:	f000 fa7c 	bl	80024d8 <ADC_ConversionStop_Disable>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8001fe4:	7bfb      	ldrb	r3, [r7, #15]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d109      	bne.n	8001ffe <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fee:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001ff2:	f023 0301 	bic.w	r3, r3, #1
 8001ff6:	f043 0201 	orr.w	r2, r3, #1
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2200      	movs	r2, #0
 8002002:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002006:	7bfb      	ldrb	r3, [r7, #15]
}
 8002008:	4618      	mov	r0, r3
 800200a:	3710      	adds	r7, #16
 800200c:	46bd      	mov	sp, r7
 800200e:	bd80      	pop	{r7, pc}

08002010 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002010:	b590      	push	{r4, r7, lr}
 8002012:	b087      	sub	sp, #28
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
 8002018:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800201a:	2300      	movs	r3, #0
 800201c:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 800201e:	2300      	movs	r3, #0
 8002020:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8002022:	2300      	movs	r3, #0
 8002024:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8002026:	f7ff fe13 	bl	8001c50 <HAL_GetTick>
 800202a:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	689b      	ldr	r3, [r3, #8]
 8002032:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002036:	2b00      	cmp	r3, #0
 8002038:	d00b      	beq.n	8002052 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800203e:	f043 0220 	orr.w	r2, r3, #32
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2200      	movs	r2, #0
 800204a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    return HAL_ERROR;
 800204e:	2301      	movs	r3, #1
 8002050:	e0d3      	b.n	80021fa <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800205c:	2b00      	cmp	r3, #0
 800205e:	d131      	bne.n	80020c4 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002066:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800206a:	2b00      	cmp	r3, #0
 800206c:	d12a      	bne.n	80020c4 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800206e:	e021      	b.n	80020b4 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002076:	d01d      	beq.n	80020b4 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d007      	beq.n	800208e <HAL_ADC_PollForConversion+0x7e>
 800207e:	f7ff fde7 	bl	8001c50 <HAL_GetTick>
 8002082:	4602      	mov	r2, r0
 8002084:	697b      	ldr	r3, [r7, #20]
 8002086:	1ad3      	subs	r3, r2, r3
 8002088:	683a      	ldr	r2, [r7, #0]
 800208a:	429a      	cmp	r2, r3
 800208c:	d212      	bcs.n	80020b4 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f003 0302 	and.w	r3, r3, #2
 8002098:	2b00      	cmp	r3, #0
 800209a:	d10b      	bne.n	80020b4 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020a0:	f043 0204 	orr.w	r2, r3, #4
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	629a      	str	r2, [r3, #40]	@ 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2200      	movs	r2, #0
 80020ac:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            
            return HAL_TIMEOUT;
 80020b0:	2303      	movs	r3, #3
 80020b2:	e0a2      	b.n	80021fa <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f003 0302 	and.w	r3, r3, #2
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d0d6      	beq.n	8002070 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80020c2:	e070      	b.n	80021a6 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80020c4:	4b4f      	ldr	r3, [pc, #316]	@ (8002204 <HAL_ADC_PollForConversion+0x1f4>)
 80020c6:	681c      	ldr	r4, [r3, #0]
 80020c8:	2002      	movs	r0, #2
 80020ca:	f001 fa9b 	bl	8003604 <HAL_RCCEx_GetPeriphCLKFreq>
 80020ce:	4603      	mov	r3, r0
 80020d0:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	6919      	ldr	r1, [r3, #16]
 80020da:	4b4b      	ldr	r3, [pc, #300]	@ (8002208 <HAL_ADC_PollForConversion+0x1f8>)
 80020dc:	400b      	ands	r3, r1
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d118      	bne.n	8002114 <HAL_ADC_PollForConversion+0x104>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	68d9      	ldr	r1, [r3, #12]
 80020e8:	4b48      	ldr	r3, [pc, #288]	@ (800220c <HAL_ADC_PollForConversion+0x1fc>)
 80020ea:	400b      	ands	r3, r1
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d111      	bne.n	8002114 <HAL_ADC_PollForConversion+0x104>
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	6919      	ldr	r1, [r3, #16]
 80020f6:	4b46      	ldr	r3, [pc, #280]	@ (8002210 <HAL_ADC_PollForConversion+0x200>)
 80020f8:	400b      	ands	r3, r1
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d108      	bne.n	8002110 <HAL_ADC_PollForConversion+0x100>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	68d9      	ldr	r1, [r3, #12]
 8002104:	4b43      	ldr	r3, [pc, #268]	@ (8002214 <HAL_ADC_PollForConversion+0x204>)
 8002106:	400b      	ands	r3, r1
 8002108:	2b00      	cmp	r3, #0
 800210a:	d101      	bne.n	8002110 <HAL_ADC_PollForConversion+0x100>
 800210c:	2314      	movs	r3, #20
 800210e:	e020      	b.n	8002152 <HAL_ADC_PollForConversion+0x142>
 8002110:	2329      	movs	r3, #41	@ 0x29
 8002112:	e01e      	b.n	8002152 <HAL_ADC_PollForConversion+0x142>
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	6919      	ldr	r1, [r3, #16]
 800211a:	4b3d      	ldr	r3, [pc, #244]	@ (8002210 <HAL_ADC_PollForConversion+0x200>)
 800211c:	400b      	ands	r3, r1
 800211e:	2b00      	cmp	r3, #0
 8002120:	d106      	bne.n	8002130 <HAL_ADC_PollForConversion+0x120>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	68d9      	ldr	r1, [r3, #12]
 8002128:	4b3a      	ldr	r3, [pc, #232]	@ (8002214 <HAL_ADC_PollForConversion+0x204>)
 800212a:	400b      	ands	r3, r1
 800212c:	2b00      	cmp	r3, #0
 800212e:	d00d      	beq.n	800214c <HAL_ADC_PollForConversion+0x13c>
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	6919      	ldr	r1, [r3, #16]
 8002136:	4b38      	ldr	r3, [pc, #224]	@ (8002218 <HAL_ADC_PollForConversion+0x208>)
 8002138:	400b      	ands	r3, r1
 800213a:	2b00      	cmp	r3, #0
 800213c:	d108      	bne.n	8002150 <HAL_ADC_PollForConversion+0x140>
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	68d9      	ldr	r1, [r3, #12]
 8002144:	4b34      	ldr	r3, [pc, #208]	@ (8002218 <HAL_ADC_PollForConversion+0x208>)
 8002146:	400b      	ands	r3, r1
 8002148:	2b00      	cmp	r3, #0
 800214a:	d101      	bne.n	8002150 <HAL_ADC_PollForConversion+0x140>
 800214c:	2354      	movs	r3, #84	@ 0x54
 800214e:	e000      	b.n	8002152 <HAL_ADC_PollForConversion+0x142>
 8002150:	23fc      	movs	r3, #252	@ 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8002152:	fb02 f303 	mul.w	r3, r2, r3
 8002156:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002158:	e021      	b.n	800219e <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002160:	d01a      	beq.n	8002198 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d007      	beq.n	8002178 <HAL_ADC_PollForConversion+0x168>
 8002168:	f7ff fd72 	bl	8001c50 <HAL_GetTick>
 800216c:	4602      	mov	r2, r0
 800216e:	697b      	ldr	r3, [r7, #20]
 8002170:	1ad3      	subs	r3, r2, r3
 8002172:	683a      	ldr	r2, [r7, #0]
 8002174:	429a      	cmp	r2, r3
 8002176:	d20f      	bcs.n	8002198 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	693a      	ldr	r2, [r7, #16]
 800217c:	429a      	cmp	r2, r3
 800217e:	d90b      	bls.n	8002198 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002184:	f043 0204 	orr.w	r2, r3, #4
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	629a      	str	r2, [r3, #40]	@ 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2200      	movs	r2, #0
 8002190:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

            return HAL_TIMEOUT;
 8002194:	2303      	movs	r3, #3
 8002196:	e030      	b.n	80021fa <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	3301      	adds	r3, #1
 800219c:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	693a      	ldr	r2, [r7, #16]
 80021a2:	429a      	cmp	r2, r3
 80021a4:	d8d9      	bhi.n	800215a <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f06f 0212 	mvn.w	r2, #18
 80021ae:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021b4:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	689b      	ldr	r3, [r3, #8]
 80021c2:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80021c6:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80021ca:	d115      	bne.n	80021f8 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d111      	bne.n	80021f8 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021d8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	629a      	str	r2, [r3, #40]	@ 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021e4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d105      	bne.n	80021f8 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021f0:	f043 0201 	orr.w	r2, r3, #1
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80021f8:	2300      	movs	r3, #0
}
 80021fa:	4618      	mov	r0, r3
 80021fc:	371c      	adds	r7, #28
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd90      	pop	{r4, r7, pc}
 8002202:	bf00      	nop
 8002204:	20000008 	.word	0x20000008
 8002208:	24924924 	.word	0x24924924
 800220c:	00924924 	.word	0x00924924
 8002210:	12492492 	.word	0x12492492
 8002214:	00492492 	.word	0x00492492
 8002218:	00249249 	.word	0x00249249

0800221c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 800221c:	b480      	push	{r7}
 800221e:	b083      	sub	sp, #12
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 800222a:	4618      	mov	r0, r3
 800222c:	370c      	adds	r7, #12
 800222e:	46bd      	mov	sp, r7
 8002230:	bc80      	pop	{r7}
 8002232:	4770      	bx	lr

08002234 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002234:	b480      	push	{r7}
 8002236:	b085      	sub	sp, #20
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
 800223c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800223e:	2300      	movs	r3, #0
 8002240:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002242:	2300      	movs	r3, #0
 8002244:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800224c:	2b01      	cmp	r3, #1
 800224e:	d101      	bne.n	8002254 <HAL_ADC_ConfigChannel+0x20>
 8002250:	2302      	movs	r3, #2
 8002252:	e0dc      	b.n	800240e <HAL_ADC_ConfigChannel+0x1da>
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2201      	movs	r2, #1
 8002258:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	2b06      	cmp	r3, #6
 8002262:	d81c      	bhi.n	800229e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	685a      	ldr	r2, [r3, #4]
 800226e:	4613      	mov	r3, r2
 8002270:	009b      	lsls	r3, r3, #2
 8002272:	4413      	add	r3, r2
 8002274:	3b05      	subs	r3, #5
 8002276:	221f      	movs	r2, #31
 8002278:	fa02 f303 	lsl.w	r3, r2, r3
 800227c:	43db      	mvns	r3, r3
 800227e:	4019      	ands	r1, r3
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	6818      	ldr	r0, [r3, #0]
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	685a      	ldr	r2, [r3, #4]
 8002288:	4613      	mov	r3, r2
 800228a:	009b      	lsls	r3, r3, #2
 800228c:	4413      	add	r3, r2
 800228e:	3b05      	subs	r3, #5
 8002290:	fa00 f203 	lsl.w	r2, r0, r3
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	430a      	orrs	r2, r1
 800229a:	635a      	str	r2, [r3, #52]	@ 0x34
 800229c:	e03c      	b.n	8002318 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	2b0c      	cmp	r3, #12
 80022a4:	d81c      	bhi.n	80022e0 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	685a      	ldr	r2, [r3, #4]
 80022b0:	4613      	mov	r3, r2
 80022b2:	009b      	lsls	r3, r3, #2
 80022b4:	4413      	add	r3, r2
 80022b6:	3b23      	subs	r3, #35	@ 0x23
 80022b8:	221f      	movs	r2, #31
 80022ba:	fa02 f303 	lsl.w	r3, r2, r3
 80022be:	43db      	mvns	r3, r3
 80022c0:	4019      	ands	r1, r3
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	6818      	ldr	r0, [r3, #0]
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	685a      	ldr	r2, [r3, #4]
 80022ca:	4613      	mov	r3, r2
 80022cc:	009b      	lsls	r3, r3, #2
 80022ce:	4413      	add	r3, r2
 80022d0:	3b23      	subs	r3, #35	@ 0x23
 80022d2:	fa00 f203 	lsl.w	r2, r0, r3
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	430a      	orrs	r2, r1
 80022dc:	631a      	str	r2, [r3, #48]	@ 0x30
 80022de:	e01b      	b.n	8002318 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	685a      	ldr	r2, [r3, #4]
 80022ea:	4613      	mov	r3, r2
 80022ec:	009b      	lsls	r3, r3, #2
 80022ee:	4413      	add	r3, r2
 80022f0:	3b41      	subs	r3, #65	@ 0x41
 80022f2:	221f      	movs	r2, #31
 80022f4:	fa02 f303 	lsl.w	r3, r2, r3
 80022f8:	43db      	mvns	r3, r3
 80022fa:	4019      	ands	r1, r3
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	6818      	ldr	r0, [r3, #0]
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	685a      	ldr	r2, [r3, #4]
 8002304:	4613      	mov	r3, r2
 8002306:	009b      	lsls	r3, r3, #2
 8002308:	4413      	add	r3, r2
 800230a:	3b41      	subs	r3, #65	@ 0x41
 800230c:	fa00 f203 	lsl.w	r2, r0, r3
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	430a      	orrs	r2, r1
 8002316:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	2b09      	cmp	r3, #9
 800231e:	d91c      	bls.n	800235a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	68d9      	ldr	r1, [r3, #12]
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	681a      	ldr	r2, [r3, #0]
 800232a:	4613      	mov	r3, r2
 800232c:	005b      	lsls	r3, r3, #1
 800232e:	4413      	add	r3, r2
 8002330:	3b1e      	subs	r3, #30
 8002332:	2207      	movs	r2, #7
 8002334:	fa02 f303 	lsl.w	r3, r2, r3
 8002338:	43db      	mvns	r3, r3
 800233a:	4019      	ands	r1, r3
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	6898      	ldr	r0, [r3, #8]
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	681a      	ldr	r2, [r3, #0]
 8002344:	4613      	mov	r3, r2
 8002346:	005b      	lsls	r3, r3, #1
 8002348:	4413      	add	r3, r2
 800234a:	3b1e      	subs	r3, #30
 800234c:	fa00 f203 	lsl.w	r2, r0, r3
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	430a      	orrs	r2, r1
 8002356:	60da      	str	r2, [r3, #12]
 8002358:	e019      	b.n	800238e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	6919      	ldr	r1, [r3, #16]
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	681a      	ldr	r2, [r3, #0]
 8002364:	4613      	mov	r3, r2
 8002366:	005b      	lsls	r3, r3, #1
 8002368:	4413      	add	r3, r2
 800236a:	2207      	movs	r2, #7
 800236c:	fa02 f303 	lsl.w	r3, r2, r3
 8002370:	43db      	mvns	r3, r3
 8002372:	4019      	ands	r1, r3
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	6898      	ldr	r0, [r3, #8]
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	681a      	ldr	r2, [r3, #0]
 800237c:	4613      	mov	r3, r2
 800237e:	005b      	lsls	r3, r3, #1
 8002380:	4413      	add	r3, r2
 8002382:	fa00 f203 	lsl.w	r2, r0, r3
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	430a      	orrs	r2, r1
 800238c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	2b10      	cmp	r3, #16
 8002394:	d003      	beq.n	800239e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800239a:	2b11      	cmp	r3, #17
 800239c:	d132      	bne.n	8002404 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4a1d      	ldr	r2, [pc, #116]	@ (8002418 <HAL_ADC_ConfigChannel+0x1e4>)
 80023a4:	4293      	cmp	r3, r2
 80023a6:	d125      	bne.n	80023f4 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	689b      	ldr	r3, [r3, #8]
 80023ae:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d126      	bne.n	8002404 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	689a      	ldr	r2, [r3, #8]
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 80023c4:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	2b10      	cmp	r3, #16
 80023cc:	d11a      	bne.n	8002404 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80023ce:	4b13      	ldr	r3, [pc, #76]	@ (800241c <HAL_ADC_ConfigChannel+0x1e8>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4a13      	ldr	r2, [pc, #76]	@ (8002420 <HAL_ADC_ConfigChannel+0x1ec>)
 80023d4:	fba2 2303 	umull	r2, r3, r2, r3
 80023d8:	0c9a      	lsrs	r2, r3, #18
 80023da:	4613      	mov	r3, r2
 80023dc:	009b      	lsls	r3, r3, #2
 80023de:	4413      	add	r3, r2
 80023e0:	005b      	lsls	r3, r3, #1
 80023e2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80023e4:	e002      	b.n	80023ec <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80023e6:	68bb      	ldr	r3, [r7, #8]
 80023e8:	3b01      	subs	r3, #1
 80023ea:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80023ec:	68bb      	ldr	r3, [r7, #8]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d1f9      	bne.n	80023e6 <HAL_ADC_ConfigChannel+0x1b2>
 80023f2:	e007      	b.n	8002404 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023f8:	f043 0220 	orr.w	r2, r3, #32
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002400:	2301      	movs	r3, #1
 8002402:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2200      	movs	r2, #0
 8002408:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800240c:	7bfb      	ldrb	r3, [r7, #15]
}
 800240e:	4618      	mov	r0, r3
 8002410:	3714      	adds	r7, #20
 8002412:	46bd      	mov	sp, r7
 8002414:	bc80      	pop	{r7}
 8002416:	4770      	bx	lr
 8002418:	40012400 	.word	0x40012400
 800241c:	20000008 	.word	0x20000008
 8002420:	431bde83 	.word	0x431bde83

08002424 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b084      	sub	sp, #16
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800242c:	2300      	movs	r3, #0
 800242e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002430:	2300      	movs	r3, #0
 8002432:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	689b      	ldr	r3, [r3, #8]
 800243a:	f003 0301 	and.w	r3, r3, #1
 800243e:	2b01      	cmp	r3, #1
 8002440:	d040      	beq.n	80024c4 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	689a      	ldr	r2, [r3, #8]
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f042 0201 	orr.w	r2, r2, #1
 8002450:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002452:	4b1f      	ldr	r3, [pc, #124]	@ (80024d0 <ADC_Enable+0xac>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4a1f      	ldr	r2, [pc, #124]	@ (80024d4 <ADC_Enable+0xb0>)
 8002458:	fba2 2303 	umull	r2, r3, r2, r3
 800245c:	0c9b      	lsrs	r3, r3, #18
 800245e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002460:	e002      	b.n	8002468 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002462:	68bb      	ldr	r3, [r7, #8]
 8002464:	3b01      	subs	r3, #1
 8002466:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002468:	68bb      	ldr	r3, [r7, #8]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d1f9      	bne.n	8002462 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800246e:	f7ff fbef 	bl	8001c50 <HAL_GetTick>
 8002472:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002474:	e01f      	b.n	80024b6 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002476:	f7ff fbeb 	bl	8001c50 <HAL_GetTick>
 800247a:	4602      	mov	r2, r0
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	1ad3      	subs	r3, r2, r3
 8002480:	2b02      	cmp	r3, #2
 8002482:	d918      	bls.n	80024b6 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	689b      	ldr	r3, [r3, #8]
 800248a:	f003 0301 	and.w	r3, r3, #1
 800248e:	2b01      	cmp	r3, #1
 8002490:	d011      	beq.n	80024b6 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002496:	f043 0210 	orr.w	r2, r3, #16
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024a2:	f043 0201 	orr.w	r2, r3, #1
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2200      	movs	r2, #0
 80024ae:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 80024b2:	2301      	movs	r3, #1
 80024b4:	e007      	b.n	80024c6 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	689b      	ldr	r3, [r3, #8]
 80024bc:	f003 0301 	and.w	r3, r3, #1
 80024c0:	2b01      	cmp	r3, #1
 80024c2:	d1d8      	bne.n	8002476 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80024c4:	2300      	movs	r3, #0
}
 80024c6:	4618      	mov	r0, r3
 80024c8:	3710      	adds	r7, #16
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}
 80024ce:	bf00      	nop
 80024d0:	20000008 	.word	0x20000008
 80024d4:	431bde83 	.word	0x431bde83

080024d8 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b084      	sub	sp, #16
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80024e0:	2300      	movs	r3, #0
 80024e2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	689b      	ldr	r3, [r3, #8]
 80024ea:	f003 0301 	and.w	r3, r3, #1
 80024ee:	2b01      	cmp	r3, #1
 80024f0:	d12e      	bne.n	8002550 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	689a      	ldr	r2, [r3, #8]
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f022 0201 	bic.w	r2, r2, #1
 8002500:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002502:	f7ff fba5 	bl	8001c50 <HAL_GetTick>
 8002506:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002508:	e01b      	b.n	8002542 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800250a:	f7ff fba1 	bl	8001c50 <HAL_GetTick>
 800250e:	4602      	mov	r2, r0
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	1ad3      	subs	r3, r2, r3
 8002514:	2b02      	cmp	r3, #2
 8002516:	d914      	bls.n	8002542 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	689b      	ldr	r3, [r3, #8]
 800251e:	f003 0301 	and.w	r3, r3, #1
 8002522:	2b01      	cmp	r3, #1
 8002524:	d10d      	bne.n	8002542 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800252a:	f043 0210 	orr.w	r2, r3, #16
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002536:	f043 0201 	orr.w	r2, r3, #1
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 800253e:	2301      	movs	r3, #1
 8002540:	e007      	b.n	8002552 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	689b      	ldr	r3, [r3, #8]
 8002548:	f003 0301 	and.w	r3, r3, #1
 800254c:	2b01      	cmp	r3, #1
 800254e:	d0dc      	beq.n	800250a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002550:	2300      	movs	r3, #0
}
 8002552:	4618      	mov	r0, r3
 8002554:	3710      	adds	r7, #16
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}
	...

0800255c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800255c:	b480      	push	{r7}
 800255e:	b085      	sub	sp, #20
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	f003 0307 	and.w	r3, r3, #7
 800256a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800256c:	4b0c      	ldr	r3, [pc, #48]	@ (80025a0 <__NVIC_SetPriorityGrouping+0x44>)
 800256e:	68db      	ldr	r3, [r3, #12]
 8002570:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002572:	68ba      	ldr	r2, [r7, #8]
 8002574:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002578:	4013      	ands	r3, r2
 800257a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002580:	68bb      	ldr	r3, [r7, #8]
 8002582:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002584:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002588:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800258c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800258e:	4a04      	ldr	r2, [pc, #16]	@ (80025a0 <__NVIC_SetPriorityGrouping+0x44>)
 8002590:	68bb      	ldr	r3, [r7, #8]
 8002592:	60d3      	str	r3, [r2, #12]
}
 8002594:	bf00      	nop
 8002596:	3714      	adds	r7, #20
 8002598:	46bd      	mov	sp, r7
 800259a:	bc80      	pop	{r7}
 800259c:	4770      	bx	lr
 800259e:	bf00      	nop
 80025a0:	e000ed00 	.word	0xe000ed00

080025a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80025a4:	b480      	push	{r7}
 80025a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025a8:	4b04      	ldr	r3, [pc, #16]	@ (80025bc <__NVIC_GetPriorityGrouping+0x18>)
 80025aa:	68db      	ldr	r3, [r3, #12]
 80025ac:	0a1b      	lsrs	r3, r3, #8
 80025ae:	f003 0307 	and.w	r3, r3, #7
}
 80025b2:	4618      	mov	r0, r3
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bc80      	pop	{r7}
 80025b8:	4770      	bx	lr
 80025ba:	bf00      	nop
 80025bc:	e000ed00 	.word	0xe000ed00

080025c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025c0:	b480      	push	{r7}
 80025c2:	b083      	sub	sp, #12
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	4603      	mov	r3, r0
 80025c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	db0b      	blt.n	80025ea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025d2:	79fb      	ldrb	r3, [r7, #7]
 80025d4:	f003 021f 	and.w	r2, r3, #31
 80025d8:	4906      	ldr	r1, [pc, #24]	@ (80025f4 <__NVIC_EnableIRQ+0x34>)
 80025da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025de:	095b      	lsrs	r3, r3, #5
 80025e0:	2001      	movs	r0, #1
 80025e2:	fa00 f202 	lsl.w	r2, r0, r2
 80025e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80025ea:	bf00      	nop
 80025ec:	370c      	adds	r7, #12
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bc80      	pop	{r7}
 80025f2:	4770      	bx	lr
 80025f4:	e000e100 	.word	0xe000e100

080025f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025f8:	b480      	push	{r7}
 80025fa:	b083      	sub	sp, #12
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	4603      	mov	r3, r0
 8002600:	6039      	str	r1, [r7, #0]
 8002602:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002604:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002608:	2b00      	cmp	r3, #0
 800260a:	db0a      	blt.n	8002622 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	b2da      	uxtb	r2, r3
 8002610:	490c      	ldr	r1, [pc, #48]	@ (8002644 <__NVIC_SetPriority+0x4c>)
 8002612:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002616:	0112      	lsls	r2, r2, #4
 8002618:	b2d2      	uxtb	r2, r2
 800261a:	440b      	add	r3, r1
 800261c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002620:	e00a      	b.n	8002638 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	b2da      	uxtb	r2, r3
 8002626:	4908      	ldr	r1, [pc, #32]	@ (8002648 <__NVIC_SetPriority+0x50>)
 8002628:	79fb      	ldrb	r3, [r7, #7]
 800262a:	f003 030f 	and.w	r3, r3, #15
 800262e:	3b04      	subs	r3, #4
 8002630:	0112      	lsls	r2, r2, #4
 8002632:	b2d2      	uxtb	r2, r2
 8002634:	440b      	add	r3, r1
 8002636:	761a      	strb	r2, [r3, #24]
}
 8002638:	bf00      	nop
 800263a:	370c      	adds	r7, #12
 800263c:	46bd      	mov	sp, r7
 800263e:	bc80      	pop	{r7}
 8002640:	4770      	bx	lr
 8002642:	bf00      	nop
 8002644:	e000e100 	.word	0xe000e100
 8002648:	e000ed00 	.word	0xe000ed00

0800264c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800264c:	b480      	push	{r7}
 800264e:	b089      	sub	sp, #36	@ 0x24
 8002650:	af00      	add	r7, sp, #0
 8002652:	60f8      	str	r0, [r7, #12]
 8002654:	60b9      	str	r1, [r7, #8]
 8002656:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	f003 0307 	and.w	r3, r3, #7
 800265e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002660:	69fb      	ldr	r3, [r7, #28]
 8002662:	f1c3 0307 	rsb	r3, r3, #7
 8002666:	2b04      	cmp	r3, #4
 8002668:	bf28      	it	cs
 800266a:	2304      	movcs	r3, #4
 800266c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800266e:	69fb      	ldr	r3, [r7, #28]
 8002670:	3304      	adds	r3, #4
 8002672:	2b06      	cmp	r3, #6
 8002674:	d902      	bls.n	800267c <NVIC_EncodePriority+0x30>
 8002676:	69fb      	ldr	r3, [r7, #28]
 8002678:	3b03      	subs	r3, #3
 800267a:	e000      	b.n	800267e <NVIC_EncodePriority+0x32>
 800267c:	2300      	movs	r3, #0
 800267e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002680:	f04f 32ff 	mov.w	r2, #4294967295
 8002684:	69bb      	ldr	r3, [r7, #24]
 8002686:	fa02 f303 	lsl.w	r3, r2, r3
 800268a:	43da      	mvns	r2, r3
 800268c:	68bb      	ldr	r3, [r7, #8]
 800268e:	401a      	ands	r2, r3
 8002690:	697b      	ldr	r3, [r7, #20]
 8002692:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002694:	f04f 31ff 	mov.w	r1, #4294967295
 8002698:	697b      	ldr	r3, [r7, #20]
 800269a:	fa01 f303 	lsl.w	r3, r1, r3
 800269e:	43d9      	mvns	r1, r3
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026a4:	4313      	orrs	r3, r2
         );
}
 80026a6:	4618      	mov	r0, r3
 80026a8:	3724      	adds	r7, #36	@ 0x24
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bc80      	pop	{r7}
 80026ae:	4770      	bx	lr

080026b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b082      	sub	sp, #8
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	3b01      	subs	r3, #1
 80026bc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80026c0:	d301      	bcc.n	80026c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80026c2:	2301      	movs	r3, #1
 80026c4:	e00f      	b.n	80026e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80026c6:	4a0a      	ldr	r2, [pc, #40]	@ (80026f0 <SysTick_Config+0x40>)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	3b01      	subs	r3, #1
 80026cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80026ce:	210f      	movs	r1, #15
 80026d0:	f04f 30ff 	mov.w	r0, #4294967295
 80026d4:	f7ff ff90 	bl	80025f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026d8:	4b05      	ldr	r3, [pc, #20]	@ (80026f0 <SysTick_Config+0x40>)
 80026da:	2200      	movs	r2, #0
 80026dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026de:	4b04      	ldr	r3, [pc, #16]	@ (80026f0 <SysTick_Config+0x40>)
 80026e0:	2207      	movs	r2, #7
 80026e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80026e4:	2300      	movs	r3, #0
}
 80026e6:	4618      	mov	r0, r3
 80026e8:	3708      	adds	r7, #8
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd80      	pop	{r7, pc}
 80026ee:	bf00      	nop
 80026f0:	e000e010 	.word	0xe000e010

080026f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b082      	sub	sp, #8
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026fc:	6878      	ldr	r0, [r7, #4]
 80026fe:	f7ff ff2d 	bl	800255c <__NVIC_SetPriorityGrouping>
}
 8002702:	bf00      	nop
 8002704:	3708      	adds	r7, #8
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}

0800270a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800270a:	b580      	push	{r7, lr}
 800270c:	b086      	sub	sp, #24
 800270e:	af00      	add	r7, sp, #0
 8002710:	4603      	mov	r3, r0
 8002712:	60b9      	str	r1, [r7, #8]
 8002714:	607a      	str	r2, [r7, #4]
 8002716:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002718:	2300      	movs	r3, #0
 800271a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800271c:	f7ff ff42 	bl	80025a4 <__NVIC_GetPriorityGrouping>
 8002720:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002722:	687a      	ldr	r2, [r7, #4]
 8002724:	68b9      	ldr	r1, [r7, #8]
 8002726:	6978      	ldr	r0, [r7, #20]
 8002728:	f7ff ff90 	bl	800264c <NVIC_EncodePriority>
 800272c:	4602      	mov	r2, r0
 800272e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002732:	4611      	mov	r1, r2
 8002734:	4618      	mov	r0, r3
 8002736:	f7ff ff5f 	bl	80025f8 <__NVIC_SetPriority>
}
 800273a:	bf00      	nop
 800273c:	3718      	adds	r7, #24
 800273e:	46bd      	mov	sp, r7
 8002740:	bd80      	pop	{r7, pc}

08002742 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002742:	b580      	push	{r7, lr}
 8002744:	b082      	sub	sp, #8
 8002746:	af00      	add	r7, sp, #0
 8002748:	4603      	mov	r3, r0
 800274a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800274c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002750:	4618      	mov	r0, r3
 8002752:	f7ff ff35 	bl	80025c0 <__NVIC_EnableIRQ>
}
 8002756:	bf00      	nop
 8002758:	3708      	adds	r7, #8
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}

0800275e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800275e:	b580      	push	{r7, lr}
 8002760:	b082      	sub	sp, #8
 8002762:	af00      	add	r7, sp, #0
 8002764:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002766:	6878      	ldr	r0, [r7, #4]
 8002768:	f7ff ffa2 	bl	80026b0 <SysTick_Config>
 800276c:	4603      	mov	r3, r0
}
 800276e:	4618      	mov	r0, r3
 8002770:	3708      	adds	r7, #8
 8002772:	46bd      	mov	sp, r7
 8002774:	bd80      	pop	{r7, pc}

08002776 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002776:	b480      	push	{r7}
 8002778:	b085      	sub	sp, #20
 800277a:	af00      	add	r7, sp, #0
 800277c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800277e:	2300      	movs	r3, #0
 8002780:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002788:	b2db      	uxtb	r3, r3
 800278a:	2b02      	cmp	r3, #2
 800278c:	d008      	beq.n	80027a0 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2204      	movs	r2, #4
 8002792:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2200      	movs	r2, #0
 8002798:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800279c:	2301      	movs	r3, #1
 800279e:	e020      	b.n	80027e2 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	681a      	ldr	r2, [r3, #0]
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f022 020e 	bic.w	r2, r2, #14
 80027ae:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	681a      	ldr	r2, [r3, #0]
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f022 0201 	bic.w	r2, r2, #1
 80027be:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027c8:	2101      	movs	r1, #1
 80027ca:	fa01 f202 	lsl.w	r2, r1, r2
 80027ce:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2201      	movs	r2, #1
 80027d4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2200      	movs	r2, #0
 80027dc:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80027e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80027e2:	4618      	mov	r0, r3
 80027e4:	3714      	adds	r7, #20
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bc80      	pop	{r7}
 80027ea:	4770      	bx	lr

080027ec <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b084      	sub	sp, #16
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80027f4:	2300      	movs	r3, #0
 80027f6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80027fe:	b2db      	uxtb	r3, r3
 8002800:	2b02      	cmp	r3, #2
 8002802:	d005      	beq.n	8002810 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2204      	movs	r2, #4
 8002808:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 800280a:	2301      	movs	r3, #1
 800280c:	73fb      	strb	r3, [r7, #15]
 800280e:	e051      	b.n	80028b4 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	681a      	ldr	r2, [r3, #0]
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f022 020e 	bic.w	r2, r2, #14
 800281e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	681a      	ldr	r2, [r3, #0]
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f022 0201 	bic.w	r2, r2, #1
 800282e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a22      	ldr	r2, [pc, #136]	@ (80028c0 <HAL_DMA_Abort_IT+0xd4>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d029      	beq.n	800288e <HAL_DMA_Abort_IT+0xa2>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4a21      	ldr	r2, [pc, #132]	@ (80028c4 <HAL_DMA_Abort_IT+0xd8>)
 8002840:	4293      	cmp	r3, r2
 8002842:	d022      	beq.n	800288a <HAL_DMA_Abort_IT+0x9e>
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a1f      	ldr	r2, [pc, #124]	@ (80028c8 <HAL_DMA_Abort_IT+0xdc>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d01a      	beq.n	8002884 <HAL_DMA_Abort_IT+0x98>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4a1e      	ldr	r2, [pc, #120]	@ (80028cc <HAL_DMA_Abort_IT+0xe0>)
 8002854:	4293      	cmp	r3, r2
 8002856:	d012      	beq.n	800287e <HAL_DMA_Abort_IT+0x92>
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a1c      	ldr	r2, [pc, #112]	@ (80028d0 <HAL_DMA_Abort_IT+0xe4>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d00a      	beq.n	8002878 <HAL_DMA_Abort_IT+0x8c>
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4a1b      	ldr	r2, [pc, #108]	@ (80028d4 <HAL_DMA_Abort_IT+0xe8>)
 8002868:	4293      	cmp	r3, r2
 800286a:	d102      	bne.n	8002872 <HAL_DMA_Abort_IT+0x86>
 800286c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002870:	e00e      	b.n	8002890 <HAL_DMA_Abort_IT+0xa4>
 8002872:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002876:	e00b      	b.n	8002890 <HAL_DMA_Abort_IT+0xa4>
 8002878:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800287c:	e008      	b.n	8002890 <HAL_DMA_Abort_IT+0xa4>
 800287e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002882:	e005      	b.n	8002890 <HAL_DMA_Abort_IT+0xa4>
 8002884:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002888:	e002      	b.n	8002890 <HAL_DMA_Abort_IT+0xa4>
 800288a:	2310      	movs	r3, #16
 800288c:	e000      	b.n	8002890 <HAL_DMA_Abort_IT+0xa4>
 800288e:	2301      	movs	r3, #1
 8002890:	4a11      	ldr	r2, [pc, #68]	@ (80028d8 <HAL_DMA_Abort_IT+0xec>)
 8002892:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2201      	movs	r2, #1
 8002898:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2200      	movs	r2, #0
 80028a0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d003      	beq.n	80028b4 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80028b0:	6878      	ldr	r0, [r7, #4]
 80028b2:	4798      	blx	r3
    } 
  }
  return status;
 80028b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80028b6:	4618      	mov	r0, r3
 80028b8:	3710      	adds	r7, #16
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}
 80028be:	bf00      	nop
 80028c0:	40020008 	.word	0x40020008
 80028c4:	4002001c 	.word	0x4002001c
 80028c8:	40020030 	.word	0x40020030
 80028cc:	40020044 	.word	0x40020044
 80028d0:	40020058 	.word	0x40020058
 80028d4:	4002006c 	.word	0x4002006c
 80028d8:	40020000 	.word	0x40020000

080028dc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80028dc:	b480      	push	{r7}
 80028de:	b08b      	sub	sp, #44	@ 0x2c
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
 80028e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80028e6:	2300      	movs	r3, #0
 80028e8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80028ea:	2300      	movs	r3, #0
 80028ec:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80028ee:	e169      	b.n	8002bc4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80028f0:	2201      	movs	r2, #1
 80028f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028f4:	fa02 f303 	lsl.w	r3, r2, r3
 80028f8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	69fa      	ldr	r2, [r7, #28]
 8002900:	4013      	ands	r3, r2
 8002902:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002904:	69ba      	ldr	r2, [r7, #24]
 8002906:	69fb      	ldr	r3, [r7, #28]
 8002908:	429a      	cmp	r2, r3
 800290a:	f040 8158 	bne.w	8002bbe <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	4a9a      	ldr	r2, [pc, #616]	@ (8002b7c <HAL_GPIO_Init+0x2a0>)
 8002914:	4293      	cmp	r3, r2
 8002916:	d05e      	beq.n	80029d6 <HAL_GPIO_Init+0xfa>
 8002918:	4a98      	ldr	r2, [pc, #608]	@ (8002b7c <HAL_GPIO_Init+0x2a0>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d875      	bhi.n	8002a0a <HAL_GPIO_Init+0x12e>
 800291e:	4a98      	ldr	r2, [pc, #608]	@ (8002b80 <HAL_GPIO_Init+0x2a4>)
 8002920:	4293      	cmp	r3, r2
 8002922:	d058      	beq.n	80029d6 <HAL_GPIO_Init+0xfa>
 8002924:	4a96      	ldr	r2, [pc, #600]	@ (8002b80 <HAL_GPIO_Init+0x2a4>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d86f      	bhi.n	8002a0a <HAL_GPIO_Init+0x12e>
 800292a:	4a96      	ldr	r2, [pc, #600]	@ (8002b84 <HAL_GPIO_Init+0x2a8>)
 800292c:	4293      	cmp	r3, r2
 800292e:	d052      	beq.n	80029d6 <HAL_GPIO_Init+0xfa>
 8002930:	4a94      	ldr	r2, [pc, #592]	@ (8002b84 <HAL_GPIO_Init+0x2a8>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d869      	bhi.n	8002a0a <HAL_GPIO_Init+0x12e>
 8002936:	4a94      	ldr	r2, [pc, #592]	@ (8002b88 <HAL_GPIO_Init+0x2ac>)
 8002938:	4293      	cmp	r3, r2
 800293a:	d04c      	beq.n	80029d6 <HAL_GPIO_Init+0xfa>
 800293c:	4a92      	ldr	r2, [pc, #584]	@ (8002b88 <HAL_GPIO_Init+0x2ac>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d863      	bhi.n	8002a0a <HAL_GPIO_Init+0x12e>
 8002942:	4a92      	ldr	r2, [pc, #584]	@ (8002b8c <HAL_GPIO_Init+0x2b0>)
 8002944:	4293      	cmp	r3, r2
 8002946:	d046      	beq.n	80029d6 <HAL_GPIO_Init+0xfa>
 8002948:	4a90      	ldr	r2, [pc, #576]	@ (8002b8c <HAL_GPIO_Init+0x2b0>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d85d      	bhi.n	8002a0a <HAL_GPIO_Init+0x12e>
 800294e:	2b12      	cmp	r3, #18
 8002950:	d82a      	bhi.n	80029a8 <HAL_GPIO_Init+0xcc>
 8002952:	2b12      	cmp	r3, #18
 8002954:	d859      	bhi.n	8002a0a <HAL_GPIO_Init+0x12e>
 8002956:	a201      	add	r2, pc, #4	@ (adr r2, 800295c <HAL_GPIO_Init+0x80>)
 8002958:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800295c:	080029d7 	.word	0x080029d7
 8002960:	080029b1 	.word	0x080029b1
 8002964:	080029c3 	.word	0x080029c3
 8002968:	08002a05 	.word	0x08002a05
 800296c:	08002a0b 	.word	0x08002a0b
 8002970:	08002a0b 	.word	0x08002a0b
 8002974:	08002a0b 	.word	0x08002a0b
 8002978:	08002a0b 	.word	0x08002a0b
 800297c:	08002a0b 	.word	0x08002a0b
 8002980:	08002a0b 	.word	0x08002a0b
 8002984:	08002a0b 	.word	0x08002a0b
 8002988:	08002a0b 	.word	0x08002a0b
 800298c:	08002a0b 	.word	0x08002a0b
 8002990:	08002a0b 	.word	0x08002a0b
 8002994:	08002a0b 	.word	0x08002a0b
 8002998:	08002a0b 	.word	0x08002a0b
 800299c:	08002a0b 	.word	0x08002a0b
 80029a0:	080029b9 	.word	0x080029b9
 80029a4:	080029cd 	.word	0x080029cd
 80029a8:	4a79      	ldr	r2, [pc, #484]	@ (8002b90 <HAL_GPIO_Init+0x2b4>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d013      	beq.n	80029d6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80029ae:	e02c      	b.n	8002a0a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	68db      	ldr	r3, [r3, #12]
 80029b4:	623b      	str	r3, [r7, #32]
          break;
 80029b6:	e029      	b.n	8002a0c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	68db      	ldr	r3, [r3, #12]
 80029bc:	3304      	adds	r3, #4
 80029be:	623b      	str	r3, [r7, #32]
          break;
 80029c0:	e024      	b.n	8002a0c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	68db      	ldr	r3, [r3, #12]
 80029c6:	3308      	adds	r3, #8
 80029c8:	623b      	str	r3, [r7, #32]
          break;
 80029ca:	e01f      	b.n	8002a0c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	68db      	ldr	r3, [r3, #12]
 80029d0:	330c      	adds	r3, #12
 80029d2:	623b      	str	r3, [r7, #32]
          break;
 80029d4:	e01a      	b.n	8002a0c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	689b      	ldr	r3, [r3, #8]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d102      	bne.n	80029e4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80029de:	2304      	movs	r3, #4
 80029e0:	623b      	str	r3, [r7, #32]
          break;
 80029e2:	e013      	b.n	8002a0c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	689b      	ldr	r3, [r3, #8]
 80029e8:	2b01      	cmp	r3, #1
 80029ea:	d105      	bne.n	80029f8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80029ec:	2308      	movs	r3, #8
 80029ee:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	69fa      	ldr	r2, [r7, #28]
 80029f4:	611a      	str	r2, [r3, #16]
          break;
 80029f6:	e009      	b.n	8002a0c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80029f8:	2308      	movs	r3, #8
 80029fa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	69fa      	ldr	r2, [r7, #28]
 8002a00:	615a      	str	r2, [r3, #20]
          break;
 8002a02:	e003      	b.n	8002a0c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002a04:	2300      	movs	r3, #0
 8002a06:	623b      	str	r3, [r7, #32]
          break;
 8002a08:	e000      	b.n	8002a0c <HAL_GPIO_Init+0x130>
          break;
 8002a0a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002a0c:	69bb      	ldr	r3, [r7, #24]
 8002a0e:	2bff      	cmp	r3, #255	@ 0xff
 8002a10:	d801      	bhi.n	8002a16 <HAL_GPIO_Init+0x13a>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	e001      	b.n	8002a1a <HAL_GPIO_Init+0x13e>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	3304      	adds	r3, #4
 8002a1a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002a1c:	69bb      	ldr	r3, [r7, #24]
 8002a1e:	2bff      	cmp	r3, #255	@ 0xff
 8002a20:	d802      	bhi.n	8002a28 <HAL_GPIO_Init+0x14c>
 8002a22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a24:	009b      	lsls	r3, r3, #2
 8002a26:	e002      	b.n	8002a2e <HAL_GPIO_Init+0x152>
 8002a28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a2a:	3b08      	subs	r3, #8
 8002a2c:	009b      	lsls	r3, r3, #2
 8002a2e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002a30:	697b      	ldr	r3, [r7, #20]
 8002a32:	681a      	ldr	r2, [r3, #0]
 8002a34:	210f      	movs	r1, #15
 8002a36:	693b      	ldr	r3, [r7, #16]
 8002a38:	fa01 f303 	lsl.w	r3, r1, r3
 8002a3c:	43db      	mvns	r3, r3
 8002a3e:	401a      	ands	r2, r3
 8002a40:	6a39      	ldr	r1, [r7, #32]
 8002a42:	693b      	ldr	r3, [r7, #16]
 8002a44:	fa01 f303 	lsl.w	r3, r1, r3
 8002a48:	431a      	orrs	r2, r3
 8002a4a:	697b      	ldr	r3, [r7, #20]
 8002a4c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	f000 80b1 	beq.w	8002bbe <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002a5c:	4b4d      	ldr	r3, [pc, #308]	@ (8002b94 <HAL_GPIO_Init+0x2b8>)
 8002a5e:	699b      	ldr	r3, [r3, #24]
 8002a60:	4a4c      	ldr	r2, [pc, #304]	@ (8002b94 <HAL_GPIO_Init+0x2b8>)
 8002a62:	f043 0301 	orr.w	r3, r3, #1
 8002a66:	6193      	str	r3, [r2, #24]
 8002a68:	4b4a      	ldr	r3, [pc, #296]	@ (8002b94 <HAL_GPIO_Init+0x2b8>)
 8002a6a:	699b      	ldr	r3, [r3, #24]
 8002a6c:	f003 0301 	and.w	r3, r3, #1
 8002a70:	60bb      	str	r3, [r7, #8]
 8002a72:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002a74:	4a48      	ldr	r2, [pc, #288]	@ (8002b98 <HAL_GPIO_Init+0x2bc>)
 8002a76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a78:	089b      	lsrs	r3, r3, #2
 8002a7a:	3302      	adds	r3, #2
 8002a7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a80:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002a82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a84:	f003 0303 	and.w	r3, r3, #3
 8002a88:	009b      	lsls	r3, r3, #2
 8002a8a:	220f      	movs	r2, #15
 8002a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a90:	43db      	mvns	r3, r3
 8002a92:	68fa      	ldr	r2, [r7, #12]
 8002a94:	4013      	ands	r3, r2
 8002a96:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	4a40      	ldr	r2, [pc, #256]	@ (8002b9c <HAL_GPIO_Init+0x2c0>)
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d013      	beq.n	8002ac8 <HAL_GPIO_Init+0x1ec>
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	4a3f      	ldr	r2, [pc, #252]	@ (8002ba0 <HAL_GPIO_Init+0x2c4>)
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	d00d      	beq.n	8002ac4 <HAL_GPIO_Init+0x1e8>
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	4a3e      	ldr	r2, [pc, #248]	@ (8002ba4 <HAL_GPIO_Init+0x2c8>)
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d007      	beq.n	8002ac0 <HAL_GPIO_Init+0x1e4>
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	4a3d      	ldr	r2, [pc, #244]	@ (8002ba8 <HAL_GPIO_Init+0x2cc>)
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d101      	bne.n	8002abc <HAL_GPIO_Init+0x1e0>
 8002ab8:	2303      	movs	r3, #3
 8002aba:	e006      	b.n	8002aca <HAL_GPIO_Init+0x1ee>
 8002abc:	2304      	movs	r3, #4
 8002abe:	e004      	b.n	8002aca <HAL_GPIO_Init+0x1ee>
 8002ac0:	2302      	movs	r3, #2
 8002ac2:	e002      	b.n	8002aca <HAL_GPIO_Init+0x1ee>
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	e000      	b.n	8002aca <HAL_GPIO_Init+0x1ee>
 8002ac8:	2300      	movs	r3, #0
 8002aca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002acc:	f002 0203 	and.w	r2, r2, #3
 8002ad0:	0092      	lsls	r2, r2, #2
 8002ad2:	4093      	lsls	r3, r2
 8002ad4:	68fa      	ldr	r2, [r7, #12]
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002ada:	492f      	ldr	r1, [pc, #188]	@ (8002b98 <HAL_GPIO_Init+0x2bc>)
 8002adc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ade:	089b      	lsrs	r3, r3, #2
 8002ae0:	3302      	adds	r3, #2
 8002ae2:	68fa      	ldr	r2, [r7, #12]
 8002ae4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d006      	beq.n	8002b02 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002af4:	4b2d      	ldr	r3, [pc, #180]	@ (8002bac <HAL_GPIO_Init+0x2d0>)
 8002af6:	689a      	ldr	r2, [r3, #8]
 8002af8:	492c      	ldr	r1, [pc, #176]	@ (8002bac <HAL_GPIO_Init+0x2d0>)
 8002afa:	69bb      	ldr	r3, [r7, #24]
 8002afc:	4313      	orrs	r3, r2
 8002afe:	608b      	str	r3, [r1, #8]
 8002b00:	e006      	b.n	8002b10 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002b02:	4b2a      	ldr	r3, [pc, #168]	@ (8002bac <HAL_GPIO_Init+0x2d0>)
 8002b04:	689a      	ldr	r2, [r3, #8]
 8002b06:	69bb      	ldr	r3, [r7, #24]
 8002b08:	43db      	mvns	r3, r3
 8002b0a:	4928      	ldr	r1, [pc, #160]	@ (8002bac <HAL_GPIO_Init+0x2d0>)
 8002b0c:	4013      	ands	r3, r2
 8002b0e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d006      	beq.n	8002b2a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002b1c:	4b23      	ldr	r3, [pc, #140]	@ (8002bac <HAL_GPIO_Init+0x2d0>)
 8002b1e:	68da      	ldr	r2, [r3, #12]
 8002b20:	4922      	ldr	r1, [pc, #136]	@ (8002bac <HAL_GPIO_Init+0x2d0>)
 8002b22:	69bb      	ldr	r3, [r7, #24]
 8002b24:	4313      	orrs	r3, r2
 8002b26:	60cb      	str	r3, [r1, #12]
 8002b28:	e006      	b.n	8002b38 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002b2a:	4b20      	ldr	r3, [pc, #128]	@ (8002bac <HAL_GPIO_Init+0x2d0>)
 8002b2c:	68da      	ldr	r2, [r3, #12]
 8002b2e:	69bb      	ldr	r3, [r7, #24]
 8002b30:	43db      	mvns	r3, r3
 8002b32:	491e      	ldr	r1, [pc, #120]	@ (8002bac <HAL_GPIO_Init+0x2d0>)
 8002b34:	4013      	ands	r3, r2
 8002b36:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d006      	beq.n	8002b52 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002b44:	4b19      	ldr	r3, [pc, #100]	@ (8002bac <HAL_GPIO_Init+0x2d0>)
 8002b46:	685a      	ldr	r2, [r3, #4]
 8002b48:	4918      	ldr	r1, [pc, #96]	@ (8002bac <HAL_GPIO_Init+0x2d0>)
 8002b4a:	69bb      	ldr	r3, [r7, #24]
 8002b4c:	4313      	orrs	r3, r2
 8002b4e:	604b      	str	r3, [r1, #4]
 8002b50:	e006      	b.n	8002b60 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002b52:	4b16      	ldr	r3, [pc, #88]	@ (8002bac <HAL_GPIO_Init+0x2d0>)
 8002b54:	685a      	ldr	r2, [r3, #4]
 8002b56:	69bb      	ldr	r3, [r7, #24]
 8002b58:	43db      	mvns	r3, r3
 8002b5a:	4914      	ldr	r1, [pc, #80]	@ (8002bac <HAL_GPIO_Init+0x2d0>)
 8002b5c:	4013      	ands	r3, r2
 8002b5e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d021      	beq.n	8002bb0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002b6c:	4b0f      	ldr	r3, [pc, #60]	@ (8002bac <HAL_GPIO_Init+0x2d0>)
 8002b6e:	681a      	ldr	r2, [r3, #0]
 8002b70:	490e      	ldr	r1, [pc, #56]	@ (8002bac <HAL_GPIO_Init+0x2d0>)
 8002b72:	69bb      	ldr	r3, [r7, #24]
 8002b74:	4313      	orrs	r3, r2
 8002b76:	600b      	str	r3, [r1, #0]
 8002b78:	e021      	b.n	8002bbe <HAL_GPIO_Init+0x2e2>
 8002b7a:	bf00      	nop
 8002b7c:	10320000 	.word	0x10320000
 8002b80:	10310000 	.word	0x10310000
 8002b84:	10220000 	.word	0x10220000
 8002b88:	10210000 	.word	0x10210000
 8002b8c:	10120000 	.word	0x10120000
 8002b90:	10110000 	.word	0x10110000
 8002b94:	40021000 	.word	0x40021000
 8002b98:	40010000 	.word	0x40010000
 8002b9c:	40010800 	.word	0x40010800
 8002ba0:	40010c00 	.word	0x40010c00
 8002ba4:	40011000 	.word	0x40011000
 8002ba8:	40011400 	.word	0x40011400
 8002bac:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002bb0:	4b0b      	ldr	r3, [pc, #44]	@ (8002be0 <HAL_GPIO_Init+0x304>)
 8002bb2:	681a      	ldr	r2, [r3, #0]
 8002bb4:	69bb      	ldr	r3, [r7, #24]
 8002bb6:	43db      	mvns	r3, r3
 8002bb8:	4909      	ldr	r1, [pc, #36]	@ (8002be0 <HAL_GPIO_Init+0x304>)
 8002bba:	4013      	ands	r3, r2
 8002bbc:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002bbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bc0:	3301      	adds	r3, #1
 8002bc2:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	681a      	ldr	r2, [r3, #0]
 8002bc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bca:	fa22 f303 	lsr.w	r3, r2, r3
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	f47f ae8e 	bne.w	80028f0 <HAL_GPIO_Init+0x14>
  }
}
 8002bd4:	bf00      	nop
 8002bd6:	bf00      	nop
 8002bd8:	372c      	adds	r7, #44	@ 0x2c
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bc80      	pop	{r7}
 8002bde:	4770      	bx	lr
 8002be0:	40010400 	.word	0x40010400

08002be4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002be4:	b480      	push	{r7}
 8002be6:	b083      	sub	sp, #12
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
 8002bec:	460b      	mov	r3, r1
 8002bee:	807b      	strh	r3, [r7, #2]
 8002bf0:	4613      	mov	r3, r2
 8002bf2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002bf4:	787b      	ldrb	r3, [r7, #1]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d003      	beq.n	8002c02 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002bfa:	887a      	ldrh	r2, [r7, #2]
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002c00:	e003      	b.n	8002c0a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002c02:	887b      	ldrh	r3, [r7, #2]
 8002c04:	041a      	lsls	r2, r3, #16
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	611a      	str	r2, [r3, #16]
}
 8002c0a:	bf00      	nop
 8002c0c:	370c      	adds	r7, #12
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bc80      	pop	{r7}
 8002c12:	4770      	bx	lr

08002c14 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002c14:	b480      	push	{r7}
 8002c16:	b085      	sub	sp, #20
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
 8002c1c:	460b      	mov	r3, r1
 8002c1e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	68db      	ldr	r3, [r3, #12]
 8002c24:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002c26:	887a      	ldrh	r2, [r7, #2]
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	4013      	ands	r3, r2
 8002c2c:	041a      	lsls	r2, r3, #16
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	43d9      	mvns	r1, r3
 8002c32:	887b      	ldrh	r3, [r7, #2]
 8002c34:	400b      	ands	r3, r1
 8002c36:	431a      	orrs	r2, r3
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	611a      	str	r2, [r3, #16]
}
 8002c3c:	bf00      	nop
 8002c3e:	3714      	adds	r7, #20
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bc80      	pop	{r7}
 8002c44:	4770      	bx	lr
	...

08002c48 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b082      	sub	sp, #8
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	4603      	mov	r3, r0
 8002c50:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002c52:	4b08      	ldr	r3, [pc, #32]	@ (8002c74 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002c54:	695a      	ldr	r2, [r3, #20]
 8002c56:	88fb      	ldrh	r3, [r7, #6]
 8002c58:	4013      	ands	r3, r2
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d006      	beq.n	8002c6c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002c5e:	4a05      	ldr	r2, [pc, #20]	@ (8002c74 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002c60:	88fb      	ldrh	r3, [r7, #6]
 8002c62:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002c64:	88fb      	ldrh	r3, [r7, #6]
 8002c66:	4618      	mov	r0, r3
 8002c68:	f7fe f9ba 	bl	8000fe0 <HAL_GPIO_EXTI_Callback>
  }
}
 8002c6c:	bf00      	nop
 8002c6e:	3708      	adds	r7, #8
 8002c70:	46bd      	mov	sp, r7
 8002c72:	bd80      	pop	{r7, pc}
 8002c74:	40010400 	.word	0x40010400

08002c78 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b086      	sub	sp, #24
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d101      	bne.n	8002c8a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c86:	2301      	movs	r3, #1
 8002c88:	e272      	b.n	8003170 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f003 0301 	and.w	r3, r3, #1
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	f000 8087 	beq.w	8002da6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002c98:	4b92      	ldr	r3, [pc, #584]	@ (8002ee4 <HAL_RCC_OscConfig+0x26c>)
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	f003 030c 	and.w	r3, r3, #12
 8002ca0:	2b04      	cmp	r3, #4
 8002ca2:	d00c      	beq.n	8002cbe <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002ca4:	4b8f      	ldr	r3, [pc, #572]	@ (8002ee4 <HAL_RCC_OscConfig+0x26c>)
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	f003 030c 	and.w	r3, r3, #12
 8002cac:	2b08      	cmp	r3, #8
 8002cae:	d112      	bne.n	8002cd6 <HAL_RCC_OscConfig+0x5e>
 8002cb0:	4b8c      	ldr	r3, [pc, #560]	@ (8002ee4 <HAL_RCC_OscConfig+0x26c>)
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002cb8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002cbc:	d10b      	bne.n	8002cd6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cbe:	4b89      	ldr	r3, [pc, #548]	@ (8002ee4 <HAL_RCC_OscConfig+0x26c>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d06c      	beq.n	8002da4 <HAL_RCC_OscConfig+0x12c>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d168      	bne.n	8002da4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	e24c      	b.n	8003170 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002cde:	d106      	bne.n	8002cee <HAL_RCC_OscConfig+0x76>
 8002ce0:	4b80      	ldr	r3, [pc, #512]	@ (8002ee4 <HAL_RCC_OscConfig+0x26c>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a7f      	ldr	r2, [pc, #508]	@ (8002ee4 <HAL_RCC_OscConfig+0x26c>)
 8002ce6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002cea:	6013      	str	r3, [r2, #0]
 8002cec:	e02e      	b.n	8002d4c <HAL_RCC_OscConfig+0xd4>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d10c      	bne.n	8002d10 <HAL_RCC_OscConfig+0x98>
 8002cf6:	4b7b      	ldr	r3, [pc, #492]	@ (8002ee4 <HAL_RCC_OscConfig+0x26c>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4a7a      	ldr	r2, [pc, #488]	@ (8002ee4 <HAL_RCC_OscConfig+0x26c>)
 8002cfc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002d00:	6013      	str	r3, [r2, #0]
 8002d02:	4b78      	ldr	r3, [pc, #480]	@ (8002ee4 <HAL_RCC_OscConfig+0x26c>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4a77      	ldr	r2, [pc, #476]	@ (8002ee4 <HAL_RCC_OscConfig+0x26c>)
 8002d08:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002d0c:	6013      	str	r3, [r2, #0]
 8002d0e:	e01d      	b.n	8002d4c <HAL_RCC_OscConfig+0xd4>
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002d18:	d10c      	bne.n	8002d34 <HAL_RCC_OscConfig+0xbc>
 8002d1a:	4b72      	ldr	r3, [pc, #456]	@ (8002ee4 <HAL_RCC_OscConfig+0x26c>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4a71      	ldr	r2, [pc, #452]	@ (8002ee4 <HAL_RCC_OscConfig+0x26c>)
 8002d20:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002d24:	6013      	str	r3, [r2, #0]
 8002d26:	4b6f      	ldr	r3, [pc, #444]	@ (8002ee4 <HAL_RCC_OscConfig+0x26c>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4a6e      	ldr	r2, [pc, #440]	@ (8002ee4 <HAL_RCC_OscConfig+0x26c>)
 8002d2c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d30:	6013      	str	r3, [r2, #0]
 8002d32:	e00b      	b.n	8002d4c <HAL_RCC_OscConfig+0xd4>
 8002d34:	4b6b      	ldr	r3, [pc, #428]	@ (8002ee4 <HAL_RCC_OscConfig+0x26c>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4a6a      	ldr	r2, [pc, #424]	@ (8002ee4 <HAL_RCC_OscConfig+0x26c>)
 8002d3a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002d3e:	6013      	str	r3, [r2, #0]
 8002d40:	4b68      	ldr	r3, [pc, #416]	@ (8002ee4 <HAL_RCC_OscConfig+0x26c>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4a67      	ldr	r2, [pc, #412]	@ (8002ee4 <HAL_RCC_OscConfig+0x26c>)
 8002d46:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002d4a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d013      	beq.n	8002d7c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d54:	f7fe ff7c 	bl	8001c50 <HAL_GetTick>
 8002d58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d5a:	e008      	b.n	8002d6e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d5c:	f7fe ff78 	bl	8001c50 <HAL_GetTick>
 8002d60:	4602      	mov	r2, r0
 8002d62:	693b      	ldr	r3, [r7, #16]
 8002d64:	1ad3      	subs	r3, r2, r3
 8002d66:	2b64      	cmp	r3, #100	@ 0x64
 8002d68:	d901      	bls.n	8002d6e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002d6a:	2303      	movs	r3, #3
 8002d6c:	e200      	b.n	8003170 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d6e:	4b5d      	ldr	r3, [pc, #372]	@ (8002ee4 <HAL_RCC_OscConfig+0x26c>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d0f0      	beq.n	8002d5c <HAL_RCC_OscConfig+0xe4>
 8002d7a:	e014      	b.n	8002da6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d7c:	f7fe ff68 	bl	8001c50 <HAL_GetTick>
 8002d80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d82:	e008      	b.n	8002d96 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d84:	f7fe ff64 	bl	8001c50 <HAL_GetTick>
 8002d88:	4602      	mov	r2, r0
 8002d8a:	693b      	ldr	r3, [r7, #16]
 8002d8c:	1ad3      	subs	r3, r2, r3
 8002d8e:	2b64      	cmp	r3, #100	@ 0x64
 8002d90:	d901      	bls.n	8002d96 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002d92:	2303      	movs	r3, #3
 8002d94:	e1ec      	b.n	8003170 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d96:	4b53      	ldr	r3, [pc, #332]	@ (8002ee4 <HAL_RCC_OscConfig+0x26c>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d1f0      	bne.n	8002d84 <HAL_RCC_OscConfig+0x10c>
 8002da2:	e000      	b.n	8002da6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002da4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f003 0302 	and.w	r3, r3, #2
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d063      	beq.n	8002e7a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002db2:	4b4c      	ldr	r3, [pc, #304]	@ (8002ee4 <HAL_RCC_OscConfig+0x26c>)
 8002db4:	685b      	ldr	r3, [r3, #4]
 8002db6:	f003 030c 	and.w	r3, r3, #12
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d00b      	beq.n	8002dd6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002dbe:	4b49      	ldr	r3, [pc, #292]	@ (8002ee4 <HAL_RCC_OscConfig+0x26c>)
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	f003 030c 	and.w	r3, r3, #12
 8002dc6:	2b08      	cmp	r3, #8
 8002dc8:	d11c      	bne.n	8002e04 <HAL_RCC_OscConfig+0x18c>
 8002dca:	4b46      	ldr	r3, [pc, #280]	@ (8002ee4 <HAL_RCC_OscConfig+0x26c>)
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d116      	bne.n	8002e04 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002dd6:	4b43      	ldr	r3, [pc, #268]	@ (8002ee4 <HAL_RCC_OscConfig+0x26c>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f003 0302 	and.w	r3, r3, #2
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d005      	beq.n	8002dee <HAL_RCC_OscConfig+0x176>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	691b      	ldr	r3, [r3, #16]
 8002de6:	2b01      	cmp	r3, #1
 8002de8:	d001      	beq.n	8002dee <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002dea:	2301      	movs	r3, #1
 8002dec:	e1c0      	b.n	8003170 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dee:	4b3d      	ldr	r3, [pc, #244]	@ (8002ee4 <HAL_RCC_OscConfig+0x26c>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	695b      	ldr	r3, [r3, #20]
 8002dfa:	00db      	lsls	r3, r3, #3
 8002dfc:	4939      	ldr	r1, [pc, #228]	@ (8002ee4 <HAL_RCC_OscConfig+0x26c>)
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e02:	e03a      	b.n	8002e7a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	691b      	ldr	r3, [r3, #16]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d020      	beq.n	8002e4e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e0c:	4b36      	ldr	r3, [pc, #216]	@ (8002ee8 <HAL_RCC_OscConfig+0x270>)
 8002e0e:	2201      	movs	r2, #1
 8002e10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e12:	f7fe ff1d 	bl	8001c50 <HAL_GetTick>
 8002e16:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e18:	e008      	b.n	8002e2c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e1a:	f7fe ff19 	bl	8001c50 <HAL_GetTick>
 8002e1e:	4602      	mov	r2, r0
 8002e20:	693b      	ldr	r3, [r7, #16]
 8002e22:	1ad3      	subs	r3, r2, r3
 8002e24:	2b02      	cmp	r3, #2
 8002e26:	d901      	bls.n	8002e2c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002e28:	2303      	movs	r3, #3
 8002e2a:	e1a1      	b.n	8003170 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e2c:	4b2d      	ldr	r3, [pc, #180]	@ (8002ee4 <HAL_RCC_OscConfig+0x26c>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f003 0302 	and.w	r3, r3, #2
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d0f0      	beq.n	8002e1a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e38:	4b2a      	ldr	r3, [pc, #168]	@ (8002ee4 <HAL_RCC_OscConfig+0x26c>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	695b      	ldr	r3, [r3, #20]
 8002e44:	00db      	lsls	r3, r3, #3
 8002e46:	4927      	ldr	r1, [pc, #156]	@ (8002ee4 <HAL_RCC_OscConfig+0x26c>)
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	600b      	str	r3, [r1, #0]
 8002e4c:	e015      	b.n	8002e7a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e4e:	4b26      	ldr	r3, [pc, #152]	@ (8002ee8 <HAL_RCC_OscConfig+0x270>)
 8002e50:	2200      	movs	r2, #0
 8002e52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e54:	f7fe fefc 	bl	8001c50 <HAL_GetTick>
 8002e58:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e5a:	e008      	b.n	8002e6e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e5c:	f7fe fef8 	bl	8001c50 <HAL_GetTick>
 8002e60:	4602      	mov	r2, r0
 8002e62:	693b      	ldr	r3, [r7, #16]
 8002e64:	1ad3      	subs	r3, r2, r3
 8002e66:	2b02      	cmp	r3, #2
 8002e68:	d901      	bls.n	8002e6e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002e6a:	2303      	movs	r3, #3
 8002e6c:	e180      	b.n	8003170 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e6e:	4b1d      	ldr	r3, [pc, #116]	@ (8002ee4 <HAL_RCC_OscConfig+0x26c>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f003 0302 	and.w	r3, r3, #2
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d1f0      	bne.n	8002e5c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f003 0308 	and.w	r3, r3, #8
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d03a      	beq.n	8002efc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	699b      	ldr	r3, [r3, #24]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d019      	beq.n	8002ec2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e8e:	4b17      	ldr	r3, [pc, #92]	@ (8002eec <HAL_RCC_OscConfig+0x274>)
 8002e90:	2201      	movs	r2, #1
 8002e92:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e94:	f7fe fedc 	bl	8001c50 <HAL_GetTick>
 8002e98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e9a:	e008      	b.n	8002eae <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e9c:	f7fe fed8 	bl	8001c50 <HAL_GetTick>
 8002ea0:	4602      	mov	r2, r0
 8002ea2:	693b      	ldr	r3, [r7, #16]
 8002ea4:	1ad3      	subs	r3, r2, r3
 8002ea6:	2b02      	cmp	r3, #2
 8002ea8:	d901      	bls.n	8002eae <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002eaa:	2303      	movs	r3, #3
 8002eac:	e160      	b.n	8003170 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002eae:	4b0d      	ldr	r3, [pc, #52]	@ (8002ee4 <HAL_RCC_OscConfig+0x26c>)
 8002eb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eb2:	f003 0302 	and.w	r3, r3, #2
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d0f0      	beq.n	8002e9c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002eba:	2001      	movs	r0, #1
 8002ebc:	f000 face 	bl	800345c <RCC_Delay>
 8002ec0:	e01c      	b.n	8002efc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ec2:	4b0a      	ldr	r3, [pc, #40]	@ (8002eec <HAL_RCC_OscConfig+0x274>)
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ec8:	f7fe fec2 	bl	8001c50 <HAL_GetTick>
 8002ecc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ece:	e00f      	b.n	8002ef0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ed0:	f7fe febe 	bl	8001c50 <HAL_GetTick>
 8002ed4:	4602      	mov	r2, r0
 8002ed6:	693b      	ldr	r3, [r7, #16]
 8002ed8:	1ad3      	subs	r3, r2, r3
 8002eda:	2b02      	cmp	r3, #2
 8002edc:	d908      	bls.n	8002ef0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002ede:	2303      	movs	r3, #3
 8002ee0:	e146      	b.n	8003170 <HAL_RCC_OscConfig+0x4f8>
 8002ee2:	bf00      	nop
 8002ee4:	40021000 	.word	0x40021000
 8002ee8:	42420000 	.word	0x42420000
 8002eec:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ef0:	4b92      	ldr	r3, [pc, #584]	@ (800313c <HAL_RCC_OscConfig+0x4c4>)
 8002ef2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ef4:	f003 0302 	and.w	r3, r3, #2
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d1e9      	bne.n	8002ed0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f003 0304 	and.w	r3, r3, #4
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	f000 80a6 	beq.w	8003056 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f0e:	4b8b      	ldr	r3, [pc, #556]	@ (800313c <HAL_RCC_OscConfig+0x4c4>)
 8002f10:	69db      	ldr	r3, [r3, #28]
 8002f12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d10d      	bne.n	8002f36 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f1a:	4b88      	ldr	r3, [pc, #544]	@ (800313c <HAL_RCC_OscConfig+0x4c4>)
 8002f1c:	69db      	ldr	r3, [r3, #28]
 8002f1e:	4a87      	ldr	r2, [pc, #540]	@ (800313c <HAL_RCC_OscConfig+0x4c4>)
 8002f20:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f24:	61d3      	str	r3, [r2, #28]
 8002f26:	4b85      	ldr	r3, [pc, #532]	@ (800313c <HAL_RCC_OscConfig+0x4c4>)
 8002f28:	69db      	ldr	r3, [r3, #28]
 8002f2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f2e:	60bb      	str	r3, [r7, #8]
 8002f30:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f32:	2301      	movs	r3, #1
 8002f34:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f36:	4b82      	ldr	r3, [pc, #520]	@ (8003140 <HAL_RCC_OscConfig+0x4c8>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d118      	bne.n	8002f74 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f42:	4b7f      	ldr	r3, [pc, #508]	@ (8003140 <HAL_RCC_OscConfig+0x4c8>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4a7e      	ldr	r2, [pc, #504]	@ (8003140 <HAL_RCC_OscConfig+0x4c8>)
 8002f48:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f4c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f4e:	f7fe fe7f 	bl	8001c50 <HAL_GetTick>
 8002f52:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f54:	e008      	b.n	8002f68 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f56:	f7fe fe7b 	bl	8001c50 <HAL_GetTick>
 8002f5a:	4602      	mov	r2, r0
 8002f5c:	693b      	ldr	r3, [r7, #16]
 8002f5e:	1ad3      	subs	r3, r2, r3
 8002f60:	2b64      	cmp	r3, #100	@ 0x64
 8002f62:	d901      	bls.n	8002f68 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002f64:	2303      	movs	r3, #3
 8002f66:	e103      	b.n	8003170 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f68:	4b75      	ldr	r3, [pc, #468]	@ (8003140 <HAL_RCC_OscConfig+0x4c8>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d0f0      	beq.n	8002f56 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	68db      	ldr	r3, [r3, #12]
 8002f78:	2b01      	cmp	r3, #1
 8002f7a:	d106      	bne.n	8002f8a <HAL_RCC_OscConfig+0x312>
 8002f7c:	4b6f      	ldr	r3, [pc, #444]	@ (800313c <HAL_RCC_OscConfig+0x4c4>)
 8002f7e:	6a1b      	ldr	r3, [r3, #32]
 8002f80:	4a6e      	ldr	r2, [pc, #440]	@ (800313c <HAL_RCC_OscConfig+0x4c4>)
 8002f82:	f043 0301 	orr.w	r3, r3, #1
 8002f86:	6213      	str	r3, [r2, #32]
 8002f88:	e02d      	b.n	8002fe6 <HAL_RCC_OscConfig+0x36e>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	68db      	ldr	r3, [r3, #12]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d10c      	bne.n	8002fac <HAL_RCC_OscConfig+0x334>
 8002f92:	4b6a      	ldr	r3, [pc, #424]	@ (800313c <HAL_RCC_OscConfig+0x4c4>)
 8002f94:	6a1b      	ldr	r3, [r3, #32]
 8002f96:	4a69      	ldr	r2, [pc, #420]	@ (800313c <HAL_RCC_OscConfig+0x4c4>)
 8002f98:	f023 0301 	bic.w	r3, r3, #1
 8002f9c:	6213      	str	r3, [r2, #32]
 8002f9e:	4b67      	ldr	r3, [pc, #412]	@ (800313c <HAL_RCC_OscConfig+0x4c4>)
 8002fa0:	6a1b      	ldr	r3, [r3, #32]
 8002fa2:	4a66      	ldr	r2, [pc, #408]	@ (800313c <HAL_RCC_OscConfig+0x4c4>)
 8002fa4:	f023 0304 	bic.w	r3, r3, #4
 8002fa8:	6213      	str	r3, [r2, #32]
 8002faa:	e01c      	b.n	8002fe6 <HAL_RCC_OscConfig+0x36e>
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	68db      	ldr	r3, [r3, #12]
 8002fb0:	2b05      	cmp	r3, #5
 8002fb2:	d10c      	bne.n	8002fce <HAL_RCC_OscConfig+0x356>
 8002fb4:	4b61      	ldr	r3, [pc, #388]	@ (800313c <HAL_RCC_OscConfig+0x4c4>)
 8002fb6:	6a1b      	ldr	r3, [r3, #32]
 8002fb8:	4a60      	ldr	r2, [pc, #384]	@ (800313c <HAL_RCC_OscConfig+0x4c4>)
 8002fba:	f043 0304 	orr.w	r3, r3, #4
 8002fbe:	6213      	str	r3, [r2, #32]
 8002fc0:	4b5e      	ldr	r3, [pc, #376]	@ (800313c <HAL_RCC_OscConfig+0x4c4>)
 8002fc2:	6a1b      	ldr	r3, [r3, #32]
 8002fc4:	4a5d      	ldr	r2, [pc, #372]	@ (800313c <HAL_RCC_OscConfig+0x4c4>)
 8002fc6:	f043 0301 	orr.w	r3, r3, #1
 8002fca:	6213      	str	r3, [r2, #32]
 8002fcc:	e00b      	b.n	8002fe6 <HAL_RCC_OscConfig+0x36e>
 8002fce:	4b5b      	ldr	r3, [pc, #364]	@ (800313c <HAL_RCC_OscConfig+0x4c4>)
 8002fd0:	6a1b      	ldr	r3, [r3, #32]
 8002fd2:	4a5a      	ldr	r2, [pc, #360]	@ (800313c <HAL_RCC_OscConfig+0x4c4>)
 8002fd4:	f023 0301 	bic.w	r3, r3, #1
 8002fd8:	6213      	str	r3, [r2, #32]
 8002fda:	4b58      	ldr	r3, [pc, #352]	@ (800313c <HAL_RCC_OscConfig+0x4c4>)
 8002fdc:	6a1b      	ldr	r3, [r3, #32]
 8002fde:	4a57      	ldr	r2, [pc, #348]	@ (800313c <HAL_RCC_OscConfig+0x4c4>)
 8002fe0:	f023 0304 	bic.w	r3, r3, #4
 8002fe4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	68db      	ldr	r3, [r3, #12]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d015      	beq.n	800301a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fee:	f7fe fe2f 	bl	8001c50 <HAL_GetTick>
 8002ff2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ff4:	e00a      	b.n	800300c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ff6:	f7fe fe2b 	bl	8001c50 <HAL_GetTick>
 8002ffa:	4602      	mov	r2, r0
 8002ffc:	693b      	ldr	r3, [r7, #16]
 8002ffe:	1ad3      	subs	r3, r2, r3
 8003000:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003004:	4293      	cmp	r3, r2
 8003006:	d901      	bls.n	800300c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003008:	2303      	movs	r3, #3
 800300a:	e0b1      	b.n	8003170 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800300c:	4b4b      	ldr	r3, [pc, #300]	@ (800313c <HAL_RCC_OscConfig+0x4c4>)
 800300e:	6a1b      	ldr	r3, [r3, #32]
 8003010:	f003 0302 	and.w	r3, r3, #2
 8003014:	2b00      	cmp	r3, #0
 8003016:	d0ee      	beq.n	8002ff6 <HAL_RCC_OscConfig+0x37e>
 8003018:	e014      	b.n	8003044 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800301a:	f7fe fe19 	bl	8001c50 <HAL_GetTick>
 800301e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003020:	e00a      	b.n	8003038 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003022:	f7fe fe15 	bl	8001c50 <HAL_GetTick>
 8003026:	4602      	mov	r2, r0
 8003028:	693b      	ldr	r3, [r7, #16]
 800302a:	1ad3      	subs	r3, r2, r3
 800302c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003030:	4293      	cmp	r3, r2
 8003032:	d901      	bls.n	8003038 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003034:	2303      	movs	r3, #3
 8003036:	e09b      	b.n	8003170 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003038:	4b40      	ldr	r3, [pc, #256]	@ (800313c <HAL_RCC_OscConfig+0x4c4>)
 800303a:	6a1b      	ldr	r3, [r3, #32]
 800303c:	f003 0302 	and.w	r3, r3, #2
 8003040:	2b00      	cmp	r3, #0
 8003042:	d1ee      	bne.n	8003022 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003044:	7dfb      	ldrb	r3, [r7, #23]
 8003046:	2b01      	cmp	r3, #1
 8003048:	d105      	bne.n	8003056 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800304a:	4b3c      	ldr	r3, [pc, #240]	@ (800313c <HAL_RCC_OscConfig+0x4c4>)
 800304c:	69db      	ldr	r3, [r3, #28]
 800304e:	4a3b      	ldr	r2, [pc, #236]	@ (800313c <HAL_RCC_OscConfig+0x4c4>)
 8003050:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003054:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	69db      	ldr	r3, [r3, #28]
 800305a:	2b00      	cmp	r3, #0
 800305c:	f000 8087 	beq.w	800316e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003060:	4b36      	ldr	r3, [pc, #216]	@ (800313c <HAL_RCC_OscConfig+0x4c4>)
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	f003 030c 	and.w	r3, r3, #12
 8003068:	2b08      	cmp	r3, #8
 800306a:	d061      	beq.n	8003130 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	69db      	ldr	r3, [r3, #28]
 8003070:	2b02      	cmp	r3, #2
 8003072:	d146      	bne.n	8003102 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003074:	4b33      	ldr	r3, [pc, #204]	@ (8003144 <HAL_RCC_OscConfig+0x4cc>)
 8003076:	2200      	movs	r2, #0
 8003078:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800307a:	f7fe fde9 	bl	8001c50 <HAL_GetTick>
 800307e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003080:	e008      	b.n	8003094 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003082:	f7fe fde5 	bl	8001c50 <HAL_GetTick>
 8003086:	4602      	mov	r2, r0
 8003088:	693b      	ldr	r3, [r7, #16]
 800308a:	1ad3      	subs	r3, r2, r3
 800308c:	2b02      	cmp	r3, #2
 800308e:	d901      	bls.n	8003094 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003090:	2303      	movs	r3, #3
 8003092:	e06d      	b.n	8003170 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003094:	4b29      	ldr	r3, [pc, #164]	@ (800313c <HAL_RCC_OscConfig+0x4c4>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800309c:	2b00      	cmp	r3, #0
 800309e:	d1f0      	bne.n	8003082 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6a1b      	ldr	r3, [r3, #32]
 80030a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80030a8:	d108      	bne.n	80030bc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80030aa:	4b24      	ldr	r3, [pc, #144]	@ (800313c <HAL_RCC_OscConfig+0x4c4>)
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	689b      	ldr	r3, [r3, #8]
 80030b6:	4921      	ldr	r1, [pc, #132]	@ (800313c <HAL_RCC_OscConfig+0x4c4>)
 80030b8:	4313      	orrs	r3, r2
 80030ba:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80030bc:	4b1f      	ldr	r3, [pc, #124]	@ (800313c <HAL_RCC_OscConfig+0x4c4>)
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6a19      	ldr	r1, [r3, #32]
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030cc:	430b      	orrs	r3, r1
 80030ce:	491b      	ldr	r1, [pc, #108]	@ (800313c <HAL_RCC_OscConfig+0x4c4>)
 80030d0:	4313      	orrs	r3, r2
 80030d2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80030d4:	4b1b      	ldr	r3, [pc, #108]	@ (8003144 <HAL_RCC_OscConfig+0x4cc>)
 80030d6:	2201      	movs	r2, #1
 80030d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030da:	f7fe fdb9 	bl	8001c50 <HAL_GetTick>
 80030de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80030e0:	e008      	b.n	80030f4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030e2:	f7fe fdb5 	bl	8001c50 <HAL_GetTick>
 80030e6:	4602      	mov	r2, r0
 80030e8:	693b      	ldr	r3, [r7, #16]
 80030ea:	1ad3      	subs	r3, r2, r3
 80030ec:	2b02      	cmp	r3, #2
 80030ee:	d901      	bls.n	80030f4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80030f0:	2303      	movs	r3, #3
 80030f2:	e03d      	b.n	8003170 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80030f4:	4b11      	ldr	r3, [pc, #68]	@ (800313c <HAL_RCC_OscConfig+0x4c4>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d0f0      	beq.n	80030e2 <HAL_RCC_OscConfig+0x46a>
 8003100:	e035      	b.n	800316e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003102:	4b10      	ldr	r3, [pc, #64]	@ (8003144 <HAL_RCC_OscConfig+0x4cc>)
 8003104:	2200      	movs	r2, #0
 8003106:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003108:	f7fe fda2 	bl	8001c50 <HAL_GetTick>
 800310c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800310e:	e008      	b.n	8003122 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003110:	f7fe fd9e 	bl	8001c50 <HAL_GetTick>
 8003114:	4602      	mov	r2, r0
 8003116:	693b      	ldr	r3, [r7, #16]
 8003118:	1ad3      	subs	r3, r2, r3
 800311a:	2b02      	cmp	r3, #2
 800311c:	d901      	bls.n	8003122 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800311e:	2303      	movs	r3, #3
 8003120:	e026      	b.n	8003170 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003122:	4b06      	ldr	r3, [pc, #24]	@ (800313c <HAL_RCC_OscConfig+0x4c4>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800312a:	2b00      	cmp	r3, #0
 800312c:	d1f0      	bne.n	8003110 <HAL_RCC_OscConfig+0x498>
 800312e:	e01e      	b.n	800316e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	69db      	ldr	r3, [r3, #28]
 8003134:	2b01      	cmp	r3, #1
 8003136:	d107      	bne.n	8003148 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003138:	2301      	movs	r3, #1
 800313a:	e019      	b.n	8003170 <HAL_RCC_OscConfig+0x4f8>
 800313c:	40021000 	.word	0x40021000
 8003140:	40007000 	.word	0x40007000
 8003144:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003148:	4b0b      	ldr	r3, [pc, #44]	@ (8003178 <HAL_RCC_OscConfig+0x500>)
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6a1b      	ldr	r3, [r3, #32]
 8003158:	429a      	cmp	r2, r3
 800315a:	d106      	bne.n	800316a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003166:	429a      	cmp	r2, r3
 8003168:	d001      	beq.n	800316e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800316a:	2301      	movs	r3, #1
 800316c:	e000      	b.n	8003170 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800316e:	2300      	movs	r3, #0
}
 8003170:	4618      	mov	r0, r3
 8003172:	3718      	adds	r7, #24
 8003174:	46bd      	mov	sp, r7
 8003176:	bd80      	pop	{r7, pc}
 8003178:	40021000 	.word	0x40021000

0800317c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b084      	sub	sp, #16
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
 8003184:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2b00      	cmp	r3, #0
 800318a:	d101      	bne.n	8003190 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800318c:	2301      	movs	r3, #1
 800318e:	e0d0      	b.n	8003332 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003190:	4b6a      	ldr	r3, [pc, #424]	@ (800333c <HAL_RCC_ClockConfig+0x1c0>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f003 0307 	and.w	r3, r3, #7
 8003198:	683a      	ldr	r2, [r7, #0]
 800319a:	429a      	cmp	r2, r3
 800319c:	d910      	bls.n	80031c0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800319e:	4b67      	ldr	r3, [pc, #412]	@ (800333c <HAL_RCC_ClockConfig+0x1c0>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f023 0207 	bic.w	r2, r3, #7
 80031a6:	4965      	ldr	r1, [pc, #404]	@ (800333c <HAL_RCC_ClockConfig+0x1c0>)
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	4313      	orrs	r3, r2
 80031ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031ae:	4b63      	ldr	r3, [pc, #396]	@ (800333c <HAL_RCC_ClockConfig+0x1c0>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f003 0307 	and.w	r3, r3, #7
 80031b6:	683a      	ldr	r2, [r7, #0]
 80031b8:	429a      	cmp	r2, r3
 80031ba:	d001      	beq.n	80031c0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80031bc:	2301      	movs	r3, #1
 80031be:	e0b8      	b.n	8003332 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f003 0302 	and.w	r3, r3, #2
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d020      	beq.n	800320e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f003 0304 	and.w	r3, r3, #4
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d005      	beq.n	80031e4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80031d8:	4b59      	ldr	r3, [pc, #356]	@ (8003340 <HAL_RCC_ClockConfig+0x1c4>)
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	4a58      	ldr	r2, [pc, #352]	@ (8003340 <HAL_RCC_ClockConfig+0x1c4>)
 80031de:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80031e2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f003 0308 	and.w	r3, r3, #8
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d005      	beq.n	80031fc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80031f0:	4b53      	ldr	r3, [pc, #332]	@ (8003340 <HAL_RCC_ClockConfig+0x1c4>)
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	4a52      	ldr	r2, [pc, #328]	@ (8003340 <HAL_RCC_ClockConfig+0x1c4>)
 80031f6:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80031fa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031fc:	4b50      	ldr	r3, [pc, #320]	@ (8003340 <HAL_RCC_ClockConfig+0x1c4>)
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	689b      	ldr	r3, [r3, #8]
 8003208:	494d      	ldr	r1, [pc, #308]	@ (8003340 <HAL_RCC_ClockConfig+0x1c4>)
 800320a:	4313      	orrs	r3, r2
 800320c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f003 0301 	and.w	r3, r3, #1
 8003216:	2b00      	cmp	r3, #0
 8003218:	d040      	beq.n	800329c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	2b01      	cmp	r3, #1
 8003220:	d107      	bne.n	8003232 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003222:	4b47      	ldr	r3, [pc, #284]	@ (8003340 <HAL_RCC_ClockConfig+0x1c4>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800322a:	2b00      	cmp	r3, #0
 800322c:	d115      	bne.n	800325a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800322e:	2301      	movs	r3, #1
 8003230:	e07f      	b.n	8003332 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	2b02      	cmp	r3, #2
 8003238:	d107      	bne.n	800324a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800323a:	4b41      	ldr	r3, [pc, #260]	@ (8003340 <HAL_RCC_ClockConfig+0x1c4>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003242:	2b00      	cmp	r3, #0
 8003244:	d109      	bne.n	800325a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003246:	2301      	movs	r3, #1
 8003248:	e073      	b.n	8003332 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800324a:	4b3d      	ldr	r3, [pc, #244]	@ (8003340 <HAL_RCC_ClockConfig+0x1c4>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f003 0302 	and.w	r3, r3, #2
 8003252:	2b00      	cmp	r3, #0
 8003254:	d101      	bne.n	800325a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003256:	2301      	movs	r3, #1
 8003258:	e06b      	b.n	8003332 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800325a:	4b39      	ldr	r3, [pc, #228]	@ (8003340 <HAL_RCC_ClockConfig+0x1c4>)
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	f023 0203 	bic.w	r2, r3, #3
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	4936      	ldr	r1, [pc, #216]	@ (8003340 <HAL_RCC_ClockConfig+0x1c4>)
 8003268:	4313      	orrs	r3, r2
 800326a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800326c:	f7fe fcf0 	bl	8001c50 <HAL_GetTick>
 8003270:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003272:	e00a      	b.n	800328a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003274:	f7fe fcec 	bl	8001c50 <HAL_GetTick>
 8003278:	4602      	mov	r2, r0
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	1ad3      	subs	r3, r2, r3
 800327e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003282:	4293      	cmp	r3, r2
 8003284:	d901      	bls.n	800328a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003286:	2303      	movs	r3, #3
 8003288:	e053      	b.n	8003332 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800328a:	4b2d      	ldr	r3, [pc, #180]	@ (8003340 <HAL_RCC_ClockConfig+0x1c4>)
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	f003 020c 	and.w	r2, r3, #12
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	009b      	lsls	r3, r3, #2
 8003298:	429a      	cmp	r2, r3
 800329a:	d1eb      	bne.n	8003274 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800329c:	4b27      	ldr	r3, [pc, #156]	@ (800333c <HAL_RCC_ClockConfig+0x1c0>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f003 0307 	and.w	r3, r3, #7
 80032a4:	683a      	ldr	r2, [r7, #0]
 80032a6:	429a      	cmp	r2, r3
 80032a8:	d210      	bcs.n	80032cc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032aa:	4b24      	ldr	r3, [pc, #144]	@ (800333c <HAL_RCC_ClockConfig+0x1c0>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f023 0207 	bic.w	r2, r3, #7
 80032b2:	4922      	ldr	r1, [pc, #136]	@ (800333c <HAL_RCC_ClockConfig+0x1c0>)
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	4313      	orrs	r3, r2
 80032b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032ba:	4b20      	ldr	r3, [pc, #128]	@ (800333c <HAL_RCC_ClockConfig+0x1c0>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f003 0307 	and.w	r3, r3, #7
 80032c2:	683a      	ldr	r2, [r7, #0]
 80032c4:	429a      	cmp	r2, r3
 80032c6:	d001      	beq.n	80032cc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80032c8:	2301      	movs	r3, #1
 80032ca:	e032      	b.n	8003332 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f003 0304 	and.w	r3, r3, #4
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d008      	beq.n	80032ea <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80032d8:	4b19      	ldr	r3, [pc, #100]	@ (8003340 <HAL_RCC_ClockConfig+0x1c4>)
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	68db      	ldr	r3, [r3, #12]
 80032e4:	4916      	ldr	r1, [pc, #88]	@ (8003340 <HAL_RCC_ClockConfig+0x1c4>)
 80032e6:	4313      	orrs	r3, r2
 80032e8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f003 0308 	and.w	r3, r3, #8
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d009      	beq.n	800330a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80032f6:	4b12      	ldr	r3, [pc, #72]	@ (8003340 <HAL_RCC_ClockConfig+0x1c4>)
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	691b      	ldr	r3, [r3, #16]
 8003302:	00db      	lsls	r3, r3, #3
 8003304:	490e      	ldr	r1, [pc, #56]	@ (8003340 <HAL_RCC_ClockConfig+0x1c4>)
 8003306:	4313      	orrs	r3, r2
 8003308:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800330a:	f000 f821 	bl	8003350 <HAL_RCC_GetSysClockFreq>
 800330e:	4602      	mov	r2, r0
 8003310:	4b0b      	ldr	r3, [pc, #44]	@ (8003340 <HAL_RCC_ClockConfig+0x1c4>)
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	091b      	lsrs	r3, r3, #4
 8003316:	f003 030f 	and.w	r3, r3, #15
 800331a:	490a      	ldr	r1, [pc, #40]	@ (8003344 <HAL_RCC_ClockConfig+0x1c8>)
 800331c:	5ccb      	ldrb	r3, [r1, r3]
 800331e:	fa22 f303 	lsr.w	r3, r2, r3
 8003322:	4a09      	ldr	r2, [pc, #36]	@ (8003348 <HAL_RCC_ClockConfig+0x1cc>)
 8003324:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003326:	4b09      	ldr	r3, [pc, #36]	@ (800334c <HAL_RCC_ClockConfig+0x1d0>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4618      	mov	r0, r3
 800332c:	f7fe fc4e 	bl	8001bcc <HAL_InitTick>

  return HAL_OK;
 8003330:	2300      	movs	r3, #0
}
 8003332:	4618      	mov	r0, r3
 8003334:	3710      	adds	r7, #16
 8003336:	46bd      	mov	sp, r7
 8003338:	bd80      	pop	{r7, pc}
 800333a:	bf00      	nop
 800333c:	40022000 	.word	0x40022000
 8003340:	40021000 	.word	0x40021000
 8003344:	080093f8 	.word	0x080093f8
 8003348:	20000008 	.word	0x20000008
 800334c:	2000000c 	.word	0x2000000c

08003350 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003350:	b480      	push	{r7}
 8003352:	b087      	sub	sp, #28
 8003354:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003356:	2300      	movs	r3, #0
 8003358:	60fb      	str	r3, [r7, #12]
 800335a:	2300      	movs	r3, #0
 800335c:	60bb      	str	r3, [r7, #8]
 800335e:	2300      	movs	r3, #0
 8003360:	617b      	str	r3, [r7, #20]
 8003362:	2300      	movs	r3, #0
 8003364:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003366:	2300      	movs	r3, #0
 8003368:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800336a:	4b1e      	ldr	r3, [pc, #120]	@ (80033e4 <HAL_RCC_GetSysClockFreq+0x94>)
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	f003 030c 	and.w	r3, r3, #12
 8003376:	2b04      	cmp	r3, #4
 8003378:	d002      	beq.n	8003380 <HAL_RCC_GetSysClockFreq+0x30>
 800337a:	2b08      	cmp	r3, #8
 800337c:	d003      	beq.n	8003386 <HAL_RCC_GetSysClockFreq+0x36>
 800337e:	e027      	b.n	80033d0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003380:	4b19      	ldr	r3, [pc, #100]	@ (80033e8 <HAL_RCC_GetSysClockFreq+0x98>)
 8003382:	613b      	str	r3, [r7, #16]
      break;
 8003384:	e027      	b.n	80033d6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	0c9b      	lsrs	r3, r3, #18
 800338a:	f003 030f 	and.w	r3, r3, #15
 800338e:	4a17      	ldr	r2, [pc, #92]	@ (80033ec <HAL_RCC_GetSysClockFreq+0x9c>)
 8003390:	5cd3      	ldrb	r3, [r2, r3]
 8003392:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800339a:	2b00      	cmp	r3, #0
 800339c:	d010      	beq.n	80033c0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800339e:	4b11      	ldr	r3, [pc, #68]	@ (80033e4 <HAL_RCC_GetSysClockFreq+0x94>)
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	0c5b      	lsrs	r3, r3, #17
 80033a4:	f003 0301 	and.w	r3, r3, #1
 80033a8:	4a11      	ldr	r2, [pc, #68]	@ (80033f0 <HAL_RCC_GetSysClockFreq+0xa0>)
 80033aa:	5cd3      	ldrb	r3, [r2, r3]
 80033ac:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	4a0d      	ldr	r2, [pc, #52]	@ (80033e8 <HAL_RCC_GetSysClockFreq+0x98>)
 80033b2:	fb03 f202 	mul.w	r2, r3, r2
 80033b6:	68bb      	ldr	r3, [r7, #8]
 80033b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80033bc:	617b      	str	r3, [r7, #20]
 80033be:	e004      	b.n	80033ca <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	4a0c      	ldr	r2, [pc, #48]	@ (80033f4 <HAL_RCC_GetSysClockFreq+0xa4>)
 80033c4:	fb02 f303 	mul.w	r3, r2, r3
 80033c8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80033ca:	697b      	ldr	r3, [r7, #20]
 80033cc:	613b      	str	r3, [r7, #16]
      break;
 80033ce:	e002      	b.n	80033d6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80033d0:	4b05      	ldr	r3, [pc, #20]	@ (80033e8 <HAL_RCC_GetSysClockFreq+0x98>)
 80033d2:	613b      	str	r3, [r7, #16]
      break;
 80033d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80033d6:	693b      	ldr	r3, [r7, #16]
}
 80033d8:	4618      	mov	r0, r3
 80033da:	371c      	adds	r7, #28
 80033dc:	46bd      	mov	sp, r7
 80033de:	bc80      	pop	{r7}
 80033e0:	4770      	bx	lr
 80033e2:	bf00      	nop
 80033e4:	40021000 	.word	0x40021000
 80033e8:	007a1200 	.word	0x007a1200
 80033ec:	08009410 	.word	0x08009410
 80033f0:	08009420 	.word	0x08009420
 80033f4:	003d0900 	.word	0x003d0900

080033f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80033f8:	b480      	push	{r7}
 80033fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80033fc:	4b02      	ldr	r3, [pc, #8]	@ (8003408 <HAL_RCC_GetHCLKFreq+0x10>)
 80033fe:	681b      	ldr	r3, [r3, #0]
}
 8003400:	4618      	mov	r0, r3
 8003402:	46bd      	mov	sp, r7
 8003404:	bc80      	pop	{r7}
 8003406:	4770      	bx	lr
 8003408:	20000008 	.word	0x20000008

0800340c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003410:	f7ff fff2 	bl	80033f8 <HAL_RCC_GetHCLKFreq>
 8003414:	4602      	mov	r2, r0
 8003416:	4b05      	ldr	r3, [pc, #20]	@ (800342c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	0a1b      	lsrs	r3, r3, #8
 800341c:	f003 0307 	and.w	r3, r3, #7
 8003420:	4903      	ldr	r1, [pc, #12]	@ (8003430 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003422:	5ccb      	ldrb	r3, [r1, r3]
 8003424:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003428:	4618      	mov	r0, r3
 800342a:	bd80      	pop	{r7, pc}
 800342c:	40021000 	.word	0x40021000
 8003430:	08009408 	.word	0x08009408

08003434 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003438:	f7ff ffde 	bl	80033f8 <HAL_RCC_GetHCLKFreq>
 800343c:	4602      	mov	r2, r0
 800343e:	4b05      	ldr	r3, [pc, #20]	@ (8003454 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	0adb      	lsrs	r3, r3, #11
 8003444:	f003 0307 	and.w	r3, r3, #7
 8003448:	4903      	ldr	r1, [pc, #12]	@ (8003458 <HAL_RCC_GetPCLK2Freq+0x24>)
 800344a:	5ccb      	ldrb	r3, [r1, r3]
 800344c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003450:	4618      	mov	r0, r3
 8003452:	bd80      	pop	{r7, pc}
 8003454:	40021000 	.word	0x40021000
 8003458:	08009408 	.word	0x08009408

0800345c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800345c:	b480      	push	{r7}
 800345e:	b085      	sub	sp, #20
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003464:	4b0a      	ldr	r3, [pc, #40]	@ (8003490 <RCC_Delay+0x34>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4a0a      	ldr	r2, [pc, #40]	@ (8003494 <RCC_Delay+0x38>)
 800346a:	fba2 2303 	umull	r2, r3, r2, r3
 800346e:	0a5b      	lsrs	r3, r3, #9
 8003470:	687a      	ldr	r2, [r7, #4]
 8003472:	fb02 f303 	mul.w	r3, r2, r3
 8003476:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003478:	bf00      	nop
  }
  while (Delay --);
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	1e5a      	subs	r2, r3, #1
 800347e:	60fa      	str	r2, [r7, #12]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d1f9      	bne.n	8003478 <RCC_Delay+0x1c>
}
 8003484:	bf00      	nop
 8003486:	bf00      	nop
 8003488:	3714      	adds	r7, #20
 800348a:	46bd      	mov	sp, r7
 800348c:	bc80      	pop	{r7}
 800348e:	4770      	bx	lr
 8003490:	20000008 	.word	0x20000008
 8003494:	10624dd3 	.word	0x10624dd3

08003498 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b086      	sub	sp, #24
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80034a0:	2300      	movs	r3, #0
 80034a2:	613b      	str	r3, [r7, #16]
 80034a4:	2300      	movs	r3, #0
 80034a6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f003 0301 	and.w	r3, r3, #1
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d07d      	beq.n	80035b0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80034b4:	2300      	movs	r3, #0
 80034b6:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80034b8:	4b4f      	ldr	r3, [pc, #316]	@ (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034ba:	69db      	ldr	r3, [r3, #28]
 80034bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d10d      	bne.n	80034e0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034c4:	4b4c      	ldr	r3, [pc, #304]	@ (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034c6:	69db      	ldr	r3, [r3, #28]
 80034c8:	4a4b      	ldr	r2, [pc, #300]	@ (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034ca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80034ce:	61d3      	str	r3, [r2, #28]
 80034d0:	4b49      	ldr	r3, [pc, #292]	@ (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034d2:	69db      	ldr	r3, [r3, #28]
 80034d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80034d8:	60bb      	str	r3, [r7, #8]
 80034da:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80034dc:	2301      	movs	r3, #1
 80034de:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034e0:	4b46      	ldr	r3, [pc, #280]	@ (80035fc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d118      	bne.n	800351e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80034ec:	4b43      	ldr	r3, [pc, #268]	@ (80035fc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4a42      	ldr	r2, [pc, #264]	@ (80035fc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80034f2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80034f6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034f8:	f7fe fbaa 	bl	8001c50 <HAL_GetTick>
 80034fc:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034fe:	e008      	b.n	8003512 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003500:	f7fe fba6 	bl	8001c50 <HAL_GetTick>
 8003504:	4602      	mov	r2, r0
 8003506:	693b      	ldr	r3, [r7, #16]
 8003508:	1ad3      	subs	r3, r2, r3
 800350a:	2b64      	cmp	r3, #100	@ 0x64
 800350c:	d901      	bls.n	8003512 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800350e:	2303      	movs	r3, #3
 8003510:	e06d      	b.n	80035ee <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003512:	4b3a      	ldr	r3, [pc, #232]	@ (80035fc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800351a:	2b00      	cmp	r3, #0
 800351c:	d0f0      	beq.n	8003500 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800351e:	4b36      	ldr	r3, [pc, #216]	@ (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003520:	6a1b      	ldr	r3, [r3, #32]
 8003522:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003526:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d02e      	beq.n	800358c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	685b      	ldr	r3, [r3, #4]
 8003532:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003536:	68fa      	ldr	r2, [r7, #12]
 8003538:	429a      	cmp	r2, r3
 800353a:	d027      	beq.n	800358c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800353c:	4b2e      	ldr	r3, [pc, #184]	@ (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800353e:	6a1b      	ldr	r3, [r3, #32]
 8003540:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003544:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003546:	4b2e      	ldr	r3, [pc, #184]	@ (8003600 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003548:	2201      	movs	r2, #1
 800354a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800354c:	4b2c      	ldr	r3, [pc, #176]	@ (8003600 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800354e:	2200      	movs	r2, #0
 8003550:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003552:	4a29      	ldr	r2, [pc, #164]	@ (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	f003 0301 	and.w	r3, r3, #1
 800355e:	2b00      	cmp	r3, #0
 8003560:	d014      	beq.n	800358c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003562:	f7fe fb75 	bl	8001c50 <HAL_GetTick>
 8003566:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003568:	e00a      	b.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800356a:	f7fe fb71 	bl	8001c50 <HAL_GetTick>
 800356e:	4602      	mov	r2, r0
 8003570:	693b      	ldr	r3, [r7, #16]
 8003572:	1ad3      	subs	r3, r2, r3
 8003574:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003578:	4293      	cmp	r3, r2
 800357a:	d901      	bls.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800357c:	2303      	movs	r3, #3
 800357e:	e036      	b.n	80035ee <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003580:	4b1d      	ldr	r3, [pc, #116]	@ (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003582:	6a1b      	ldr	r3, [r3, #32]
 8003584:	f003 0302 	and.w	r3, r3, #2
 8003588:	2b00      	cmp	r3, #0
 800358a:	d0ee      	beq.n	800356a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800358c:	4b1a      	ldr	r3, [pc, #104]	@ (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800358e:	6a1b      	ldr	r3, [r3, #32]
 8003590:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	4917      	ldr	r1, [pc, #92]	@ (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800359a:	4313      	orrs	r3, r2
 800359c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800359e:	7dfb      	ldrb	r3, [r7, #23]
 80035a0:	2b01      	cmp	r3, #1
 80035a2:	d105      	bne.n	80035b0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035a4:	4b14      	ldr	r3, [pc, #80]	@ (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035a6:	69db      	ldr	r3, [r3, #28]
 80035a8:	4a13      	ldr	r2, [pc, #76]	@ (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035aa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80035ae:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f003 0302 	and.w	r3, r3, #2
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d008      	beq.n	80035ce <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80035bc:	4b0e      	ldr	r3, [pc, #56]	@ (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	689b      	ldr	r3, [r3, #8]
 80035c8:	490b      	ldr	r1, [pc, #44]	@ (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035ca:	4313      	orrs	r3, r2
 80035cc:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f003 0310 	and.w	r3, r3, #16
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d008      	beq.n	80035ec <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80035da:	4b07      	ldr	r3, [pc, #28]	@ (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035dc:	685b      	ldr	r3, [r3, #4]
 80035de:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	68db      	ldr	r3, [r3, #12]
 80035e6:	4904      	ldr	r1, [pc, #16]	@ (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035e8:	4313      	orrs	r3, r2
 80035ea:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80035ec:	2300      	movs	r3, #0
}
 80035ee:	4618      	mov	r0, r3
 80035f0:	3718      	adds	r7, #24
 80035f2:	46bd      	mov	sp, r7
 80035f4:	bd80      	pop	{r7, pc}
 80035f6:	bf00      	nop
 80035f8:	40021000 	.word	0x40021000
 80035fc:	40007000 	.word	0x40007000
 8003600:	42420440 	.word	0x42420440

08003604 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b088      	sub	sp, #32
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 800360c:	2300      	movs	r3, #0
 800360e:	617b      	str	r3, [r7, #20]
 8003610:	2300      	movs	r3, #0
 8003612:	61fb      	str	r3, [r7, #28]
 8003614:	2300      	movs	r3, #0
 8003616:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8003618:	2300      	movs	r3, #0
 800361a:	60fb      	str	r3, [r7, #12]
 800361c:	2300      	movs	r3, #0
 800361e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2b10      	cmp	r3, #16
 8003624:	d00a      	beq.n	800363c <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2b10      	cmp	r3, #16
 800362a:	f200 808a 	bhi.w	8003742 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2b01      	cmp	r3, #1
 8003632:	d045      	beq.n	80036c0 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2b02      	cmp	r3, #2
 8003638:	d075      	beq.n	8003726 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 800363a:	e082      	b.n	8003742 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 800363c:	4b46      	ldr	r3, [pc, #280]	@ (8003758 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8003642:	4b45      	ldr	r3, [pc, #276]	@ (8003758 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800364a:	2b00      	cmp	r3, #0
 800364c:	d07b      	beq.n	8003746 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	0c9b      	lsrs	r3, r3, #18
 8003652:	f003 030f 	and.w	r3, r3, #15
 8003656:	4a41      	ldr	r2, [pc, #260]	@ (800375c <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8003658:	5cd3      	ldrb	r3, [r2, r3]
 800365a:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003662:	2b00      	cmp	r3, #0
 8003664:	d015      	beq.n	8003692 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003666:	4b3c      	ldr	r3, [pc, #240]	@ (8003758 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	0c5b      	lsrs	r3, r3, #17
 800366c:	f003 0301 	and.w	r3, r3, #1
 8003670:	4a3b      	ldr	r2, [pc, #236]	@ (8003760 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8003672:	5cd3      	ldrb	r3, [r2, r3]
 8003674:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800367c:	2b00      	cmp	r3, #0
 800367e:	d00d      	beq.n	800369c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8003680:	4a38      	ldr	r2, [pc, #224]	@ (8003764 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8003682:	697b      	ldr	r3, [r7, #20]
 8003684:	fbb2 f2f3 	udiv	r2, r2, r3
 8003688:	693b      	ldr	r3, [r7, #16]
 800368a:	fb02 f303 	mul.w	r3, r2, r3
 800368e:	61fb      	str	r3, [r7, #28]
 8003690:	e004      	b.n	800369c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003692:	693b      	ldr	r3, [r7, #16]
 8003694:	4a34      	ldr	r2, [pc, #208]	@ (8003768 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8003696:	fb02 f303 	mul.w	r3, r2, r3
 800369a:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800369c:	4b2e      	ldr	r3, [pc, #184]	@ (8003758 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80036a4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80036a8:	d102      	bne.n	80036b0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 80036aa:	69fb      	ldr	r3, [r7, #28]
 80036ac:	61bb      	str	r3, [r7, #24]
      break;
 80036ae:	e04a      	b.n	8003746 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 80036b0:	69fb      	ldr	r3, [r7, #28]
 80036b2:	005b      	lsls	r3, r3, #1
 80036b4:	4a2d      	ldr	r2, [pc, #180]	@ (800376c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80036b6:	fba2 2303 	umull	r2, r3, r2, r3
 80036ba:	085b      	lsrs	r3, r3, #1
 80036bc:	61bb      	str	r3, [r7, #24]
      break;
 80036be:	e042      	b.n	8003746 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 80036c0:	4b25      	ldr	r3, [pc, #148]	@ (8003758 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80036c2:	6a1b      	ldr	r3, [r3, #32]
 80036c4:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80036cc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80036d0:	d108      	bne.n	80036e4 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	f003 0302 	and.w	r3, r3, #2
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d003      	beq.n	80036e4 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 80036dc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80036e0:	61bb      	str	r3, [r7, #24]
 80036e2:	e01f      	b.n	8003724 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80036ea:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80036ee:	d109      	bne.n	8003704 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 80036f0:	4b19      	ldr	r3, [pc, #100]	@ (8003758 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80036f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036f4:	f003 0302 	and.w	r3, r3, #2
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d003      	beq.n	8003704 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 80036fc:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8003700:	61bb      	str	r3, [r7, #24]
 8003702:	e00f      	b.n	8003724 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800370a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800370e:	d11c      	bne.n	800374a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8003710:	4b11      	ldr	r3, [pc, #68]	@ (8003758 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003718:	2b00      	cmp	r3, #0
 800371a:	d016      	beq.n	800374a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 800371c:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8003720:	61bb      	str	r3, [r7, #24]
      break;
 8003722:	e012      	b.n	800374a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8003724:	e011      	b.n	800374a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8003726:	f7ff fe85 	bl	8003434 <HAL_RCC_GetPCLK2Freq>
 800372a:	4602      	mov	r2, r0
 800372c:	4b0a      	ldr	r3, [pc, #40]	@ (8003758 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	0b9b      	lsrs	r3, r3, #14
 8003732:	f003 0303 	and.w	r3, r3, #3
 8003736:	3301      	adds	r3, #1
 8003738:	005b      	lsls	r3, r3, #1
 800373a:	fbb2 f3f3 	udiv	r3, r2, r3
 800373e:	61bb      	str	r3, [r7, #24]
      break;
 8003740:	e004      	b.n	800374c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003742:	bf00      	nop
 8003744:	e002      	b.n	800374c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003746:	bf00      	nop
 8003748:	e000      	b.n	800374c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800374a:	bf00      	nop
    }
  }
  return (frequency);
 800374c:	69bb      	ldr	r3, [r7, #24]
}
 800374e:	4618      	mov	r0, r3
 8003750:	3720      	adds	r7, #32
 8003752:	46bd      	mov	sp, r7
 8003754:	bd80      	pop	{r7, pc}
 8003756:	bf00      	nop
 8003758:	40021000 	.word	0x40021000
 800375c:	08009424 	.word	0x08009424
 8003760:	08009434 	.word	0x08009434
 8003764:	007a1200 	.word	0x007a1200
 8003768:	003d0900 	.word	0x003d0900
 800376c:	aaaaaaab 	.word	0xaaaaaaab

08003770 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b082      	sub	sp, #8
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d101      	bne.n	8003782 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800377e:	2301      	movs	r3, #1
 8003780:	e041      	b.n	8003806 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003788:	b2db      	uxtb	r3, r3
 800378a:	2b00      	cmp	r3, #0
 800378c:	d106      	bne.n	800379c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2200      	movs	r2, #0
 8003792:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003796:	6878      	ldr	r0, [r7, #4]
 8003798:	f7fe f84e 	bl	8001838 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2202      	movs	r2, #2
 80037a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681a      	ldr	r2, [r3, #0]
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	3304      	adds	r3, #4
 80037ac:	4619      	mov	r1, r3
 80037ae:	4610      	mov	r0, r2
 80037b0:	f000 fa5c 	bl	8003c6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2201      	movs	r2, #1
 80037b8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2201      	movs	r2, #1
 80037c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2201      	movs	r2, #1
 80037c8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2201      	movs	r2, #1
 80037d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2201      	movs	r2, #1
 80037d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2201      	movs	r2, #1
 80037e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2201      	movs	r2, #1
 80037e8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2201      	movs	r2, #1
 80037f0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2201      	movs	r2, #1
 80037f8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2201      	movs	r2, #1
 8003800:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003804:	2300      	movs	r3, #0
}
 8003806:	4618      	mov	r0, r3
 8003808:	3708      	adds	r7, #8
 800380a:	46bd      	mov	sp, r7
 800380c:	bd80      	pop	{r7, pc}
	...

08003810 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003810:	b480      	push	{r7}
 8003812:	b085      	sub	sp, #20
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800381e:	b2db      	uxtb	r3, r3
 8003820:	2b01      	cmp	r3, #1
 8003822:	d001      	beq.n	8003828 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003824:	2301      	movs	r3, #1
 8003826:	e03a      	b.n	800389e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2202      	movs	r2, #2
 800382c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	68da      	ldr	r2, [r3, #12]
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f042 0201 	orr.w	r2, r2, #1
 800383e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4a18      	ldr	r2, [pc, #96]	@ (80038a8 <HAL_TIM_Base_Start_IT+0x98>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d00e      	beq.n	8003868 <HAL_TIM_Base_Start_IT+0x58>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003852:	d009      	beq.n	8003868 <HAL_TIM_Base_Start_IT+0x58>
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4a14      	ldr	r2, [pc, #80]	@ (80038ac <HAL_TIM_Base_Start_IT+0x9c>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d004      	beq.n	8003868 <HAL_TIM_Base_Start_IT+0x58>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4a13      	ldr	r2, [pc, #76]	@ (80038b0 <HAL_TIM_Base_Start_IT+0xa0>)
 8003864:	4293      	cmp	r3, r2
 8003866:	d111      	bne.n	800388c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	689b      	ldr	r3, [r3, #8]
 800386e:	f003 0307 	and.w	r3, r3, #7
 8003872:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	2b06      	cmp	r3, #6
 8003878:	d010      	beq.n	800389c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	681a      	ldr	r2, [r3, #0]
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f042 0201 	orr.w	r2, r2, #1
 8003888:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800388a:	e007      	b.n	800389c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	681a      	ldr	r2, [r3, #0]
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f042 0201 	orr.w	r2, r2, #1
 800389a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800389c:	2300      	movs	r3, #0
}
 800389e:	4618      	mov	r0, r3
 80038a0:	3714      	adds	r7, #20
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bc80      	pop	{r7}
 80038a6:	4770      	bx	lr
 80038a8:	40012c00 	.word	0x40012c00
 80038ac:	40000400 	.word	0x40000400
 80038b0:	40000800 	.word	0x40000800

080038b4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b084      	sub	sp, #16
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	68db      	ldr	r3, [r3, #12]
 80038c2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	691b      	ldr	r3, [r3, #16]
 80038ca:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80038cc:	68bb      	ldr	r3, [r7, #8]
 80038ce:	f003 0302 	and.w	r3, r3, #2
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d020      	beq.n	8003918 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	f003 0302 	and.w	r3, r3, #2
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d01b      	beq.n	8003918 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f06f 0202 	mvn.w	r2, #2
 80038e8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2201      	movs	r2, #1
 80038ee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	699b      	ldr	r3, [r3, #24]
 80038f6:	f003 0303 	and.w	r3, r3, #3
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d003      	beq.n	8003906 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80038fe:	6878      	ldr	r0, [r7, #4]
 8003900:	f000 f998 	bl	8003c34 <HAL_TIM_IC_CaptureCallback>
 8003904:	e005      	b.n	8003912 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003906:	6878      	ldr	r0, [r7, #4]
 8003908:	f000 f98b 	bl	8003c22 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800390c:	6878      	ldr	r0, [r7, #4]
 800390e:	f000 f99a 	bl	8003c46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2200      	movs	r2, #0
 8003916:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003918:	68bb      	ldr	r3, [r7, #8]
 800391a:	f003 0304 	and.w	r3, r3, #4
 800391e:	2b00      	cmp	r3, #0
 8003920:	d020      	beq.n	8003964 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	f003 0304 	and.w	r3, r3, #4
 8003928:	2b00      	cmp	r3, #0
 800392a:	d01b      	beq.n	8003964 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f06f 0204 	mvn.w	r2, #4
 8003934:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2202      	movs	r2, #2
 800393a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	699b      	ldr	r3, [r3, #24]
 8003942:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003946:	2b00      	cmp	r3, #0
 8003948:	d003      	beq.n	8003952 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800394a:	6878      	ldr	r0, [r7, #4]
 800394c:	f000 f972 	bl	8003c34 <HAL_TIM_IC_CaptureCallback>
 8003950:	e005      	b.n	800395e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003952:	6878      	ldr	r0, [r7, #4]
 8003954:	f000 f965 	bl	8003c22 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003958:	6878      	ldr	r0, [r7, #4]
 800395a:	f000 f974 	bl	8003c46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2200      	movs	r2, #0
 8003962:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003964:	68bb      	ldr	r3, [r7, #8]
 8003966:	f003 0308 	and.w	r3, r3, #8
 800396a:	2b00      	cmp	r3, #0
 800396c:	d020      	beq.n	80039b0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	f003 0308 	and.w	r3, r3, #8
 8003974:	2b00      	cmp	r3, #0
 8003976:	d01b      	beq.n	80039b0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f06f 0208 	mvn.w	r2, #8
 8003980:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2204      	movs	r2, #4
 8003986:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	69db      	ldr	r3, [r3, #28]
 800398e:	f003 0303 	and.w	r3, r3, #3
 8003992:	2b00      	cmp	r3, #0
 8003994:	d003      	beq.n	800399e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003996:	6878      	ldr	r0, [r7, #4]
 8003998:	f000 f94c 	bl	8003c34 <HAL_TIM_IC_CaptureCallback>
 800399c:	e005      	b.n	80039aa <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800399e:	6878      	ldr	r0, [r7, #4]
 80039a0:	f000 f93f 	bl	8003c22 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039a4:	6878      	ldr	r0, [r7, #4]
 80039a6:	f000 f94e 	bl	8003c46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2200      	movs	r2, #0
 80039ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80039b0:	68bb      	ldr	r3, [r7, #8]
 80039b2:	f003 0310 	and.w	r3, r3, #16
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d020      	beq.n	80039fc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	f003 0310 	and.w	r3, r3, #16
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d01b      	beq.n	80039fc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f06f 0210 	mvn.w	r2, #16
 80039cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2208      	movs	r2, #8
 80039d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	69db      	ldr	r3, [r3, #28]
 80039da:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d003      	beq.n	80039ea <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039e2:	6878      	ldr	r0, [r7, #4]
 80039e4:	f000 f926 	bl	8003c34 <HAL_TIM_IC_CaptureCallback>
 80039e8:	e005      	b.n	80039f6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039ea:	6878      	ldr	r0, [r7, #4]
 80039ec:	f000 f919 	bl	8003c22 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039f0:	6878      	ldr	r0, [r7, #4]
 80039f2:	f000 f928 	bl	8003c46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2200      	movs	r2, #0
 80039fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80039fc:	68bb      	ldr	r3, [r7, #8]
 80039fe:	f003 0301 	and.w	r3, r3, #1
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d00c      	beq.n	8003a20 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	f003 0301 	and.w	r3, r3, #1
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d007      	beq.n	8003a20 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f06f 0201 	mvn.w	r2, #1
 8003a18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003a1a:	6878      	ldr	r0, [r7, #4]
 8003a1c:	f7fd fafa 	bl	8001014 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003a20:	68bb      	ldr	r3, [r7, #8]
 8003a22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d00c      	beq.n	8003a44 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d007      	beq.n	8003a44 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003a3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003a3e:	6878      	ldr	r0, [r7, #4]
 8003a40:	f000 fa7f 	bl	8003f42 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003a44:	68bb      	ldr	r3, [r7, #8]
 8003a46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d00c      	beq.n	8003a68 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d007      	beq.n	8003a68 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003a60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003a62:	6878      	ldr	r0, [r7, #4]
 8003a64:	f000 f8f8 	bl	8003c58 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003a68:	68bb      	ldr	r3, [r7, #8]
 8003a6a:	f003 0320 	and.w	r3, r3, #32
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d00c      	beq.n	8003a8c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	f003 0320 	and.w	r3, r3, #32
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d007      	beq.n	8003a8c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f06f 0220 	mvn.w	r2, #32
 8003a84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003a86:	6878      	ldr	r0, [r7, #4]
 8003a88:	f000 fa52 	bl	8003f30 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003a8c:	bf00      	nop
 8003a8e:	3710      	adds	r7, #16
 8003a90:	46bd      	mov	sp, r7
 8003a92:	bd80      	pop	{r7, pc}

08003a94 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b084      	sub	sp, #16
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
 8003a9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003aa8:	2b01      	cmp	r3, #1
 8003aaa:	d101      	bne.n	8003ab0 <HAL_TIM_ConfigClockSource+0x1c>
 8003aac:	2302      	movs	r3, #2
 8003aae:	e0b4      	b.n	8003c1a <HAL_TIM_ConfigClockSource+0x186>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2201      	movs	r2, #1
 8003ab4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2202      	movs	r2, #2
 8003abc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	689b      	ldr	r3, [r3, #8]
 8003ac6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003ac8:	68bb      	ldr	r3, [r7, #8]
 8003aca:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003ace:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ad0:	68bb      	ldr	r3, [r7, #8]
 8003ad2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003ad6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	68ba      	ldr	r2, [r7, #8]
 8003ade:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003ae8:	d03e      	beq.n	8003b68 <HAL_TIM_ConfigClockSource+0xd4>
 8003aea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003aee:	f200 8087 	bhi.w	8003c00 <HAL_TIM_ConfigClockSource+0x16c>
 8003af2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003af6:	f000 8086 	beq.w	8003c06 <HAL_TIM_ConfigClockSource+0x172>
 8003afa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003afe:	d87f      	bhi.n	8003c00 <HAL_TIM_ConfigClockSource+0x16c>
 8003b00:	2b70      	cmp	r3, #112	@ 0x70
 8003b02:	d01a      	beq.n	8003b3a <HAL_TIM_ConfigClockSource+0xa6>
 8003b04:	2b70      	cmp	r3, #112	@ 0x70
 8003b06:	d87b      	bhi.n	8003c00 <HAL_TIM_ConfigClockSource+0x16c>
 8003b08:	2b60      	cmp	r3, #96	@ 0x60
 8003b0a:	d050      	beq.n	8003bae <HAL_TIM_ConfigClockSource+0x11a>
 8003b0c:	2b60      	cmp	r3, #96	@ 0x60
 8003b0e:	d877      	bhi.n	8003c00 <HAL_TIM_ConfigClockSource+0x16c>
 8003b10:	2b50      	cmp	r3, #80	@ 0x50
 8003b12:	d03c      	beq.n	8003b8e <HAL_TIM_ConfigClockSource+0xfa>
 8003b14:	2b50      	cmp	r3, #80	@ 0x50
 8003b16:	d873      	bhi.n	8003c00 <HAL_TIM_ConfigClockSource+0x16c>
 8003b18:	2b40      	cmp	r3, #64	@ 0x40
 8003b1a:	d058      	beq.n	8003bce <HAL_TIM_ConfigClockSource+0x13a>
 8003b1c:	2b40      	cmp	r3, #64	@ 0x40
 8003b1e:	d86f      	bhi.n	8003c00 <HAL_TIM_ConfigClockSource+0x16c>
 8003b20:	2b30      	cmp	r3, #48	@ 0x30
 8003b22:	d064      	beq.n	8003bee <HAL_TIM_ConfigClockSource+0x15a>
 8003b24:	2b30      	cmp	r3, #48	@ 0x30
 8003b26:	d86b      	bhi.n	8003c00 <HAL_TIM_ConfigClockSource+0x16c>
 8003b28:	2b20      	cmp	r3, #32
 8003b2a:	d060      	beq.n	8003bee <HAL_TIM_ConfigClockSource+0x15a>
 8003b2c:	2b20      	cmp	r3, #32
 8003b2e:	d867      	bhi.n	8003c00 <HAL_TIM_ConfigClockSource+0x16c>
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d05c      	beq.n	8003bee <HAL_TIM_ConfigClockSource+0x15a>
 8003b34:	2b10      	cmp	r3, #16
 8003b36:	d05a      	beq.n	8003bee <HAL_TIM_ConfigClockSource+0x15a>
 8003b38:	e062      	b.n	8003c00 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003b4a:	f000 f974 	bl	8003e36 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	689b      	ldr	r3, [r3, #8]
 8003b54:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003b56:	68bb      	ldr	r3, [r7, #8]
 8003b58:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003b5c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	68ba      	ldr	r2, [r7, #8]
 8003b64:	609a      	str	r2, [r3, #8]
      break;
 8003b66:	e04f      	b.n	8003c08 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003b78:	f000 f95d 	bl	8003e36 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	689a      	ldr	r2, [r3, #8]
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003b8a:	609a      	str	r2, [r3, #8]
      break;
 8003b8c:	e03c      	b.n	8003c08 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b9a:	461a      	mov	r2, r3
 8003b9c:	f000 f8d4 	bl	8003d48 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	2150      	movs	r1, #80	@ 0x50
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	f000 f92b 	bl	8003e02 <TIM_ITRx_SetConfig>
      break;
 8003bac:	e02c      	b.n	8003c08 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003bba:	461a      	mov	r2, r3
 8003bbc:	f000 f8f2 	bl	8003da4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	2160      	movs	r1, #96	@ 0x60
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	f000 f91b 	bl	8003e02 <TIM_ITRx_SetConfig>
      break;
 8003bcc:	e01c      	b.n	8003c08 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003bda:	461a      	mov	r2, r3
 8003bdc:	f000 f8b4 	bl	8003d48 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	2140      	movs	r1, #64	@ 0x40
 8003be6:	4618      	mov	r0, r3
 8003be8:	f000 f90b 	bl	8003e02 <TIM_ITRx_SetConfig>
      break;
 8003bec:	e00c      	b.n	8003c08 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681a      	ldr	r2, [r3, #0]
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4619      	mov	r1, r3
 8003bf8:	4610      	mov	r0, r2
 8003bfa:	f000 f902 	bl	8003e02 <TIM_ITRx_SetConfig>
      break;
 8003bfe:	e003      	b.n	8003c08 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003c00:	2301      	movs	r3, #1
 8003c02:	73fb      	strb	r3, [r7, #15]
      break;
 8003c04:	e000      	b.n	8003c08 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003c06:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2201      	movs	r2, #1
 8003c0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2200      	movs	r2, #0
 8003c14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003c18:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	3710      	adds	r7, #16
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	bd80      	pop	{r7, pc}

08003c22 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003c22:	b480      	push	{r7}
 8003c24:	b083      	sub	sp, #12
 8003c26:	af00      	add	r7, sp, #0
 8003c28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003c2a:	bf00      	nop
 8003c2c:	370c      	adds	r7, #12
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bc80      	pop	{r7}
 8003c32:	4770      	bx	lr

08003c34 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003c34:	b480      	push	{r7}
 8003c36:	b083      	sub	sp, #12
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003c3c:	bf00      	nop
 8003c3e:	370c      	adds	r7, #12
 8003c40:	46bd      	mov	sp, r7
 8003c42:	bc80      	pop	{r7}
 8003c44:	4770      	bx	lr

08003c46 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003c46:	b480      	push	{r7}
 8003c48:	b083      	sub	sp, #12
 8003c4a:	af00      	add	r7, sp, #0
 8003c4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003c4e:	bf00      	nop
 8003c50:	370c      	adds	r7, #12
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bc80      	pop	{r7}
 8003c56:	4770      	bx	lr

08003c58 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003c58:	b480      	push	{r7}
 8003c5a:	b083      	sub	sp, #12
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003c60:	bf00      	nop
 8003c62:	370c      	adds	r7, #12
 8003c64:	46bd      	mov	sp, r7
 8003c66:	bc80      	pop	{r7}
 8003c68:	4770      	bx	lr
	...

08003c6c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003c6c:	b480      	push	{r7}
 8003c6e:	b085      	sub	sp, #20
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
 8003c74:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	4a2f      	ldr	r2, [pc, #188]	@ (8003d3c <TIM_Base_SetConfig+0xd0>)
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d00b      	beq.n	8003c9c <TIM_Base_SetConfig+0x30>
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c8a:	d007      	beq.n	8003c9c <TIM_Base_SetConfig+0x30>
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	4a2c      	ldr	r2, [pc, #176]	@ (8003d40 <TIM_Base_SetConfig+0xd4>)
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d003      	beq.n	8003c9c <TIM_Base_SetConfig+0x30>
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	4a2b      	ldr	r2, [pc, #172]	@ (8003d44 <TIM_Base_SetConfig+0xd8>)
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d108      	bne.n	8003cae <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ca2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	68fa      	ldr	r2, [r7, #12]
 8003caa:	4313      	orrs	r3, r2
 8003cac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	4a22      	ldr	r2, [pc, #136]	@ (8003d3c <TIM_Base_SetConfig+0xd0>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d00b      	beq.n	8003cce <TIM_Base_SetConfig+0x62>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003cbc:	d007      	beq.n	8003cce <TIM_Base_SetConfig+0x62>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	4a1f      	ldr	r2, [pc, #124]	@ (8003d40 <TIM_Base_SetConfig+0xd4>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d003      	beq.n	8003cce <TIM_Base_SetConfig+0x62>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	4a1e      	ldr	r2, [pc, #120]	@ (8003d44 <TIM_Base_SetConfig+0xd8>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d108      	bne.n	8003ce0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003cd4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	68db      	ldr	r3, [r3, #12]
 8003cda:	68fa      	ldr	r2, [r7, #12]
 8003cdc:	4313      	orrs	r3, r2
 8003cde:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	695b      	ldr	r3, [r3, #20]
 8003cea:	4313      	orrs	r3, r2
 8003cec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	68fa      	ldr	r2, [r7, #12]
 8003cf2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	689a      	ldr	r2, [r3, #8]
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	681a      	ldr	r2, [r3, #0]
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	4a0d      	ldr	r2, [pc, #52]	@ (8003d3c <TIM_Base_SetConfig+0xd0>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d103      	bne.n	8003d14 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	691a      	ldr	r2, [r3, #16]
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2201      	movs	r2, #1
 8003d18:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	691b      	ldr	r3, [r3, #16]
 8003d1e:	f003 0301 	and.w	r3, r3, #1
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d005      	beq.n	8003d32 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	691b      	ldr	r3, [r3, #16]
 8003d2a:	f023 0201 	bic.w	r2, r3, #1
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	611a      	str	r2, [r3, #16]
  }
}
 8003d32:	bf00      	nop
 8003d34:	3714      	adds	r7, #20
 8003d36:	46bd      	mov	sp, r7
 8003d38:	bc80      	pop	{r7}
 8003d3a:	4770      	bx	lr
 8003d3c:	40012c00 	.word	0x40012c00
 8003d40:	40000400 	.word	0x40000400
 8003d44:	40000800 	.word	0x40000800

08003d48 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d48:	b480      	push	{r7}
 8003d4a:	b087      	sub	sp, #28
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	60f8      	str	r0, [r7, #12]
 8003d50:	60b9      	str	r1, [r7, #8]
 8003d52:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	6a1b      	ldr	r3, [r3, #32]
 8003d58:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	6a1b      	ldr	r3, [r3, #32]
 8003d5e:	f023 0201 	bic.w	r2, r3, #1
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	699b      	ldr	r3, [r3, #24]
 8003d6a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003d6c:	693b      	ldr	r3, [r7, #16]
 8003d6e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003d72:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	011b      	lsls	r3, r3, #4
 8003d78:	693a      	ldr	r2, [r7, #16]
 8003d7a:	4313      	orrs	r3, r2
 8003d7c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003d7e:	697b      	ldr	r3, [r7, #20]
 8003d80:	f023 030a 	bic.w	r3, r3, #10
 8003d84:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003d86:	697a      	ldr	r2, [r7, #20]
 8003d88:	68bb      	ldr	r3, [r7, #8]
 8003d8a:	4313      	orrs	r3, r2
 8003d8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	693a      	ldr	r2, [r7, #16]
 8003d92:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	697a      	ldr	r2, [r7, #20]
 8003d98:	621a      	str	r2, [r3, #32]
}
 8003d9a:	bf00      	nop
 8003d9c:	371c      	adds	r7, #28
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	bc80      	pop	{r7}
 8003da2:	4770      	bx	lr

08003da4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003da4:	b480      	push	{r7}
 8003da6:	b087      	sub	sp, #28
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	60f8      	str	r0, [r7, #12]
 8003dac:	60b9      	str	r1, [r7, #8]
 8003dae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	6a1b      	ldr	r3, [r3, #32]
 8003db4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	6a1b      	ldr	r3, [r3, #32]
 8003dba:	f023 0210 	bic.w	r2, r3, #16
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	699b      	ldr	r3, [r3, #24]
 8003dc6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003dc8:	693b      	ldr	r3, [r7, #16]
 8003dca:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003dce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	031b      	lsls	r3, r3, #12
 8003dd4:	693a      	ldr	r2, [r7, #16]
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003dda:	697b      	ldr	r3, [r7, #20]
 8003ddc:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003de0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003de2:	68bb      	ldr	r3, [r7, #8]
 8003de4:	011b      	lsls	r3, r3, #4
 8003de6:	697a      	ldr	r2, [r7, #20]
 8003de8:	4313      	orrs	r3, r2
 8003dea:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	693a      	ldr	r2, [r7, #16]
 8003df0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	697a      	ldr	r2, [r7, #20]
 8003df6:	621a      	str	r2, [r3, #32]
}
 8003df8:	bf00      	nop
 8003dfa:	371c      	adds	r7, #28
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	bc80      	pop	{r7}
 8003e00:	4770      	bx	lr

08003e02 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003e02:	b480      	push	{r7}
 8003e04:	b085      	sub	sp, #20
 8003e06:	af00      	add	r7, sp, #0
 8003e08:	6078      	str	r0, [r7, #4]
 8003e0a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	689b      	ldr	r3, [r3, #8]
 8003e10:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e18:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003e1a:	683a      	ldr	r2, [r7, #0]
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	4313      	orrs	r3, r2
 8003e20:	f043 0307 	orr.w	r3, r3, #7
 8003e24:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	68fa      	ldr	r2, [r7, #12]
 8003e2a:	609a      	str	r2, [r3, #8]
}
 8003e2c:	bf00      	nop
 8003e2e:	3714      	adds	r7, #20
 8003e30:	46bd      	mov	sp, r7
 8003e32:	bc80      	pop	{r7}
 8003e34:	4770      	bx	lr

08003e36 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003e36:	b480      	push	{r7}
 8003e38:	b087      	sub	sp, #28
 8003e3a:	af00      	add	r7, sp, #0
 8003e3c:	60f8      	str	r0, [r7, #12]
 8003e3e:	60b9      	str	r1, [r7, #8]
 8003e40:	607a      	str	r2, [r7, #4]
 8003e42:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	689b      	ldr	r3, [r3, #8]
 8003e48:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e4a:	697b      	ldr	r3, [r7, #20]
 8003e4c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003e50:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	021a      	lsls	r2, r3, #8
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	431a      	orrs	r2, r3
 8003e5a:	68bb      	ldr	r3, [r7, #8]
 8003e5c:	4313      	orrs	r3, r2
 8003e5e:	697a      	ldr	r2, [r7, #20]
 8003e60:	4313      	orrs	r3, r2
 8003e62:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	697a      	ldr	r2, [r7, #20]
 8003e68:	609a      	str	r2, [r3, #8]
}
 8003e6a:	bf00      	nop
 8003e6c:	371c      	adds	r7, #28
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	bc80      	pop	{r7}
 8003e72:	4770      	bx	lr

08003e74 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003e74:	b480      	push	{r7}
 8003e76:	b085      	sub	sp, #20
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
 8003e7c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003e84:	2b01      	cmp	r3, #1
 8003e86:	d101      	bne.n	8003e8c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003e88:	2302      	movs	r3, #2
 8003e8a:	e046      	b.n	8003f1a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2201      	movs	r2, #1
 8003e90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2202      	movs	r2, #2
 8003e98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	685b      	ldr	r3, [r3, #4]
 8003ea2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	689b      	ldr	r3, [r3, #8]
 8003eaa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003eb2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	68fa      	ldr	r2, [r7, #12]
 8003eba:	4313      	orrs	r3, r2
 8003ebc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	68fa      	ldr	r2, [r7, #12]
 8003ec4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	4a16      	ldr	r2, [pc, #88]	@ (8003f24 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d00e      	beq.n	8003eee <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ed8:	d009      	beq.n	8003eee <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	4a12      	ldr	r2, [pc, #72]	@ (8003f28 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d004      	beq.n	8003eee <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4a10      	ldr	r2, [pc, #64]	@ (8003f2c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d10c      	bne.n	8003f08 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003eee:	68bb      	ldr	r3, [r7, #8]
 8003ef0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003ef4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	685b      	ldr	r3, [r3, #4]
 8003efa:	68ba      	ldr	r2, [r7, #8]
 8003efc:	4313      	orrs	r3, r2
 8003efe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	68ba      	ldr	r2, [r7, #8]
 8003f06:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2201      	movs	r2, #1
 8003f0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2200      	movs	r2, #0
 8003f14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003f18:	2300      	movs	r3, #0
}
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	3714      	adds	r7, #20
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	bc80      	pop	{r7}
 8003f22:	4770      	bx	lr
 8003f24:	40012c00 	.word	0x40012c00
 8003f28:	40000400 	.word	0x40000400
 8003f2c:	40000800 	.word	0x40000800

08003f30 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003f30:	b480      	push	{r7}
 8003f32:	b083      	sub	sp, #12
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003f38:	bf00      	nop
 8003f3a:	370c      	adds	r7, #12
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	bc80      	pop	{r7}
 8003f40:	4770      	bx	lr

08003f42 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003f42:	b480      	push	{r7}
 8003f44:	b083      	sub	sp, #12
 8003f46:	af00      	add	r7, sp, #0
 8003f48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003f4a:	bf00      	nop
 8003f4c:	370c      	adds	r7, #12
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	bc80      	pop	{r7}
 8003f52:	4770      	bx	lr

08003f54 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b082      	sub	sp, #8
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d101      	bne.n	8003f66 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f62:	2301      	movs	r3, #1
 8003f64:	e042      	b.n	8003fec <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f6c:	b2db      	uxtb	r3, r3
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d106      	bne.n	8003f80 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2200      	movs	r2, #0
 8003f76:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f7a:	6878      	ldr	r0, [r7, #4]
 8003f7c:	f7fd fc80 	bl	8001880 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2224      	movs	r2, #36	@ 0x24
 8003f84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	68da      	ldr	r2, [r3, #12]
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003f96:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003f98:	6878      	ldr	r0, [r7, #4]
 8003f9a:	f000 fdf9 	bl	8004b90 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	691a      	ldr	r2, [r3, #16]
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003fac:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	695a      	ldr	r2, [r3, #20]
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003fbc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	68da      	ldr	r2, [r3, #12]
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003fcc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2220      	movs	r2, #32
 8003fd8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2220      	movs	r2, #32
 8003fe0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003fea:	2300      	movs	r3, #0
}
 8003fec:	4618      	mov	r0, r3
 8003fee:	3708      	adds	r7, #8
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	bd80      	pop	{r7, pc}

08003ff4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b08a      	sub	sp, #40	@ 0x28
 8003ff8:	af02      	add	r7, sp, #8
 8003ffa:	60f8      	str	r0, [r7, #12]
 8003ffc:	60b9      	str	r1, [r7, #8]
 8003ffe:	603b      	str	r3, [r7, #0]
 8004000:	4613      	mov	r3, r2
 8004002:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004004:	2300      	movs	r3, #0
 8004006:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800400e:	b2db      	uxtb	r3, r3
 8004010:	2b20      	cmp	r3, #32
 8004012:	d175      	bne.n	8004100 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004014:	68bb      	ldr	r3, [r7, #8]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d002      	beq.n	8004020 <HAL_UART_Transmit+0x2c>
 800401a:	88fb      	ldrh	r3, [r7, #6]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d101      	bne.n	8004024 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004020:	2301      	movs	r3, #1
 8004022:	e06e      	b.n	8004102 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	2200      	movs	r2, #0
 8004028:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	2221      	movs	r2, #33	@ 0x21
 800402e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004032:	f7fd fe0d 	bl	8001c50 <HAL_GetTick>
 8004036:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	88fa      	ldrh	r2, [r7, #6]
 800403c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	88fa      	ldrh	r2, [r7, #6]
 8004042:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	689b      	ldr	r3, [r3, #8]
 8004048:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800404c:	d108      	bne.n	8004060 <HAL_UART_Transmit+0x6c>
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	691b      	ldr	r3, [r3, #16]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d104      	bne.n	8004060 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004056:	2300      	movs	r3, #0
 8004058:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800405a:	68bb      	ldr	r3, [r7, #8]
 800405c:	61bb      	str	r3, [r7, #24]
 800405e:	e003      	b.n	8004068 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004060:	68bb      	ldr	r3, [r7, #8]
 8004062:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004064:	2300      	movs	r3, #0
 8004066:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004068:	e02e      	b.n	80040c8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	9300      	str	r3, [sp, #0]
 800406e:	697b      	ldr	r3, [r7, #20]
 8004070:	2200      	movs	r2, #0
 8004072:	2180      	movs	r1, #128	@ 0x80
 8004074:	68f8      	ldr	r0, [r7, #12]
 8004076:	f000 fb97 	bl	80047a8 <UART_WaitOnFlagUntilTimeout>
 800407a:	4603      	mov	r3, r0
 800407c:	2b00      	cmp	r3, #0
 800407e:	d005      	beq.n	800408c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	2220      	movs	r2, #32
 8004084:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004088:	2303      	movs	r3, #3
 800408a:	e03a      	b.n	8004102 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800408c:	69fb      	ldr	r3, [r7, #28]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d10b      	bne.n	80040aa <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004092:	69bb      	ldr	r3, [r7, #24]
 8004094:	881b      	ldrh	r3, [r3, #0]
 8004096:	461a      	mov	r2, r3
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80040a0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80040a2:	69bb      	ldr	r3, [r7, #24]
 80040a4:	3302      	adds	r3, #2
 80040a6:	61bb      	str	r3, [r7, #24]
 80040a8:	e007      	b.n	80040ba <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80040aa:	69fb      	ldr	r3, [r7, #28]
 80040ac:	781a      	ldrb	r2, [r3, #0]
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80040b4:	69fb      	ldr	r3, [r7, #28]
 80040b6:	3301      	adds	r3, #1
 80040b8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80040be:	b29b      	uxth	r3, r3
 80040c0:	3b01      	subs	r3, #1
 80040c2:	b29a      	uxth	r2, r3
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80040cc:	b29b      	uxth	r3, r3
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d1cb      	bne.n	800406a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	9300      	str	r3, [sp, #0]
 80040d6:	697b      	ldr	r3, [r7, #20]
 80040d8:	2200      	movs	r2, #0
 80040da:	2140      	movs	r1, #64	@ 0x40
 80040dc:	68f8      	ldr	r0, [r7, #12]
 80040de:	f000 fb63 	bl	80047a8 <UART_WaitOnFlagUntilTimeout>
 80040e2:	4603      	mov	r3, r0
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d005      	beq.n	80040f4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	2220      	movs	r2, #32
 80040ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80040f0:	2303      	movs	r3, #3
 80040f2:	e006      	b.n	8004102 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	2220      	movs	r2, #32
 80040f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80040fc:	2300      	movs	r3, #0
 80040fe:	e000      	b.n	8004102 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004100:	2302      	movs	r3, #2
  }
}
 8004102:	4618      	mov	r0, r3
 8004104:	3720      	adds	r7, #32
 8004106:	46bd      	mov	sp, r7
 8004108:	bd80      	pop	{r7, pc}

0800410a <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800410a:	b580      	push	{r7, lr}
 800410c:	b08a      	sub	sp, #40	@ 0x28
 800410e:	af02      	add	r7, sp, #8
 8004110:	60f8      	str	r0, [r7, #12]
 8004112:	60b9      	str	r1, [r7, #8]
 8004114:	603b      	str	r3, [r7, #0]
 8004116:	4613      	mov	r3, r2
 8004118:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800411a:	2300      	movs	r3, #0
 800411c:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004124:	b2db      	uxtb	r3, r3
 8004126:	2b20      	cmp	r3, #32
 8004128:	f040 8081 	bne.w	800422e <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 800412c:	68bb      	ldr	r3, [r7, #8]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d002      	beq.n	8004138 <HAL_UART_Receive+0x2e>
 8004132:	88fb      	ldrh	r3, [r7, #6]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d101      	bne.n	800413c <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8004138:	2301      	movs	r3, #1
 800413a:	e079      	b.n	8004230 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	2200      	movs	r2, #0
 8004140:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	2222      	movs	r2, #34	@ 0x22
 8004146:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	2200      	movs	r2, #0
 800414e:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004150:	f7fd fd7e 	bl	8001c50 <HAL_GetTick>
 8004154:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	88fa      	ldrh	r2, [r7, #6]
 800415a:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	88fa      	ldrh	r2, [r7, #6]
 8004160:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	689b      	ldr	r3, [r3, #8]
 8004166:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800416a:	d108      	bne.n	800417e <HAL_UART_Receive+0x74>
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	691b      	ldr	r3, [r3, #16]
 8004170:	2b00      	cmp	r3, #0
 8004172:	d104      	bne.n	800417e <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8004174:	2300      	movs	r3, #0
 8004176:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004178:	68bb      	ldr	r3, [r7, #8]
 800417a:	61bb      	str	r3, [r7, #24]
 800417c:	e003      	b.n	8004186 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 800417e:	68bb      	ldr	r3, [r7, #8]
 8004180:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004182:	2300      	movs	r3, #0
 8004184:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8004186:	e047      	b.n	8004218 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	9300      	str	r3, [sp, #0]
 800418c:	697b      	ldr	r3, [r7, #20]
 800418e:	2200      	movs	r2, #0
 8004190:	2120      	movs	r1, #32
 8004192:	68f8      	ldr	r0, [r7, #12]
 8004194:	f000 fb08 	bl	80047a8 <UART_WaitOnFlagUntilTimeout>
 8004198:	4603      	mov	r3, r0
 800419a:	2b00      	cmp	r3, #0
 800419c:	d005      	beq.n	80041aa <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	2220      	movs	r2, #32
 80041a2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 80041a6:	2303      	movs	r3, #3
 80041a8:	e042      	b.n	8004230 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 80041aa:	69fb      	ldr	r3, [r7, #28]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d10c      	bne.n	80041ca <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	685b      	ldr	r3, [r3, #4]
 80041b6:	b29b      	uxth	r3, r3
 80041b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041bc:	b29a      	uxth	r2, r3
 80041be:	69bb      	ldr	r3, [r7, #24]
 80041c0:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80041c2:	69bb      	ldr	r3, [r7, #24]
 80041c4:	3302      	adds	r3, #2
 80041c6:	61bb      	str	r3, [r7, #24]
 80041c8:	e01f      	b.n	800420a <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	689b      	ldr	r3, [r3, #8]
 80041ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80041d2:	d007      	beq.n	80041e4 <HAL_UART_Receive+0xda>
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	689b      	ldr	r3, [r3, #8]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d10a      	bne.n	80041f2 <HAL_UART_Receive+0xe8>
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	691b      	ldr	r3, [r3, #16]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d106      	bne.n	80041f2 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	685b      	ldr	r3, [r3, #4]
 80041ea:	b2da      	uxtb	r2, r3
 80041ec:	69fb      	ldr	r3, [r7, #28]
 80041ee:	701a      	strb	r2, [r3, #0]
 80041f0:	e008      	b.n	8004204 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	685b      	ldr	r3, [r3, #4]
 80041f8:	b2db      	uxtb	r3, r3
 80041fa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80041fe:	b2da      	uxtb	r2, r3
 8004200:	69fb      	ldr	r3, [r7, #28]
 8004202:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8004204:	69fb      	ldr	r3, [r7, #28]
 8004206:	3301      	adds	r3, #1
 8004208:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800420e:	b29b      	uxth	r3, r3
 8004210:	3b01      	subs	r3, #1
 8004212:	b29a      	uxth	r2, r3
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800421c:	b29b      	uxth	r3, r3
 800421e:	2b00      	cmp	r3, #0
 8004220:	d1b2      	bne.n	8004188 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	2220      	movs	r2, #32
 8004226:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 800422a:	2300      	movs	r3, #0
 800422c:	e000      	b.n	8004230 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 800422e:	2302      	movs	r3, #2
  }
}
 8004230:	4618      	mov	r0, r3
 8004232:	3720      	adds	r7, #32
 8004234:	46bd      	mov	sp, r7
 8004236:	bd80      	pop	{r7, pc}

08004238 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b0ba      	sub	sp, #232	@ 0xe8
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	68db      	ldr	r3, [r3, #12]
 8004250:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	695b      	ldr	r3, [r3, #20]
 800425a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800425e:	2300      	movs	r3, #0
 8004260:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004264:	2300      	movs	r3, #0
 8004266:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800426a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800426e:	f003 030f 	and.w	r3, r3, #15
 8004272:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8004276:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800427a:	2b00      	cmp	r3, #0
 800427c:	d10f      	bne.n	800429e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800427e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004282:	f003 0320 	and.w	r3, r3, #32
 8004286:	2b00      	cmp	r3, #0
 8004288:	d009      	beq.n	800429e <HAL_UART_IRQHandler+0x66>
 800428a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800428e:	f003 0320 	and.w	r3, r3, #32
 8004292:	2b00      	cmp	r3, #0
 8004294:	d003      	beq.n	800429e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004296:	6878      	ldr	r0, [r7, #4]
 8004298:	f000 fbbc 	bl	8004a14 <UART_Receive_IT>
      return;
 800429c:	e25b      	b.n	8004756 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800429e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	f000 80de 	beq.w	8004464 <HAL_UART_IRQHandler+0x22c>
 80042a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80042ac:	f003 0301 	and.w	r3, r3, #1
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d106      	bne.n	80042c2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80042b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80042b8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80042bc:	2b00      	cmp	r3, #0
 80042be:	f000 80d1 	beq.w	8004464 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80042c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80042c6:	f003 0301 	and.w	r3, r3, #1
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d00b      	beq.n	80042e6 <HAL_UART_IRQHandler+0xae>
 80042ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80042d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d005      	beq.n	80042e6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042de:	f043 0201 	orr.w	r2, r3, #1
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80042e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80042ea:	f003 0304 	and.w	r3, r3, #4
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d00b      	beq.n	800430a <HAL_UART_IRQHandler+0xd2>
 80042f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80042f6:	f003 0301 	and.w	r3, r3, #1
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d005      	beq.n	800430a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004302:	f043 0202 	orr.w	r2, r3, #2
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800430a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800430e:	f003 0302 	and.w	r3, r3, #2
 8004312:	2b00      	cmp	r3, #0
 8004314:	d00b      	beq.n	800432e <HAL_UART_IRQHandler+0xf6>
 8004316:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800431a:	f003 0301 	and.w	r3, r3, #1
 800431e:	2b00      	cmp	r3, #0
 8004320:	d005      	beq.n	800432e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004326:	f043 0204 	orr.w	r2, r3, #4
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800432e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004332:	f003 0308 	and.w	r3, r3, #8
 8004336:	2b00      	cmp	r3, #0
 8004338:	d011      	beq.n	800435e <HAL_UART_IRQHandler+0x126>
 800433a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800433e:	f003 0320 	and.w	r3, r3, #32
 8004342:	2b00      	cmp	r3, #0
 8004344:	d105      	bne.n	8004352 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004346:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800434a:	f003 0301 	and.w	r3, r3, #1
 800434e:	2b00      	cmp	r3, #0
 8004350:	d005      	beq.n	800435e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004356:	f043 0208 	orr.w	r2, r3, #8
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004362:	2b00      	cmp	r3, #0
 8004364:	f000 81f2 	beq.w	800474c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004368:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800436c:	f003 0320 	and.w	r3, r3, #32
 8004370:	2b00      	cmp	r3, #0
 8004372:	d008      	beq.n	8004386 <HAL_UART_IRQHandler+0x14e>
 8004374:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004378:	f003 0320 	and.w	r3, r3, #32
 800437c:	2b00      	cmp	r3, #0
 800437e:	d002      	beq.n	8004386 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004380:	6878      	ldr	r0, [r7, #4]
 8004382:	f000 fb47 	bl	8004a14 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	695b      	ldr	r3, [r3, #20]
 800438c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004390:	2b00      	cmp	r3, #0
 8004392:	bf14      	ite	ne
 8004394:	2301      	movne	r3, #1
 8004396:	2300      	moveq	r3, #0
 8004398:	b2db      	uxtb	r3, r3
 800439a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043a2:	f003 0308 	and.w	r3, r3, #8
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d103      	bne.n	80043b2 <HAL_UART_IRQHandler+0x17a>
 80043aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d04f      	beq.n	8004452 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80043b2:	6878      	ldr	r0, [r7, #4]
 80043b4:	f000 fa51 	bl	800485a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	695b      	ldr	r3, [r3, #20]
 80043be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d041      	beq.n	800444a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	3314      	adds	r3, #20
 80043cc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043d0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80043d4:	e853 3f00 	ldrex	r3, [r3]
 80043d8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80043dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80043e0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80043e4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	3314      	adds	r3, #20
 80043ee:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80043f2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80043f6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043fa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80043fe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004402:	e841 2300 	strex	r3, r2, [r1]
 8004406:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800440a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800440e:	2b00      	cmp	r3, #0
 8004410:	d1d9      	bne.n	80043c6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004416:	2b00      	cmp	r3, #0
 8004418:	d013      	beq.n	8004442 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800441e:	4a7e      	ldr	r2, [pc, #504]	@ (8004618 <HAL_UART_IRQHandler+0x3e0>)
 8004420:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004426:	4618      	mov	r0, r3
 8004428:	f7fe f9e0 	bl	80027ec <HAL_DMA_Abort_IT>
 800442c:	4603      	mov	r3, r0
 800442e:	2b00      	cmp	r3, #0
 8004430:	d016      	beq.n	8004460 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004436:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004438:	687a      	ldr	r2, [r7, #4]
 800443a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800443c:	4610      	mov	r0, r2
 800443e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004440:	e00e      	b.n	8004460 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004442:	6878      	ldr	r0, [r7, #4]
 8004444:	f000 f99c 	bl	8004780 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004448:	e00a      	b.n	8004460 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800444a:	6878      	ldr	r0, [r7, #4]
 800444c:	f000 f998 	bl	8004780 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004450:	e006      	b.n	8004460 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004452:	6878      	ldr	r0, [r7, #4]
 8004454:	f000 f994 	bl	8004780 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2200      	movs	r2, #0
 800445c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800445e:	e175      	b.n	800474c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004460:	bf00      	nop
    return;
 8004462:	e173      	b.n	800474c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004468:	2b01      	cmp	r3, #1
 800446a:	f040 814f 	bne.w	800470c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800446e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004472:	f003 0310 	and.w	r3, r3, #16
 8004476:	2b00      	cmp	r3, #0
 8004478:	f000 8148 	beq.w	800470c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800447c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004480:	f003 0310 	and.w	r3, r3, #16
 8004484:	2b00      	cmp	r3, #0
 8004486:	f000 8141 	beq.w	800470c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800448a:	2300      	movs	r3, #0
 800448c:	60bb      	str	r3, [r7, #8]
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	60bb      	str	r3, [r7, #8]
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	685b      	ldr	r3, [r3, #4]
 800449c:	60bb      	str	r3, [r7, #8]
 800449e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	695b      	ldr	r3, [r3, #20]
 80044a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	f000 80b6 	beq.w	800461c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	685b      	ldr	r3, [r3, #4]
 80044b8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80044bc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	f000 8145 	beq.w	8004750 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80044ca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80044ce:	429a      	cmp	r2, r3
 80044d0:	f080 813e 	bcs.w	8004750 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80044da:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044e0:	699b      	ldr	r3, [r3, #24]
 80044e2:	2b20      	cmp	r3, #32
 80044e4:	f000 8088 	beq.w	80045f8 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	330c      	adds	r3, #12
 80044ee:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044f2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80044f6:	e853 3f00 	ldrex	r3, [r3]
 80044fa:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80044fe:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004502:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004506:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	330c      	adds	r3, #12
 8004510:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004514:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004518:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800451c:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004520:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004524:	e841 2300 	strex	r3, r2, [r1]
 8004528:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800452c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004530:	2b00      	cmp	r3, #0
 8004532:	d1d9      	bne.n	80044e8 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	3314      	adds	r3, #20
 800453a:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800453c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800453e:	e853 3f00 	ldrex	r3, [r3]
 8004542:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004544:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004546:	f023 0301 	bic.w	r3, r3, #1
 800454a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	3314      	adds	r3, #20
 8004554:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004558:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800455c:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800455e:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004560:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004564:	e841 2300 	strex	r3, r2, [r1]
 8004568:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800456a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800456c:	2b00      	cmp	r3, #0
 800456e:	d1e1      	bne.n	8004534 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	3314      	adds	r3, #20
 8004576:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004578:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800457a:	e853 3f00 	ldrex	r3, [r3]
 800457e:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004580:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004582:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004586:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	3314      	adds	r3, #20
 8004590:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004594:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004596:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004598:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800459a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800459c:	e841 2300 	strex	r3, r2, [r1]
 80045a0:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80045a2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d1e3      	bne.n	8004570 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2220      	movs	r2, #32
 80045ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2200      	movs	r2, #0
 80045b4:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	330c      	adds	r3, #12
 80045bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045be:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80045c0:	e853 3f00 	ldrex	r3, [r3]
 80045c4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80045c6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80045c8:	f023 0310 	bic.w	r3, r3, #16
 80045cc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	330c      	adds	r3, #12
 80045d6:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80045da:	65ba      	str	r2, [r7, #88]	@ 0x58
 80045dc:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045de:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80045e0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80045e2:	e841 2300 	strex	r3, r2, [r1]
 80045e6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80045e8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d1e3      	bne.n	80045b6 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045f2:	4618      	mov	r0, r3
 80045f4:	f7fe f8bf 	bl	8002776 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2202      	movs	r2, #2
 80045fc:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004606:	b29b      	uxth	r3, r3
 8004608:	1ad3      	subs	r3, r2, r3
 800460a:	b29b      	uxth	r3, r3
 800460c:	4619      	mov	r1, r3
 800460e:	6878      	ldr	r0, [r7, #4]
 8004610:	f000 f8bf 	bl	8004792 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004614:	e09c      	b.n	8004750 <HAL_UART_IRQHandler+0x518>
 8004616:	bf00      	nop
 8004618:	0800491f 	.word	0x0800491f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004624:	b29b      	uxth	r3, r3
 8004626:	1ad3      	subs	r3, r2, r3
 8004628:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004630:	b29b      	uxth	r3, r3
 8004632:	2b00      	cmp	r3, #0
 8004634:	f000 808e 	beq.w	8004754 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004638:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800463c:	2b00      	cmp	r3, #0
 800463e:	f000 8089 	beq.w	8004754 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	330c      	adds	r3, #12
 8004648:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800464a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800464c:	e853 3f00 	ldrex	r3, [r3]
 8004650:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004652:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004654:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004658:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	330c      	adds	r3, #12
 8004662:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8004666:	647a      	str	r2, [r7, #68]	@ 0x44
 8004668:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800466a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800466c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800466e:	e841 2300 	strex	r3, r2, [r1]
 8004672:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004674:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004676:	2b00      	cmp	r3, #0
 8004678:	d1e3      	bne.n	8004642 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	3314      	adds	r3, #20
 8004680:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004682:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004684:	e853 3f00 	ldrex	r3, [r3]
 8004688:	623b      	str	r3, [r7, #32]
   return(result);
 800468a:	6a3b      	ldr	r3, [r7, #32]
 800468c:	f023 0301 	bic.w	r3, r3, #1
 8004690:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	3314      	adds	r3, #20
 800469a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800469e:	633a      	str	r2, [r7, #48]	@ 0x30
 80046a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046a2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80046a4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80046a6:	e841 2300 	strex	r3, r2, [r1]
 80046aa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80046ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d1e3      	bne.n	800467a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2220      	movs	r2, #32
 80046b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2200      	movs	r2, #0
 80046be:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	330c      	adds	r3, #12
 80046c6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046c8:	693b      	ldr	r3, [r7, #16]
 80046ca:	e853 3f00 	ldrex	r3, [r3]
 80046ce:	60fb      	str	r3, [r7, #12]
   return(result);
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	f023 0310 	bic.w	r3, r3, #16
 80046d6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	330c      	adds	r3, #12
 80046e0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80046e4:	61fa      	str	r2, [r7, #28]
 80046e6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046e8:	69b9      	ldr	r1, [r7, #24]
 80046ea:	69fa      	ldr	r2, [r7, #28]
 80046ec:	e841 2300 	strex	r3, r2, [r1]
 80046f0:	617b      	str	r3, [r7, #20]
   return(result);
 80046f2:	697b      	ldr	r3, [r7, #20]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d1e3      	bne.n	80046c0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2202      	movs	r2, #2
 80046fc:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80046fe:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004702:	4619      	mov	r1, r3
 8004704:	6878      	ldr	r0, [r7, #4]
 8004706:	f000 f844 	bl	8004792 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800470a:	e023      	b.n	8004754 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800470c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004710:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004714:	2b00      	cmp	r3, #0
 8004716:	d009      	beq.n	800472c <HAL_UART_IRQHandler+0x4f4>
 8004718:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800471c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004720:	2b00      	cmp	r3, #0
 8004722:	d003      	beq.n	800472c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004724:	6878      	ldr	r0, [r7, #4]
 8004726:	f000 f90e 	bl	8004946 <UART_Transmit_IT>
    return;
 800472a:	e014      	b.n	8004756 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800472c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004730:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004734:	2b00      	cmp	r3, #0
 8004736:	d00e      	beq.n	8004756 <HAL_UART_IRQHandler+0x51e>
 8004738:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800473c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004740:	2b00      	cmp	r3, #0
 8004742:	d008      	beq.n	8004756 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004744:	6878      	ldr	r0, [r7, #4]
 8004746:	f000 f94d 	bl	80049e4 <UART_EndTransmit_IT>
    return;
 800474a:	e004      	b.n	8004756 <HAL_UART_IRQHandler+0x51e>
    return;
 800474c:	bf00      	nop
 800474e:	e002      	b.n	8004756 <HAL_UART_IRQHandler+0x51e>
      return;
 8004750:	bf00      	nop
 8004752:	e000      	b.n	8004756 <HAL_UART_IRQHandler+0x51e>
      return;
 8004754:	bf00      	nop
  }
}
 8004756:	37e8      	adds	r7, #232	@ 0xe8
 8004758:	46bd      	mov	sp, r7
 800475a:	bd80      	pop	{r7, pc}

0800475c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800475c:	b480      	push	{r7}
 800475e:	b083      	sub	sp, #12
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004764:	bf00      	nop
 8004766:	370c      	adds	r7, #12
 8004768:	46bd      	mov	sp, r7
 800476a:	bc80      	pop	{r7}
 800476c:	4770      	bx	lr

0800476e <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800476e:	b480      	push	{r7}
 8004770:	b083      	sub	sp, #12
 8004772:	af00      	add	r7, sp, #0
 8004774:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004776:	bf00      	nop
 8004778:	370c      	adds	r7, #12
 800477a:	46bd      	mov	sp, r7
 800477c:	bc80      	pop	{r7}
 800477e:	4770      	bx	lr

08004780 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004780:	b480      	push	{r7}
 8004782:	b083      	sub	sp, #12
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004788:	bf00      	nop
 800478a:	370c      	adds	r7, #12
 800478c:	46bd      	mov	sp, r7
 800478e:	bc80      	pop	{r7}
 8004790:	4770      	bx	lr

08004792 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004792:	b480      	push	{r7}
 8004794:	b083      	sub	sp, #12
 8004796:	af00      	add	r7, sp, #0
 8004798:	6078      	str	r0, [r7, #4]
 800479a:	460b      	mov	r3, r1
 800479c:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800479e:	bf00      	nop
 80047a0:	370c      	adds	r7, #12
 80047a2:	46bd      	mov	sp, r7
 80047a4:	bc80      	pop	{r7}
 80047a6:	4770      	bx	lr

080047a8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b086      	sub	sp, #24
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	60f8      	str	r0, [r7, #12]
 80047b0:	60b9      	str	r1, [r7, #8]
 80047b2:	603b      	str	r3, [r7, #0]
 80047b4:	4613      	mov	r3, r2
 80047b6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047b8:	e03b      	b.n	8004832 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047ba:	6a3b      	ldr	r3, [r7, #32]
 80047bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047c0:	d037      	beq.n	8004832 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047c2:	f7fd fa45 	bl	8001c50 <HAL_GetTick>
 80047c6:	4602      	mov	r2, r0
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	1ad3      	subs	r3, r2, r3
 80047cc:	6a3a      	ldr	r2, [r7, #32]
 80047ce:	429a      	cmp	r2, r3
 80047d0:	d302      	bcc.n	80047d8 <UART_WaitOnFlagUntilTimeout+0x30>
 80047d2:	6a3b      	ldr	r3, [r7, #32]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d101      	bne.n	80047dc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80047d8:	2303      	movs	r3, #3
 80047da:	e03a      	b.n	8004852 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	68db      	ldr	r3, [r3, #12]
 80047e2:	f003 0304 	and.w	r3, r3, #4
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d023      	beq.n	8004832 <UART_WaitOnFlagUntilTimeout+0x8a>
 80047ea:	68bb      	ldr	r3, [r7, #8]
 80047ec:	2b80      	cmp	r3, #128	@ 0x80
 80047ee:	d020      	beq.n	8004832 <UART_WaitOnFlagUntilTimeout+0x8a>
 80047f0:	68bb      	ldr	r3, [r7, #8]
 80047f2:	2b40      	cmp	r3, #64	@ 0x40
 80047f4:	d01d      	beq.n	8004832 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f003 0308 	and.w	r3, r3, #8
 8004800:	2b08      	cmp	r3, #8
 8004802:	d116      	bne.n	8004832 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004804:	2300      	movs	r3, #0
 8004806:	617b      	str	r3, [r7, #20]
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	617b      	str	r3, [r7, #20]
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	685b      	ldr	r3, [r3, #4]
 8004816:	617b      	str	r3, [r7, #20]
 8004818:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800481a:	68f8      	ldr	r0, [r7, #12]
 800481c:	f000 f81d 	bl	800485a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	2208      	movs	r2, #8
 8004824:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	2200      	movs	r2, #0
 800482a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800482e:	2301      	movs	r3, #1
 8004830:	e00f      	b.n	8004852 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	681a      	ldr	r2, [r3, #0]
 8004838:	68bb      	ldr	r3, [r7, #8]
 800483a:	4013      	ands	r3, r2
 800483c:	68ba      	ldr	r2, [r7, #8]
 800483e:	429a      	cmp	r2, r3
 8004840:	bf0c      	ite	eq
 8004842:	2301      	moveq	r3, #1
 8004844:	2300      	movne	r3, #0
 8004846:	b2db      	uxtb	r3, r3
 8004848:	461a      	mov	r2, r3
 800484a:	79fb      	ldrb	r3, [r7, #7]
 800484c:	429a      	cmp	r2, r3
 800484e:	d0b4      	beq.n	80047ba <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004850:	2300      	movs	r3, #0
}
 8004852:	4618      	mov	r0, r3
 8004854:	3718      	adds	r7, #24
 8004856:	46bd      	mov	sp, r7
 8004858:	bd80      	pop	{r7, pc}

0800485a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800485a:	b480      	push	{r7}
 800485c:	b095      	sub	sp, #84	@ 0x54
 800485e:	af00      	add	r7, sp, #0
 8004860:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	330c      	adds	r3, #12
 8004868:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800486a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800486c:	e853 3f00 	ldrex	r3, [r3]
 8004870:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004872:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004874:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004878:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	330c      	adds	r3, #12
 8004880:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004882:	643a      	str	r2, [r7, #64]	@ 0x40
 8004884:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004886:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004888:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800488a:	e841 2300 	strex	r3, r2, [r1]
 800488e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004890:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004892:	2b00      	cmp	r3, #0
 8004894:	d1e5      	bne.n	8004862 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	3314      	adds	r3, #20
 800489c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800489e:	6a3b      	ldr	r3, [r7, #32]
 80048a0:	e853 3f00 	ldrex	r3, [r3]
 80048a4:	61fb      	str	r3, [r7, #28]
   return(result);
 80048a6:	69fb      	ldr	r3, [r7, #28]
 80048a8:	f023 0301 	bic.w	r3, r3, #1
 80048ac:	64bb      	str	r3, [r7, #72]	@ 0x48
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	3314      	adds	r3, #20
 80048b4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80048b6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80048b8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048ba:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80048bc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80048be:	e841 2300 	strex	r3, r2, [r1]
 80048c2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80048c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d1e5      	bne.n	8004896 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048ce:	2b01      	cmp	r3, #1
 80048d0:	d119      	bne.n	8004906 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	330c      	adds	r3, #12
 80048d8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	e853 3f00 	ldrex	r3, [r3]
 80048e0:	60bb      	str	r3, [r7, #8]
   return(result);
 80048e2:	68bb      	ldr	r3, [r7, #8]
 80048e4:	f023 0310 	bic.w	r3, r3, #16
 80048e8:	647b      	str	r3, [r7, #68]	@ 0x44
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	330c      	adds	r3, #12
 80048f0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80048f2:	61ba      	str	r2, [r7, #24]
 80048f4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048f6:	6979      	ldr	r1, [r7, #20]
 80048f8:	69ba      	ldr	r2, [r7, #24]
 80048fa:	e841 2300 	strex	r3, r2, [r1]
 80048fe:	613b      	str	r3, [r7, #16]
   return(result);
 8004900:	693b      	ldr	r3, [r7, #16]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d1e5      	bne.n	80048d2 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2220      	movs	r2, #32
 800490a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2200      	movs	r2, #0
 8004912:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004914:	bf00      	nop
 8004916:	3754      	adds	r7, #84	@ 0x54
 8004918:	46bd      	mov	sp, r7
 800491a:	bc80      	pop	{r7}
 800491c:	4770      	bx	lr

0800491e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800491e:	b580      	push	{r7, lr}
 8004920:	b084      	sub	sp, #16
 8004922:	af00      	add	r7, sp, #0
 8004924:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800492a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	2200      	movs	r2, #0
 8004930:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	2200      	movs	r2, #0
 8004936:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004938:	68f8      	ldr	r0, [r7, #12]
 800493a:	f7ff ff21 	bl	8004780 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800493e:	bf00      	nop
 8004940:	3710      	adds	r7, #16
 8004942:	46bd      	mov	sp, r7
 8004944:	bd80      	pop	{r7, pc}

08004946 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004946:	b480      	push	{r7}
 8004948:	b085      	sub	sp, #20
 800494a:	af00      	add	r7, sp, #0
 800494c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004954:	b2db      	uxtb	r3, r3
 8004956:	2b21      	cmp	r3, #33	@ 0x21
 8004958:	d13e      	bne.n	80049d8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	689b      	ldr	r3, [r3, #8]
 800495e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004962:	d114      	bne.n	800498e <UART_Transmit_IT+0x48>
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	691b      	ldr	r3, [r3, #16]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d110      	bne.n	800498e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6a1b      	ldr	r3, [r3, #32]
 8004970:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	881b      	ldrh	r3, [r3, #0]
 8004976:	461a      	mov	r2, r3
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004980:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6a1b      	ldr	r3, [r3, #32]
 8004986:	1c9a      	adds	r2, r3, #2
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	621a      	str	r2, [r3, #32]
 800498c:	e008      	b.n	80049a0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6a1b      	ldr	r3, [r3, #32]
 8004992:	1c59      	adds	r1, r3, #1
 8004994:	687a      	ldr	r2, [r7, #4]
 8004996:	6211      	str	r1, [r2, #32]
 8004998:	781a      	ldrb	r2, [r3, #0]
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80049a4:	b29b      	uxth	r3, r3
 80049a6:	3b01      	subs	r3, #1
 80049a8:	b29b      	uxth	r3, r3
 80049aa:	687a      	ldr	r2, [r7, #4]
 80049ac:	4619      	mov	r1, r3
 80049ae:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d10f      	bne.n	80049d4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	68da      	ldr	r2, [r3, #12]
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80049c2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	68da      	ldr	r2, [r3, #12]
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80049d2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80049d4:	2300      	movs	r3, #0
 80049d6:	e000      	b.n	80049da <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80049d8:	2302      	movs	r3, #2
  }
}
 80049da:	4618      	mov	r0, r3
 80049dc:	3714      	adds	r7, #20
 80049de:	46bd      	mov	sp, r7
 80049e0:	bc80      	pop	{r7}
 80049e2:	4770      	bx	lr

080049e4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80049e4:	b580      	push	{r7, lr}
 80049e6:	b082      	sub	sp, #8
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	68da      	ldr	r2, [r3, #12]
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80049fa:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2220      	movs	r2, #32
 8004a00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004a04:	6878      	ldr	r0, [r7, #4]
 8004a06:	f7ff fea9 	bl	800475c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004a0a:	2300      	movs	r3, #0
}
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	3708      	adds	r7, #8
 8004a10:	46bd      	mov	sp, r7
 8004a12:	bd80      	pop	{r7, pc}

08004a14 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b08c      	sub	sp, #48	@ 0x30
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004a22:	b2db      	uxtb	r3, r3
 8004a24:	2b22      	cmp	r3, #34	@ 0x22
 8004a26:	f040 80ae 	bne.w	8004b86 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	689b      	ldr	r3, [r3, #8]
 8004a2e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a32:	d117      	bne.n	8004a64 <UART_Receive_IT+0x50>
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	691b      	ldr	r3, [r3, #16]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d113      	bne.n	8004a64 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a44:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	685b      	ldr	r3, [r3, #4]
 8004a4c:	b29b      	uxth	r3, r3
 8004a4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a52:	b29a      	uxth	r2, r3
 8004a54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a56:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a5c:	1c9a      	adds	r2, r3, #2
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	629a      	str	r2, [r3, #40]	@ 0x28
 8004a62:	e026      	b.n	8004ab2 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a68:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	689b      	ldr	r3, [r3, #8]
 8004a72:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a76:	d007      	beq.n	8004a88 <UART_Receive_IT+0x74>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	689b      	ldr	r3, [r3, #8]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d10a      	bne.n	8004a96 <UART_Receive_IT+0x82>
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	691b      	ldr	r3, [r3, #16]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d106      	bne.n	8004a96 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	685b      	ldr	r3, [r3, #4]
 8004a8e:	b2da      	uxtb	r2, r3
 8004a90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a92:	701a      	strb	r2, [r3, #0]
 8004a94:	e008      	b.n	8004aa8 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	685b      	ldr	r3, [r3, #4]
 8004a9c:	b2db      	uxtb	r3, r3
 8004a9e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004aa2:	b2da      	uxtb	r2, r3
 8004aa4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004aa6:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004aac:	1c5a      	adds	r2, r3, #1
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004ab6:	b29b      	uxth	r3, r3
 8004ab8:	3b01      	subs	r3, #1
 8004aba:	b29b      	uxth	r3, r3
 8004abc:	687a      	ldr	r2, [r7, #4]
 8004abe:	4619      	mov	r1, r3
 8004ac0:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d15d      	bne.n	8004b82 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	68da      	ldr	r2, [r3, #12]
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f022 0220 	bic.w	r2, r2, #32
 8004ad4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	68da      	ldr	r2, [r3, #12]
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004ae4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	695a      	ldr	r2, [r3, #20]
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f022 0201 	bic.w	r2, r2, #1
 8004af4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2220      	movs	r2, #32
 8004afa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	2200      	movs	r2, #0
 8004b02:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b08:	2b01      	cmp	r3, #1
 8004b0a:	d135      	bne.n	8004b78 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2200      	movs	r2, #0
 8004b10:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	330c      	adds	r3, #12
 8004b18:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b1a:	697b      	ldr	r3, [r7, #20]
 8004b1c:	e853 3f00 	ldrex	r3, [r3]
 8004b20:	613b      	str	r3, [r7, #16]
   return(result);
 8004b22:	693b      	ldr	r3, [r7, #16]
 8004b24:	f023 0310 	bic.w	r3, r3, #16
 8004b28:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	330c      	adds	r3, #12
 8004b30:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b32:	623a      	str	r2, [r7, #32]
 8004b34:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b36:	69f9      	ldr	r1, [r7, #28]
 8004b38:	6a3a      	ldr	r2, [r7, #32]
 8004b3a:	e841 2300 	strex	r3, r2, [r1]
 8004b3e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004b40:	69bb      	ldr	r3, [r7, #24]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d1e5      	bne.n	8004b12 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f003 0310 	and.w	r3, r3, #16
 8004b50:	2b10      	cmp	r3, #16
 8004b52:	d10a      	bne.n	8004b6a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004b54:	2300      	movs	r3, #0
 8004b56:	60fb      	str	r3, [r7, #12]
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	60fb      	str	r3, [r7, #12]
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	685b      	ldr	r3, [r3, #4]
 8004b66:	60fb      	str	r3, [r7, #12]
 8004b68:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004b6e:	4619      	mov	r1, r3
 8004b70:	6878      	ldr	r0, [r7, #4]
 8004b72:	f7ff fe0e 	bl	8004792 <HAL_UARTEx_RxEventCallback>
 8004b76:	e002      	b.n	8004b7e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004b78:	6878      	ldr	r0, [r7, #4]
 8004b7a:	f7ff fdf8 	bl	800476e <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004b7e:	2300      	movs	r3, #0
 8004b80:	e002      	b.n	8004b88 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004b82:	2300      	movs	r3, #0
 8004b84:	e000      	b.n	8004b88 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004b86:	2302      	movs	r3, #2
  }
}
 8004b88:	4618      	mov	r0, r3
 8004b8a:	3730      	adds	r7, #48	@ 0x30
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	bd80      	pop	{r7, pc}

08004b90 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b084      	sub	sp, #16
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	691b      	ldr	r3, [r3, #16]
 8004b9e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	68da      	ldr	r2, [r3, #12]
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	430a      	orrs	r2, r1
 8004bac:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	689a      	ldr	r2, [r3, #8]
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	691b      	ldr	r3, [r3, #16]
 8004bb6:	431a      	orrs	r2, r3
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	695b      	ldr	r3, [r3, #20]
 8004bbc:	4313      	orrs	r3, r2
 8004bbe:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	68db      	ldr	r3, [r3, #12]
 8004bc6:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8004bca:	f023 030c 	bic.w	r3, r3, #12
 8004bce:	687a      	ldr	r2, [r7, #4]
 8004bd0:	6812      	ldr	r2, [r2, #0]
 8004bd2:	68b9      	ldr	r1, [r7, #8]
 8004bd4:	430b      	orrs	r3, r1
 8004bd6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	695b      	ldr	r3, [r3, #20]
 8004bde:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	699a      	ldr	r2, [r3, #24]
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	430a      	orrs	r2, r1
 8004bec:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	4a2c      	ldr	r2, [pc, #176]	@ (8004ca4 <UART_SetConfig+0x114>)
 8004bf4:	4293      	cmp	r3, r2
 8004bf6:	d103      	bne.n	8004c00 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004bf8:	f7fe fc1c 	bl	8003434 <HAL_RCC_GetPCLK2Freq>
 8004bfc:	60f8      	str	r0, [r7, #12]
 8004bfe:	e002      	b.n	8004c06 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004c00:	f7fe fc04 	bl	800340c <HAL_RCC_GetPCLK1Freq>
 8004c04:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004c06:	68fa      	ldr	r2, [r7, #12]
 8004c08:	4613      	mov	r3, r2
 8004c0a:	009b      	lsls	r3, r3, #2
 8004c0c:	4413      	add	r3, r2
 8004c0e:	009a      	lsls	r2, r3, #2
 8004c10:	441a      	add	r2, r3
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	685b      	ldr	r3, [r3, #4]
 8004c16:	009b      	lsls	r3, r3, #2
 8004c18:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c1c:	4a22      	ldr	r2, [pc, #136]	@ (8004ca8 <UART_SetConfig+0x118>)
 8004c1e:	fba2 2303 	umull	r2, r3, r2, r3
 8004c22:	095b      	lsrs	r3, r3, #5
 8004c24:	0119      	lsls	r1, r3, #4
 8004c26:	68fa      	ldr	r2, [r7, #12]
 8004c28:	4613      	mov	r3, r2
 8004c2a:	009b      	lsls	r3, r3, #2
 8004c2c:	4413      	add	r3, r2
 8004c2e:	009a      	lsls	r2, r3, #2
 8004c30:	441a      	add	r2, r3
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	685b      	ldr	r3, [r3, #4]
 8004c36:	009b      	lsls	r3, r3, #2
 8004c38:	fbb2 f2f3 	udiv	r2, r2, r3
 8004c3c:	4b1a      	ldr	r3, [pc, #104]	@ (8004ca8 <UART_SetConfig+0x118>)
 8004c3e:	fba3 0302 	umull	r0, r3, r3, r2
 8004c42:	095b      	lsrs	r3, r3, #5
 8004c44:	2064      	movs	r0, #100	@ 0x64
 8004c46:	fb00 f303 	mul.w	r3, r0, r3
 8004c4a:	1ad3      	subs	r3, r2, r3
 8004c4c:	011b      	lsls	r3, r3, #4
 8004c4e:	3332      	adds	r3, #50	@ 0x32
 8004c50:	4a15      	ldr	r2, [pc, #84]	@ (8004ca8 <UART_SetConfig+0x118>)
 8004c52:	fba2 2303 	umull	r2, r3, r2, r3
 8004c56:	095b      	lsrs	r3, r3, #5
 8004c58:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004c5c:	4419      	add	r1, r3
 8004c5e:	68fa      	ldr	r2, [r7, #12]
 8004c60:	4613      	mov	r3, r2
 8004c62:	009b      	lsls	r3, r3, #2
 8004c64:	4413      	add	r3, r2
 8004c66:	009a      	lsls	r2, r3, #2
 8004c68:	441a      	add	r2, r3
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	685b      	ldr	r3, [r3, #4]
 8004c6e:	009b      	lsls	r3, r3, #2
 8004c70:	fbb2 f2f3 	udiv	r2, r2, r3
 8004c74:	4b0c      	ldr	r3, [pc, #48]	@ (8004ca8 <UART_SetConfig+0x118>)
 8004c76:	fba3 0302 	umull	r0, r3, r3, r2
 8004c7a:	095b      	lsrs	r3, r3, #5
 8004c7c:	2064      	movs	r0, #100	@ 0x64
 8004c7e:	fb00 f303 	mul.w	r3, r0, r3
 8004c82:	1ad3      	subs	r3, r2, r3
 8004c84:	011b      	lsls	r3, r3, #4
 8004c86:	3332      	adds	r3, #50	@ 0x32
 8004c88:	4a07      	ldr	r2, [pc, #28]	@ (8004ca8 <UART_SetConfig+0x118>)
 8004c8a:	fba2 2303 	umull	r2, r3, r2, r3
 8004c8e:	095b      	lsrs	r3, r3, #5
 8004c90:	f003 020f 	and.w	r2, r3, #15
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	440a      	add	r2, r1
 8004c9a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004c9c:	bf00      	nop
 8004c9e:	3710      	adds	r7, #16
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	bd80      	pop	{r7, pc}
 8004ca4:	40013800 	.word	0x40013800
 8004ca8:	51eb851f 	.word	0x51eb851f

08004cac <__cvt>:
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004cb2:	461d      	mov	r5, r3
 8004cb4:	bfbb      	ittet	lt
 8004cb6:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8004cba:	461d      	movlt	r5, r3
 8004cbc:	2300      	movge	r3, #0
 8004cbe:	232d      	movlt	r3, #45	@ 0x2d
 8004cc0:	b088      	sub	sp, #32
 8004cc2:	4614      	mov	r4, r2
 8004cc4:	bfb8      	it	lt
 8004cc6:	4614      	movlt	r4, r2
 8004cc8:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8004cca:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8004ccc:	7013      	strb	r3, [r2, #0]
 8004cce:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8004cd0:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8004cd4:	f023 0820 	bic.w	r8, r3, #32
 8004cd8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004cdc:	d005      	beq.n	8004cea <__cvt+0x3e>
 8004cde:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8004ce2:	d100      	bne.n	8004ce6 <__cvt+0x3a>
 8004ce4:	3601      	adds	r6, #1
 8004ce6:	2302      	movs	r3, #2
 8004ce8:	e000      	b.n	8004cec <__cvt+0x40>
 8004cea:	2303      	movs	r3, #3
 8004cec:	aa07      	add	r2, sp, #28
 8004cee:	9204      	str	r2, [sp, #16]
 8004cf0:	aa06      	add	r2, sp, #24
 8004cf2:	e9cd a202 	strd	sl, r2, [sp, #8]
 8004cf6:	e9cd 3600 	strd	r3, r6, [sp]
 8004cfa:	4622      	mov	r2, r4
 8004cfc:	462b      	mov	r3, r5
 8004cfe:	f001 f883 	bl	8005e08 <_dtoa_r>
 8004d02:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8004d06:	4607      	mov	r7, r0
 8004d08:	d119      	bne.n	8004d3e <__cvt+0x92>
 8004d0a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8004d0c:	07db      	lsls	r3, r3, #31
 8004d0e:	d50e      	bpl.n	8004d2e <__cvt+0x82>
 8004d10:	eb00 0906 	add.w	r9, r0, r6
 8004d14:	2200      	movs	r2, #0
 8004d16:	2300      	movs	r3, #0
 8004d18:	4620      	mov	r0, r4
 8004d1a:	4629      	mov	r1, r5
 8004d1c:	f7fb fef8 	bl	8000b10 <__aeabi_dcmpeq>
 8004d20:	b108      	cbz	r0, 8004d26 <__cvt+0x7a>
 8004d22:	f8cd 901c 	str.w	r9, [sp, #28]
 8004d26:	2230      	movs	r2, #48	@ 0x30
 8004d28:	9b07      	ldr	r3, [sp, #28]
 8004d2a:	454b      	cmp	r3, r9
 8004d2c:	d31e      	bcc.n	8004d6c <__cvt+0xc0>
 8004d2e:	4638      	mov	r0, r7
 8004d30:	9b07      	ldr	r3, [sp, #28]
 8004d32:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8004d34:	1bdb      	subs	r3, r3, r7
 8004d36:	6013      	str	r3, [r2, #0]
 8004d38:	b008      	add	sp, #32
 8004d3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d3e:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004d42:	eb00 0906 	add.w	r9, r0, r6
 8004d46:	d1e5      	bne.n	8004d14 <__cvt+0x68>
 8004d48:	7803      	ldrb	r3, [r0, #0]
 8004d4a:	2b30      	cmp	r3, #48	@ 0x30
 8004d4c:	d10a      	bne.n	8004d64 <__cvt+0xb8>
 8004d4e:	2200      	movs	r2, #0
 8004d50:	2300      	movs	r3, #0
 8004d52:	4620      	mov	r0, r4
 8004d54:	4629      	mov	r1, r5
 8004d56:	f7fb fedb 	bl	8000b10 <__aeabi_dcmpeq>
 8004d5a:	b918      	cbnz	r0, 8004d64 <__cvt+0xb8>
 8004d5c:	f1c6 0601 	rsb	r6, r6, #1
 8004d60:	f8ca 6000 	str.w	r6, [sl]
 8004d64:	f8da 3000 	ldr.w	r3, [sl]
 8004d68:	4499      	add	r9, r3
 8004d6a:	e7d3      	b.n	8004d14 <__cvt+0x68>
 8004d6c:	1c59      	adds	r1, r3, #1
 8004d6e:	9107      	str	r1, [sp, #28]
 8004d70:	701a      	strb	r2, [r3, #0]
 8004d72:	e7d9      	b.n	8004d28 <__cvt+0x7c>

08004d74 <__exponent>:
 8004d74:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004d76:	2900      	cmp	r1, #0
 8004d78:	bfb6      	itet	lt
 8004d7a:	232d      	movlt	r3, #45	@ 0x2d
 8004d7c:	232b      	movge	r3, #43	@ 0x2b
 8004d7e:	4249      	neglt	r1, r1
 8004d80:	2909      	cmp	r1, #9
 8004d82:	7002      	strb	r2, [r0, #0]
 8004d84:	7043      	strb	r3, [r0, #1]
 8004d86:	dd29      	ble.n	8004ddc <__exponent+0x68>
 8004d88:	f10d 0307 	add.w	r3, sp, #7
 8004d8c:	461d      	mov	r5, r3
 8004d8e:	270a      	movs	r7, #10
 8004d90:	fbb1 f6f7 	udiv	r6, r1, r7
 8004d94:	461a      	mov	r2, r3
 8004d96:	fb07 1416 	mls	r4, r7, r6, r1
 8004d9a:	3430      	adds	r4, #48	@ 0x30
 8004d9c:	f802 4c01 	strb.w	r4, [r2, #-1]
 8004da0:	460c      	mov	r4, r1
 8004da2:	2c63      	cmp	r4, #99	@ 0x63
 8004da4:	4631      	mov	r1, r6
 8004da6:	f103 33ff 	add.w	r3, r3, #4294967295
 8004daa:	dcf1      	bgt.n	8004d90 <__exponent+0x1c>
 8004dac:	3130      	adds	r1, #48	@ 0x30
 8004dae:	1e94      	subs	r4, r2, #2
 8004db0:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004db4:	4623      	mov	r3, r4
 8004db6:	1c41      	adds	r1, r0, #1
 8004db8:	42ab      	cmp	r3, r5
 8004dba:	d30a      	bcc.n	8004dd2 <__exponent+0x5e>
 8004dbc:	f10d 0309 	add.w	r3, sp, #9
 8004dc0:	1a9b      	subs	r3, r3, r2
 8004dc2:	42ac      	cmp	r4, r5
 8004dc4:	bf88      	it	hi
 8004dc6:	2300      	movhi	r3, #0
 8004dc8:	3302      	adds	r3, #2
 8004dca:	4403      	add	r3, r0
 8004dcc:	1a18      	subs	r0, r3, r0
 8004dce:	b003      	add	sp, #12
 8004dd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004dd2:	f813 6b01 	ldrb.w	r6, [r3], #1
 8004dd6:	f801 6f01 	strb.w	r6, [r1, #1]!
 8004dda:	e7ed      	b.n	8004db8 <__exponent+0x44>
 8004ddc:	2330      	movs	r3, #48	@ 0x30
 8004dde:	3130      	adds	r1, #48	@ 0x30
 8004de0:	7083      	strb	r3, [r0, #2]
 8004de2:	70c1      	strb	r1, [r0, #3]
 8004de4:	1d03      	adds	r3, r0, #4
 8004de6:	e7f1      	b.n	8004dcc <__exponent+0x58>

08004de8 <_printf_float>:
 8004de8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004dec:	b091      	sub	sp, #68	@ 0x44
 8004dee:	460c      	mov	r4, r1
 8004df0:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8004df4:	4616      	mov	r6, r2
 8004df6:	461f      	mov	r7, r3
 8004df8:	4605      	mov	r5, r0
 8004dfa:	f000 fef1 	bl	8005be0 <_localeconv_r>
 8004dfe:	6803      	ldr	r3, [r0, #0]
 8004e00:	4618      	mov	r0, r3
 8004e02:	9308      	str	r3, [sp, #32]
 8004e04:	f7fb f9a4 	bl	8000150 <strlen>
 8004e08:	2300      	movs	r3, #0
 8004e0a:	930e      	str	r3, [sp, #56]	@ 0x38
 8004e0c:	f8d8 3000 	ldr.w	r3, [r8]
 8004e10:	9009      	str	r0, [sp, #36]	@ 0x24
 8004e12:	3307      	adds	r3, #7
 8004e14:	f023 0307 	bic.w	r3, r3, #7
 8004e18:	f103 0208 	add.w	r2, r3, #8
 8004e1c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8004e20:	f8d4 b000 	ldr.w	fp, [r4]
 8004e24:	f8c8 2000 	str.w	r2, [r8]
 8004e28:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004e2c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8004e30:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004e32:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8004e36:	f04f 32ff 	mov.w	r2, #4294967295
 8004e3a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8004e3e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8004e42:	4b9c      	ldr	r3, [pc, #624]	@ (80050b4 <_printf_float+0x2cc>)
 8004e44:	f7fb fe96 	bl	8000b74 <__aeabi_dcmpun>
 8004e48:	bb70      	cbnz	r0, 8004ea8 <_printf_float+0xc0>
 8004e4a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8004e4e:	f04f 32ff 	mov.w	r2, #4294967295
 8004e52:	4b98      	ldr	r3, [pc, #608]	@ (80050b4 <_printf_float+0x2cc>)
 8004e54:	f7fb fe70 	bl	8000b38 <__aeabi_dcmple>
 8004e58:	bb30      	cbnz	r0, 8004ea8 <_printf_float+0xc0>
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	4640      	mov	r0, r8
 8004e60:	4649      	mov	r1, r9
 8004e62:	f7fb fe5f 	bl	8000b24 <__aeabi_dcmplt>
 8004e66:	b110      	cbz	r0, 8004e6e <_printf_float+0x86>
 8004e68:	232d      	movs	r3, #45	@ 0x2d
 8004e6a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004e6e:	4a92      	ldr	r2, [pc, #584]	@ (80050b8 <_printf_float+0x2d0>)
 8004e70:	4b92      	ldr	r3, [pc, #584]	@ (80050bc <_printf_float+0x2d4>)
 8004e72:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8004e76:	bf94      	ite	ls
 8004e78:	4690      	movls	r8, r2
 8004e7a:	4698      	movhi	r8, r3
 8004e7c:	2303      	movs	r3, #3
 8004e7e:	f04f 0900 	mov.w	r9, #0
 8004e82:	6123      	str	r3, [r4, #16]
 8004e84:	f02b 0304 	bic.w	r3, fp, #4
 8004e88:	6023      	str	r3, [r4, #0]
 8004e8a:	4633      	mov	r3, r6
 8004e8c:	4621      	mov	r1, r4
 8004e8e:	4628      	mov	r0, r5
 8004e90:	9700      	str	r7, [sp, #0]
 8004e92:	aa0f      	add	r2, sp, #60	@ 0x3c
 8004e94:	f000 f9d4 	bl	8005240 <_printf_common>
 8004e98:	3001      	adds	r0, #1
 8004e9a:	f040 8090 	bne.w	8004fbe <_printf_float+0x1d6>
 8004e9e:	f04f 30ff 	mov.w	r0, #4294967295
 8004ea2:	b011      	add	sp, #68	@ 0x44
 8004ea4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ea8:	4642      	mov	r2, r8
 8004eaa:	464b      	mov	r3, r9
 8004eac:	4640      	mov	r0, r8
 8004eae:	4649      	mov	r1, r9
 8004eb0:	f7fb fe60 	bl	8000b74 <__aeabi_dcmpun>
 8004eb4:	b148      	cbz	r0, 8004eca <_printf_float+0xe2>
 8004eb6:	464b      	mov	r3, r9
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	bfb8      	it	lt
 8004ebc:	232d      	movlt	r3, #45	@ 0x2d
 8004ebe:	4a80      	ldr	r2, [pc, #512]	@ (80050c0 <_printf_float+0x2d8>)
 8004ec0:	bfb8      	it	lt
 8004ec2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8004ec6:	4b7f      	ldr	r3, [pc, #508]	@ (80050c4 <_printf_float+0x2dc>)
 8004ec8:	e7d3      	b.n	8004e72 <_printf_float+0x8a>
 8004eca:	6863      	ldr	r3, [r4, #4]
 8004ecc:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8004ed0:	1c5a      	adds	r2, r3, #1
 8004ed2:	d13f      	bne.n	8004f54 <_printf_float+0x16c>
 8004ed4:	2306      	movs	r3, #6
 8004ed6:	6063      	str	r3, [r4, #4]
 8004ed8:	2200      	movs	r2, #0
 8004eda:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8004ede:	6023      	str	r3, [r4, #0]
 8004ee0:	9206      	str	r2, [sp, #24]
 8004ee2:	aa0e      	add	r2, sp, #56	@ 0x38
 8004ee4:	e9cd a204 	strd	sl, r2, [sp, #16]
 8004ee8:	aa0d      	add	r2, sp, #52	@ 0x34
 8004eea:	9203      	str	r2, [sp, #12]
 8004eec:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8004ef0:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8004ef4:	6863      	ldr	r3, [r4, #4]
 8004ef6:	4642      	mov	r2, r8
 8004ef8:	9300      	str	r3, [sp, #0]
 8004efa:	4628      	mov	r0, r5
 8004efc:	464b      	mov	r3, r9
 8004efe:	910a      	str	r1, [sp, #40]	@ 0x28
 8004f00:	f7ff fed4 	bl	8004cac <__cvt>
 8004f04:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8004f06:	4680      	mov	r8, r0
 8004f08:	2947      	cmp	r1, #71	@ 0x47
 8004f0a:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8004f0c:	d128      	bne.n	8004f60 <_printf_float+0x178>
 8004f0e:	1cc8      	adds	r0, r1, #3
 8004f10:	db02      	blt.n	8004f18 <_printf_float+0x130>
 8004f12:	6863      	ldr	r3, [r4, #4]
 8004f14:	4299      	cmp	r1, r3
 8004f16:	dd40      	ble.n	8004f9a <_printf_float+0x1b2>
 8004f18:	f1aa 0a02 	sub.w	sl, sl, #2
 8004f1c:	fa5f fa8a 	uxtb.w	sl, sl
 8004f20:	4652      	mov	r2, sl
 8004f22:	3901      	subs	r1, #1
 8004f24:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8004f28:	910d      	str	r1, [sp, #52]	@ 0x34
 8004f2a:	f7ff ff23 	bl	8004d74 <__exponent>
 8004f2e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004f30:	4681      	mov	r9, r0
 8004f32:	1813      	adds	r3, r2, r0
 8004f34:	2a01      	cmp	r2, #1
 8004f36:	6123      	str	r3, [r4, #16]
 8004f38:	dc02      	bgt.n	8004f40 <_printf_float+0x158>
 8004f3a:	6822      	ldr	r2, [r4, #0]
 8004f3c:	07d2      	lsls	r2, r2, #31
 8004f3e:	d501      	bpl.n	8004f44 <_printf_float+0x15c>
 8004f40:	3301      	adds	r3, #1
 8004f42:	6123      	str	r3, [r4, #16]
 8004f44:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d09e      	beq.n	8004e8a <_printf_float+0xa2>
 8004f4c:	232d      	movs	r3, #45	@ 0x2d
 8004f4e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004f52:	e79a      	b.n	8004e8a <_printf_float+0xa2>
 8004f54:	2947      	cmp	r1, #71	@ 0x47
 8004f56:	d1bf      	bne.n	8004ed8 <_printf_float+0xf0>
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d1bd      	bne.n	8004ed8 <_printf_float+0xf0>
 8004f5c:	2301      	movs	r3, #1
 8004f5e:	e7ba      	b.n	8004ed6 <_printf_float+0xee>
 8004f60:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004f64:	d9dc      	bls.n	8004f20 <_printf_float+0x138>
 8004f66:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8004f6a:	d118      	bne.n	8004f9e <_printf_float+0x1b6>
 8004f6c:	2900      	cmp	r1, #0
 8004f6e:	6863      	ldr	r3, [r4, #4]
 8004f70:	dd0b      	ble.n	8004f8a <_printf_float+0x1a2>
 8004f72:	6121      	str	r1, [r4, #16]
 8004f74:	b913      	cbnz	r3, 8004f7c <_printf_float+0x194>
 8004f76:	6822      	ldr	r2, [r4, #0]
 8004f78:	07d0      	lsls	r0, r2, #31
 8004f7a:	d502      	bpl.n	8004f82 <_printf_float+0x19a>
 8004f7c:	3301      	adds	r3, #1
 8004f7e:	440b      	add	r3, r1
 8004f80:	6123      	str	r3, [r4, #16]
 8004f82:	f04f 0900 	mov.w	r9, #0
 8004f86:	65a1      	str	r1, [r4, #88]	@ 0x58
 8004f88:	e7dc      	b.n	8004f44 <_printf_float+0x15c>
 8004f8a:	b913      	cbnz	r3, 8004f92 <_printf_float+0x1aa>
 8004f8c:	6822      	ldr	r2, [r4, #0]
 8004f8e:	07d2      	lsls	r2, r2, #31
 8004f90:	d501      	bpl.n	8004f96 <_printf_float+0x1ae>
 8004f92:	3302      	adds	r3, #2
 8004f94:	e7f4      	b.n	8004f80 <_printf_float+0x198>
 8004f96:	2301      	movs	r3, #1
 8004f98:	e7f2      	b.n	8004f80 <_printf_float+0x198>
 8004f9a:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8004f9e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004fa0:	4299      	cmp	r1, r3
 8004fa2:	db05      	blt.n	8004fb0 <_printf_float+0x1c8>
 8004fa4:	6823      	ldr	r3, [r4, #0]
 8004fa6:	6121      	str	r1, [r4, #16]
 8004fa8:	07d8      	lsls	r0, r3, #31
 8004faa:	d5ea      	bpl.n	8004f82 <_printf_float+0x19a>
 8004fac:	1c4b      	adds	r3, r1, #1
 8004fae:	e7e7      	b.n	8004f80 <_printf_float+0x198>
 8004fb0:	2900      	cmp	r1, #0
 8004fb2:	bfcc      	ite	gt
 8004fb4:	2201      	movgt	r2, #1
 8004fb6:	f1c1 0202 	rsble	r2, r1, #2
 8004fba:	4413      	add	r3, r2
 8004fbc:	e7e0      	b.n	8004f80 <_printf_float+0x198>
 8004fbe:	6823      	ldr	r3, [r4, #0]
 8004fc0:	055a      	lsls	r2, r3, #21
 8004fc2:	d407      	bmi.n	8004fd4 <_printf_float+0x1ec>
 8004fc4:	6923      	ldr	r3, [r4, #16]
 8004fc6:	4642      	mov	r2, r8
 8004fc8:	4631      	mov	r1, r6
 8004fca:	4628      	mov	r0, r5
 8004fcc:	47b8      	blx	r7
 8004fce:	3001      	adds	r0, #1
 8004fd0:	d12b      	bne.n	800502a <_printf_float+0x242>
 8004fd2:	e764      	b.n	8004e9e <_printf_float+0xb6>
 8004fd4:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004fd8:	f240 80dc 	bls.w	8005194 <_printf_float+0x3ac>
 8004fdc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	f7fb fd94 	bl	8000b10 <__aeabi_dcmpeq>
 8004fe8:	2800      	cmp	r0, #0
 8004fea:	d033      	beq.n	8005054 <_printf_float+0x26c>
 8004fec:	2301      	movs	r3, #1
 8004fee:	4631      	mov	r1, r6
 8004ff0:	4628      	mov	r0, r5
 8004ff2:	4a35      	ldr	r2, [pc, #212]	@ (80050c8 <_printf_float+0x2e0>)
 8004ff4:	47b8      	blx	r7
 8004ff6:	3001      	adds	r0, #1
 8004ff8:	f43f af51 	beq.w	8004e9e <_printf_float+0xb6>
 8004ffc:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8005000:	4543      	cmp	r3, r8
 8005002:	db02      	blt.n	800500a <_printf_float+0x222>
 8005004:	6823      	ldr	r3, [r4, #0]
 8005006:	07d8      	lsls	r0, r3, #31
 8005008:	d50f      	bpl.n	800502a <_printf_float+0x242>
 800500a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800500e:	4631      	mov	r1, r6
 8005010:	4628      	mov	r0, r5
 8005012:	47b8      	blx	r7
 8005014:	3001      	adds	r0, #1
 8005016:	f43f af42 	beq.w	8004e9e <_printf_float+0xb6>
 800501a:	f04f 0900 	mov.w	r9, #0
 800501e:	f108 38ff 	add.w	r8, r8, #4294967295
 8005022:	f104 0a1a 	add.w	sl, r4, #26
 8005026:	45c8      	cmp	r8, r9
 8005028:	dc09      	bgt.n	800503e <_printf_float+0x256>
 800502a:	6823      	ldr	r3, [r4, #0]
 800502c:	079b      	lsls	r3, r3, #30
 800502e:	f100 8102 	bmi.w	8005236 <_printf_float+0x44e>
 8005032:	68e0      	ldr	r0, [r4, #12]
 8005034:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005036:	4298      	cmp	r0, r3
 8005038:	bfb8      	it	lt
 800503a:	4618      	movlt	r0, r3
 800503c:	e731      	b.n	8004ea2 <_printf_float+0xba>
 800503e:	2301      	movs	r3, #1
 8005040:	4652      	mov	r2, sl
 8005042:	4631      	mov	r1, r6
 8005044:	4628      	mov	r0, r5
 8005046:	47b8      	blx	r7
 8005048:	3001      	adds	r0, #1
 800504a:	f43f af28 	beq.w	8004e9e <_printf_float+0xb6>
 800504e:	f109 0901 	add.w	r9, r9, #1
 8005052:	e7e8      	b.n	8005026 <_printf_float+0x23e>
 8005054:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005056:	2b00      	cmp	r3, #0
 8005058:	dc38      	bgt.n	80050cc <_printf_float+0x2e4>
 800505a:	2301      	movs	r3, #1
 800505c:	4631      	mov	r1, r6
 800505e:	4628      	mov	r0, r5
 8005060:	4a19      	ldr	r2, [pc, #100]	@ (80050c8 <_printf_float+0x2e0>)
 8005062:	47b8      	blx	r7
 8005064:	3001      	adds	r0, #1
 8005066:	f43f af1a 	beq.w	8004e9e <_printf_float+0xb6>
 800506a:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 800506e:	ea59 0303 	orrs.w	r3, r9, r3
 8005072:	d102      	bne.n	800507a <_printf_float+0x292>
 8005074:	6823      	ldr	r3, [r4, #0]
 8005076:	07d9      	lsls	r1, r3, #31
 8005078:	d5d7      	bpl.n	800502a <_printf_float+0x242>
 800507a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800507e:	4631      	mov	r1, r6
 8005080:	4628      	mov	r0, r5
 8005082:	47b8      	blx	r7
 8005084:	3001      	adds	r0, #1
 8005086:	f43f af0a 	beq.w	8004e9e <_printf_float+0xb6>
 800508a:	f04f 0a00 	mov.w	sl, #0
 800508e:	f104 0b1a 	add.w	fp, r4, #26
 8005092:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005094:	425b      	negs	r3, r3
 8005096:	4553      	cmp	r3, sl
 8005098:	dc01      	bgt.n	800509e <_printf_float+0x2b6>
 800509a:	464b      	mov	r3, r9
 800509c:	e793      	b.n	8004fc6 <_printf_float+0x1de>
 800509e:	2301      	movs	r3, #1
 80050a0:	465a      	mov	r2, fp
 80050a2:	4631      	mov	r1, r6
 80050a4:	4628      	mov	r0, r5
 80050a6:	47b8      	blx	r7
 80050a8:	3001      	adds	r0, #1
 80050aa:	f43f aef8 	beq.w	8004e9e <_printf_float+0xb6>
 80050ae:	f10a 0a01 	add.w	sl, sl, #1
 80050b2:	e7ee      	b.n	8005092 <_printf_float+0x2aa>
 80050b4:	7fefffff 	.word	0x7fefffff
 80050b8:	08009436 	.word	0x08009436
 80050bc:	0800943a 	.word	0x0800943a
 80050c0:	0800943e 	.word	0x0800943e
 80050c4:	08009442 	.word	0x08009442
 80050c8:	08009446 	.word	0x08009446
 80050cc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80050ce:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80050d2:	4553      	cmp	r3, sl
 80050d4:	bfa8      	it	ge
 80050d6:	4653      	movge	r3, sl
 80050d8:	2b00      	cmp	r3, #0
 80050da:	4699      	mov	r9, r3
 80050dc:	dc36      	bgt.n	800514c <_printf_float+0x364>
 80050de:	f04f 0b00 	mov.w	fp, #0
 80050e2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80050e6:	f104 021a 	add.w	r2, r4, #26
 80050ea:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80050ec:	930a      	str	r3, [sp, #40]	@ 0x28
 80050ee:	eba3 0309 	sub.w	r3, r3, r9
 80050f2:	455b      	cmp	r3, fp
 80050f4:	dc31      	bgt.n	800515a <_printf_float+0x372>
 80050f6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80050f8:	459a      	cmp	sl, r3
 80050fa:	dc3a      	bgt.n	8005172 <_printf_float+0x38a>
 80050fc:	6823      	ldr	r3, [r4, #0]
 80050fe:	07da      	lsls	r2, r3, #31
 8005100:	d437      	bmi.n	8005172 <_printf_float+0x38a>
 8005102:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005104:	ebaa 0903 	sub.w	r9, sl, r3
 8005108:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800510a:	ebaa 0303 	sub.w	r3, sl, r3
 800510e:	4599      	cmp	r9, r3
 8005110:	bfa8      	it	ge
 8005112:	4699      	movge	r9, r3
 8005114:	f1b9 0f00 	cmp.w	r9, #0
 8005118:	dc33      	bgt.n	8005182 <_printf_float+0x39a>
 800511a:	f04f 0800 	mov.w	r8, #0
 800511e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005122:	f104 0b1a 	add.w	fp, r4, #26
 8005126:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005128:	ebaa 0303 	sub.w	r3, sl, r3
 800512c:	eba3 0309 	sub.w	r3, r3, r9
 8005130:	4543      	cmp	r3, r8
 8005132:	f77f af7a 	ble.w	800502a <_printf_float+0x242>
 8005136:	2301      	movs	r3, #1
 8005138:	465a      	mov	r2, fp
 800513a:	4631      	mov	r1, r6
 800513c:	4628      	mov	r0, r5
 800513e:	47b8      	blx	r7
 8005140:	3001      	adds	r0, #1
 8005142:	f43f aeac 	beq.w	8004e9e <_printf_float+0xb6>
 8005146:	f108 0801 	add.w	r8, r8, #1
 800514a:	e7ec      	b.n	8005126 <_printf_float+0x33e>
 800514c:	4642      	mov	r2, r8
 800514e:	4631      	mov	r1, r6
 8005150:	4628      	mov	r0, r5
 8005152:	47b8      	blx	r7
 8005154:	3001      	adds	r0, #1
 8005156:	d1c2      	bne.n	80050de <_printf_float+0x2f6>
 8005158:	e6a1      	b.n	8004e9e <_printf_float+0xb6>
 800515a:	2301      	movs	r3, #1
 800515c:	4631      	mov	r1, r6
 800515e:	4628      	mov	r0, r5
 8005160:	920a      	str	r2, [sp, #40]	@ 0x28
 8005162:	47b8      	blx	r7
 8005164:	3001      	adds	r0, #1
 8005166:	f43f ae9a 	beq.w	8004e9e <_printf_float+0xb6>
 800516a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800516c:	f10b 0b01 	add.w	fp, fp, #1
 8005170:	e7bb      	b.n	80050ea <_printf_float+0x302>
 8005172:	4631      	mov	r1, r6
 8005174:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005178:	4628      	mov	r0, r5
 800517a:	47b8      	blx	r7
 800517c:	3001      	adds	r0, #1
 800517e:	d1c0      	bne.n	8005102 <_printf_float+0x31a>
 8005180:	e68d      	b.n	8004e9e <_printf_float+0xb6>
 8005182:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005184:	464b      	mov	r3, r9
 8005186:	4631      	mov	r1, r6
 8005188:	4628      	mov	r0, r5
 800518a:	4442      	add	r2, r8
 800518c:	47b8      	blx	r7
 800518e:	3001      	adds	r0, #1
 8005190:	d1c3      	bne.n	800511a <_printf_float+0x332>
 8005192:	e684      	b.n	8004e9e <_printf_float+0xb6>
 8005194:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8005198:	f1ba 0f01 	cmp.w	sl, #1
 800519c:	dc01      	bgt.n	80051a2 <_printf_float+0x3ba>
 800519e:	07db      	lsls	r3, r3, #31
 80051a0:	d536      	bpl.n	8005210 <_printf_float+0x428>
 80051a2:	2301      	movs	r3, #1
 80051a4:	4642      	mov	r2, r8
 80051a6:	4631      	mov	r1, r6
 80051a8:	4628      	mov	r0, r5
 80051aa:	47b8      	blx	r7
 80051ac:	3001      	adds	r0, #1
 80051ae:	f43f ae76 	beq.w	8004e9e <_printf_float+0xb6>
 80051b2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80051b6:	4631      	mov	r1, r6
 80051b8:	4628      	mov	r0, r5
 80051ba:	47b8      	blx	r7
 80051bc:	3001      	adds	r0, #1
 80051be:	f43f ae6e 	beq.w	8004e9e <_printf_float+0xb6>
 80051c2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80051c6:	2200      	movs	r2, #0
 80051c8:	2300      	movs	r3, #0
 80051ca:	f10a 3aff 	add.w	sl, sl, #4294967295
 80051ce:	f7fb fc9f 	bl	8000b10 <__aeabi_dcmpeq>
 80051d2:	b9c0      	cbnz	r0, 8005206 <_printf_float+0x41e>
 80051d4:	4653      	mov	r3, sl
 80051d6:	f108 0201 	add.w	r2, r8, #1
 80051da:	4631      	mov	r1, r6
 80051dc:	4628      	mov	r0, r5
 80051de:	47b8      	blx	r7
 80051e0:	3001      	adds	r0, #1
 80051e2:	d10c      	bne.n	80051fe <_printf_float+0x416>
 80051e4:	e65b      	b.n	8004e9e <_printf_float+0xb6>
 80051e6:	2301      	movs	r3, #1
 80051e8:	465a      	mov	r2, fp
 80051ea:	4631      	mov	r1, r6
 80051ec:	4628      	mov	r0, r5
 80051ee:	47b8      	blx	r7
 80051f0:	3001      	adds	r0, #1
 80051f2:	f43f ae54 	beq.w	8004e9e <_printf_float+0xb6>
 80051f6:	f108 0801 	add.w	r8, r8, #1
 80051fa:	45d0      	cmp	r8, sl
 80051fc:	dbf3      	blt.n	80051e6 <_printf_float+0x3fe>
 80051fe:	464b      	mov	r3, r9
 8005200:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8005204:	e6e0      	b.n	8004fc8 <_printf_float+0x1e0>
 8005206:	f04f 0800 	mov.w	r8, #0
 800520a:	f104 0b1a 	add.w	fp, r4, #26
 800520e:	e7f4      	b.n	80051fa <_printf_float+0x412>
 8005210:	2301      	movs	r3, #1
 8005212:	4642      	mov	r2, r8
 8005214:	e7e1      	b.n	80051da <_printf_float+0x3f2>
 8005216:	2301      	movs	r3, #1
 8005218:	464a      	mov	r2, r9
 800521a:	4631      	mov	r1, r6
 800521c:	4628      	mov	r0, r5
 800521e:	47b8      	blx	r7
 8005220:	3001      	adds	r0, #1
 8005222:	f43f ae3c 	beq.w	8004e9e <_printf_float+0xb6>
 8005226:	f108 0801 	add.w	r8, r8, #1
 800522a:	68e3      	ldr	r3, [r4, #12]
 800522c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800522e:	1a5b      	subs	r3, r3, r1
 8005230:	4543      	cmp	r3, r8
 8005232:	dcf0      	bgt.n	8005216 <_printf_float+0x42e>
 8005234:	e6fd      	b.n	8005032 <_printf_float+0x24a>
 8005236:	f04f 0800 	mov.w	r8, #0
 800523a:	f104 0919 	add.w	r9, r4, #25
 800523e:	e7f4      	b.n	800522a <_printf_float+0x442>

08005240 <_printf_common>:
 8005240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005244:	4616      	mov	r6, r2
 8005246:	4698      	mov	r8, r3
 8005248:	688a      	ldr	r2, [r1, #8]
 800524a:	690b      	ldr	r3, [r1, #16]
 800524c:	4607      	mov	r7, r0
 800524e:	4293      	cmp	r3, r2
 8005250:	bfb8      	it	lt
 8005252:	4613      	movlt	r3, r2
 8005254:	6033      	str	r3, [r6, #0]
 8005256:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800525a:	460c      	mov	r4, r1
 800525c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005260:	b10a      	cbz	r2, 8005266 <_printf_common+0x26>
 8005262:	3301      	adds	r3, #1
 8005264:	6033      	str	r3, [r6, #0]
 8005266:	6823      	ldr	r3, [r4, #0]
 8005268:	0699      	lsls	r1, r3, #26
 800526a:	bf42      	ittt	mi
 800526c:	6833      	ldrmi	r3, [r6, #0]
 800526e:	3302      	addmi	r3, #2
 8005270:	6033      	strmi	r3, [r6, #0]
 8005272:	6825      	ldr	r5, [r4, #0]
 8005274:	f015 0506 	ands.w	r5, r5, #6
 8005278:	d106      	bne.n	8005288 <_printf_common+0x48>
 800527a:	f104 0a19 	add.w	sl, r4, #25
 800527e:	68e3      	ldr	r3, [r4, #12]
 8005280:	6832      	ldr	r2, [r6, #0]
 8005282:	1a9b      	subs	r3, r3, r2
 8005284:	42ab      	cmp	r3, r5
 8005286:	dc2b      	bgt.n	80052e0 <_printf_common+0xa0>
 8005288:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800528c:	6822      	ldr	r2, [r4, #0]
 800528e:	3b00      	subs	r3, #0
 8005290:	bf18      	it	ne
 8005292:	2301      	movne	r3, #1
 8005294:	0692      	lsls	r2, r2, #26
 8005296:	d430      	bmi.n	80052fa <_printf_common+0xba>
 8005298:	4641      	mov	r1, r8
 800529a:	4638      	mov	r0, r7
 800529c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80052a0:	47c8      	blx	r9
 80052a2:	3001      	adds	r0, #1
 80052a4:	d023      	beq.n	80052ee <_printf_common+0xae>
 80052a6:	6823      	ldr	r3, [r4, #0]
 80052a8:	6922      	ldr	r2, [r4, #16]
 80052aa:	f003 0306 	and.w	r3, r3, #6
 80052ae:	2b04      	cmp	r3, #4
 80052b0:	bf14      	ite	ne
 80052b2:	2500      	movne	r5, #0
 80052b4:	6833      	ldreq	r3, [r6, #0]
 80052b6:	f04f 0600 	mov.w	r6, #0
 80052ba:	bf08      	it	eq
 80052bc:	68e5      	ldreq	r5, [r4, #12]
 80052be:	f104 041a 	add.w	r4, r4, #26
 80052c2:	bf08      	it	eq
 80052c4:	1aed      	subeq	r5, r5, r3
 80052c6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80052ca:	bf08      	it	eq
 80052cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80052d0:	4293      	cmp	r3, r2
 80052d2:	bfc4      	itt	gt
 80052d4:	1a9b      	subgt	r3, r3, r2
 80052d6:	18ed      	addgt	r5, r5, r3
 80052d8:	42b5      	cmp	r5, r6
 80052da:	d11a      	bne.n	8005312 <_printf_common+0xd2>
 80052dc:	2000      	movs	r0, #0
 80052de:	e008      	b.n	80052f2 <_printf_common+0xb2>
 80052e0:	2301      	movs	r3, #1
 80052e2:	4652      	mov	r2, sl
 80052e4:	4641      	mov	r1, r8
 80052e6:	4638      	mov	r0, r7
 80052e8:	47c8      	blx	r9
 80052ea:	3001      	adds	r0, #1
 80052ec:	d103      	bne.n	80052f6 <_printf_common+0xb6>
 80052ee:	f04f 30ff 	mov.w	r0, #4294967295
 80052f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80052f6:	3501      	adds	r5, #1
 80052f8:	e7c1      	b.n	800527e <_printf_common+0x3e>
 80052fa:	2030      	movs	r0, #48	@ 0x30
 80052fc:	18e1      	adds	r1, r4, r3
 80052fe:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005302:	1c5a      	adds	r2, r3, #1
 8005304:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005308:	4422      	add	r2, r4
 800530a:	3302      	adds	r3, #2
 800530c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005310:	e7c2      	b.n	8005298 <_printf_common+0x58>
 8005312:	2301      	movs	r3, #1
 8005314:	4622      	mov	r2, r4
 8005316:	4641      	mov	r1, r8
 8005318:	4638      	mov	r0, r7
 800531a:	47c8      	blx	r9
 800531c:	3001      	adds	r0, #1
 800531e:	d0e6      	beq.n	80052ee <_printf_common+0xae>
 8005320:	3601      	adds	r6, #1
 8005322:	e7d9      	b.n	80052d8 <_printf_common+0x98>

08005324 <_printf_i>:
 8005324:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005328:	7e0f      	ldrb	r7, [r1, #24]
 800532a:	4691      	mov	r9, r2
 800532c:	2f78      	cmp	r7, #120	@ 0x78
 800532e:	4680      	mov	r8, r0
 8005330:	460c      	mov	r4, r1
 8005332:	469a      	mov	sl, r3
 8005334:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005336:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800533a:	d807      	bhi.n	800534c <_printf_i+0x28>
 800533c:	2f62      	cmp	r7, #98	@ 0x62
 800533e:	d80a      	bhi.n	8005356 <_printf_i+0x32>
 8005340:	2f00      	cmp	r7, #0
 8005342:	f000 80d3 	beq.w	80054ec <_printf_i+0x1c8>
 8005346:	2f58      	cmp	r7, #88	@ 0x58
 8005348:	f000 80ba 	beq.w	80054c0 <_printf_i+0x19c>
 800534c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005350:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005354:	e03a      	b.n	80053cc <_printf_i+0xa8>
 8005356:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800535a:	2b15      	cmp	r3, #21
 800535c:	d8f6      	bhi.n	800534c <_printf_i+0x28>
 800535e:	a101      	add	r1, pc, #4	@ (adr r1, 8005364 <_printf_i+0x40>)
 8005360:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005364:	080053bd 	.word	0x080053bd
 8005368:	080053d1 	.word	0x080053d1
 800536c:	0800534d 	.word	0x0800534d
 8005370:	0800534d 	.word	0x0800534d
 8005374:	0800534d 	.word	0x0800534d
 8005378:	0800534d 	.word	0x0800534d
 800537c:	080053d1 	.word	0x080053d1
 8005380:	0800534d 	.word	0x0800534d
 8005384:	0800534d 	.word	0x0800534d
 8005388:	0800534d 	.word	0x0800534d
 800538c:	0800534d 	.word	0x0800534d
 8005390:	080054d3 	.word	0x080054d3
 8005394:	080053fb 	.word	0x080053fb
 8005398:	0800548d 	.word	0x0800548d
 800539c:	0800534d 	.word	0x0800534d
 80053a0:	0800534d 	.word	0x0800534d
 80053a4:	080054f5 	.word	0x080054f5
 80053a8:	0800534d 	.word	0x0800534d
 80053ac:	080053fb 	.word	0x080053fb
 80053b0:	0800534d 	.word	0x0800534d
 80053b4:	0800534d 	.word	0x0800534d
 80053b8:	08005495 	.word	0x08005495
 80053bc:	6833      	ldr	r3, [r6, #0]
 80053be:	1d1a      	adds	r2, r3, #4
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	6032      	str	r2, [r6, #0]
 80053c4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80053c8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80053cc:	2301      	movs	r3, #1
 80053ce:	e09e      	b.n	800550e <_printf_i+0x1ea>
 80053d0:	6833      	ldr	r3, [r6, #0]
 80053d2:	6820      	ldr	r0, [r4, #0]
 80053d4:	1d19      	adds	r1, r3, #4
 80053d6:	6031      	str	r1, [r6, #0]
 80053d8:	0606      	lsls	r6, r0, #24
 80053da:	d501      	bpl.n	80053e0 <_printf_i+0xbc>
 80053dc:	681d      	ldr	r5, [r3, #0]
 80053de:	e003      	b.n	80053e8 <_printf_i+0xc4>
 80053e0:	0645      	lsls	r5, r0, #25
 80053e2:	d5fb      	bpl.n	80053dc <_printf_i+0xb8>
 80053e4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80053e8:	2d00      	cmp	r5, #0
 80053ea:	da03      	bge.n	80053f4 <_printf_i+0xd0>
 80053ec:	232d      	movs	r3, #45	@ 0x2d
 80053ee:	426d      	negs	r5, r5
 80053f0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80053f4:	230a      	movs	r3, #10
 80053f6:	4859      	ldr	r0, [pc, #356]	@ (800555c <_printf_i+0x238>)
 80053f8:	e011      	b.n	800541e <_printf_i+0xfa>
 80053fa:	6821      	ldr	r1, [r4, #0]
 80053fc:	6833      	ldr	r3, [r6, #0]
 80053fe:	0608      	lsls	r0, r1, #24
 8005400:	f853 5b04 	ldr.w	r5, [r3], #4
 8005404:	d402      	bmi.n	800540c <_printf_i+0xe8>
 8005406:	0649      	lsls	r1, r1, #25
 8005408:	bf48      	it	mi
 800540a:	b2ad      	uxthmi	r5, r5
 800540c:	2f6f      	cmp	r7, #111	@ 0x6f
 800540e:	6033      	str	r3, [r6, #0]
 8005410:	bf14      	ite	ne
 8005412:	230a      	movne	r3, #10
 8005414:	2308      	moveq	r3, #8
 8005416:	4851      	ldr	r0, [pc, #324]	@ (800555c <_printf_i+0x238>)
 8005418:	2100      	movs	r1, #0
 800541a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800541e:	6866      	ldr	r6, [r4, #4]
 8005420:	2e00      	cmp	r6, #0
 8005422:	bfa8      	it	ge
 8005424:	6821      	ldrge	r1, [r4, #0]
 8005426:	60a6      	str	r6, [r4, #8]
 8005428:	bfa4      	itt	ge
 800542a:	f021 0104 	bicge.w	r1, r1, #4
 800542e:	6021      	strge	r1, [r4, #0]
 8005430:	b90d      	cbnz	r5, 8005436 <_printf_i+0x112>
 8005432:	2e00      	cmp	r6, #0
 8005434:	d04b      	beq.n	80054ce <_printf_i+0x1aa>
 8005436:	4616      	mov	r6, r2
 8005438:	fbb5 f1f3 	udiv	r1, r5, r3
 800543c:	fb03 5711 	mls	r7, r3, r1, r5
 8005440:	5dc7      	ldrb	r7, [r0, r7]
 8005442:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005446:	462f      	mov	r7, r5
 8005448:	42bb      	cmp	r3, r7
 800544a:	460d      	mov	r5, r1
 800544c:	d9f4      	bls.n	8005438 <_printf_i+0x114>
 800544e:	2b08      	cmp	r3, #8
 8005450:	d10b      	bne.n	800546a <_printf_i+0x146>
 8005452:	6823      	ldr	r3, [r4, #0]
 8005454:	07df      	lsls	r7, r3, #31
 8005456:	d508      	bpl.n	800546a <_printf_i+0x146>
 8005458:	6923      	ldr	r3, [r4, #16]
 800545a:	6861      	ldr	r1, [r4, #4]
 800545c:	4299      	cmp	r1, r3
 800545e:	bfde      	ittt	le
 8005460:	2330      	movle	r3, #48	@ 0x30
 8005462:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005466:	f106 36ff 	addle.w	r6, r6, #4294967295
 800546a:	1b92      	subs	r2, r2, r6
 800546c:	6122      	str	r2, [r4, #16]
 800546e:	464b      	mov	r3, r9
 8005470:	4621      	mov	r1, r4
 8005472:	4640      	mov	r0, r8
 8005474:	f8cd a000 	str.w	sl, [sp]
 8005478:	aa03      	add	r2, sp, #12
 800547a:	f7ff fee1 	bl	8005240 <_printf_common>
 800547e:	3001      	adds	r0, #1
 8005480:	d14a      	bne.n	8005518 <_printf_i+0x1f4>
 8005482:	f04f 30ff 	mov.w	r0, #4294967295
 8005486:	b004      	add	sp, #16
 8005488:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800548c:	6823      	ldr	r3, [r4, #0]
 800548e:	f043 0320 	orr.w	r3, r3, #32
 8005492:	6023      	str	r3, [r4, #0]
 8005494:	2778      	movs	r7, #120	@ 0x78
 8005496:	4832      	ldr	r0, [pc, #200]	@ (8005560 <_printf_i+0x23c>)
 8005498:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800549c:	6823      	ldr	r3, [r4, #0]
 800549e:	6831      	ldr	r1, [r6, #0]
 80054a0:	061f      	lsls	r7, r3, #24
 80054a2:	f851 5b04 	ldr.w	r5, [r1], #4
 80054a6:	d402      	bmi.n	80054ae <_printf_i+0x18a>
 80054a8:	065f      	lsls	r7, r3, #25
 80054aa:	bf48      	it	mi
 80054ac:	b2ad      	uxthmi	r5, r5
 80054ae:	6031      	str	r1, [r6, #0]
 80054b0:	07d9      	lsls	r1, r3, #31
 80054b2:	bf44      	itt	mi
 80054b4:	f043 0320 	orrmi.w	r3, r3, #32
 80054b8:	6023      	strmi	r3, [r4, #0]
 80054ba:	b11d      	cbz	r5, 80054c4 <_printf_i+0x1a0>
 80054bc:	2310      	movs	r3, #16
 80054be:	e7ab      	b.n	8005418 <_printf_i+0xf4>
 80054c0:	4826      	ldr	r0, [pc, #152]	@ (800555c <_printf_i+0x238>)
 80054c2:	e7e9      	b.n	8005498 <_printf_i+0x174>
 80054c4:	6823      	ldr	r3, [r4, #0]
 80054c6:	f023 0320 	bic.w	r3, r3, #32
 80054ca:	6023      	str	r3, [r4, #0]
 80054cc:	e7f6      	b.n	80054bc <_printf_i+0x198>
 80054ce:	4616      	mov	r6, r2
 80054d0:	e7bd      	b.n	800544e <_printf_i+0x12a>
 80054d2:	6833      	ldr	r3, [r6, #0]
 80054d4:	6825      	ldr	r5, [r4, #0]
 80054d6:	1d18      	adds	r0, r3, #4
 80054d8:	6961      	ldr	r1, [r4, #20]
 80054da:	6030      	str	r0, [r6, #0]
 80054dc:	062e      	lsls	r6, r5, #24
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	d501      	bpl.n	80054e6 <_printf_i+0x1c2>
 80054e2:	6019      	str	r1, [r3, #0]
 80054e4:	e002      	b.n	80054ec <_printf_i+0x1c8>
 80054e6:	0668      	lsls	r0, r5, #25
 80054e8:	d5fb      	bpl.n	80054e2 <_printf_i+0x1be>
 80054ea:	8019      	strh	r1, [r3, #0]
 80054ec:	2300      	movs	r3, #0
 80054ee:	4616      	mov	r6, r2
 80054f0:	6123      	str	r3, [r4, #16]
 80054f2:	e7bc      	b.n	800546e <_printf_i+0x14a>
 80054f4:	6833      	ldr	r3, [r6, #0]
 80054f6:	2100      	movs	r1, #0
 80054f8:	1d1a      	adds	r2, r3, #4
 80054fa:	6032      	str	r2, [r6, #0]
 80054fc:	681e      	ldr	r6, [r3, #0]
 80054fe:	6862      	ldr	r2, [r4, #4]
 8005500:	4630      	mov	r0, r6
 8005502:	f000 fbe4 	bl	8005cce <memchr>
 8005506:	b108      	cbz	r0, 800550c <_printf_i+0x1e8>
 8005508:	1b80      	subs	r0, r0, r6
 800550a:	6060      	str	r0, [r4, #4]
 800550c:	6863      	ldr	r3, [r4, #4]
 800550e:	6123      	str	r3, [r4, #16]
 8005510:	2300      	movs	r3, #0
 8005512:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005516:	e7aa      	b.n	800546e <_printf_i+0x14a>
 8005518:	4632      	mov	r2, r6
 800551a:	4649      	mov	r1, r9
 800551c:	4640      	mov	r0, r8
 800551e:	6923      	ldr	r3, [r4, #16]
 8005520:	47d0      	blx	sl
 8005522:	3001      	adds	r0, #1
 8005524:	d0ad      	beq.n	8005482 <_printf_i+0x15e>
 8005526:	6823      	ldr	r3, [r4, #0]
 8005528:	079b      	lsls	r3, r3, #30
 800552a:	d413      	bmi.n	8005554 <_printf_i+0x230>
 800552c:	68e0      	ldr	r0, [r4, #12]
 800552e:	9b03      	ldr	r3, [sp, #12]
 8005530:	4298      	cmp	r0, r3
 8005532:	bfb8      	it	lt
 8005534:	4618      	movlt	r0, r3
 8005536:	e7a6      	b.n	8005486 <_printf_i+0x162>
 8005538:	2301      	movs	r3, #1
 800553a:	4632      	mov	r2, r6
 800553c:	4649      	mov	r1, r9
 800553e:	4640      	mov	r0, r8
 8005540:	47d0      	blx	sl
 8005542:	3001      	adds	r0, #1
 8005544:	d09d      	beq.n	8005482 <_printf_i+0x15e>
 8005546:	3501      	adds	r5, #1
 8005548:	68e3      	ldr	r3, [r4, #12]
 800554a:	9903      	ldr	r1, [sp, #12]
 800554c:	1a5b      	subs	r3, r3, r1
 800554e:	42ab      	cmp	r3, r5
 8005550:	dcf2      	bgt.n	8005538 <_printf_i+0x214>
 8005552:	e7eb      	b.n	800552c <_printf_i+0x208>
 8005554:	2500      	movs	r5, #0
 8005556:	f104 0619 	add.w	r6, r4, #25
 800555a:	e7f5      	b.n	8005548 <_printf_i+0x224>
 800555c:	08009448 	.word	0x08009448
 8005560:	08009459 	.word	0x08009459

08005564 <_scanf_float>:
 8005564:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005568:	b087      	sub	sp, #28
 800556a:	9303      	str	r3, [sp, #12]
 800556c:	688b      	ldr	r3, [r1, #8]
 800556e:	4617      	mov	r7, r2
 8005570:	1e5a      	subs	r2, r3, #1
 8005572:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8005576:	bf82      	ittt	hi
 8005578:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800557c:	eb03 0b05 	addhi.w	fp, r3, r5
 8005580:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8005584:	460a      	mov	r2, r1
 8005586:	f04f 0500 	mov.w	r5, #0
 800558a:	bf88      	it	hi
 800558c:	608b      	strhi	r3, [r1, #8]
 800558e:	680b      	ldr	r3, [r1, #0]
 8005590:	4680      	mov	r8, r0
 8005592:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8005596:	f842 3b1c 	str.w	r3, [r2], #28
 800559a:	460c      	mov	r4, r1
 800559c:	bf98      	it	ls
 800559e:	f04f 0b00 	movls.w	fp, #0
 80055a2:	4616      	mov	r6, r2
 80055a4:	46aa      	mov	sl, r5
 80055a6:	46a9      	mov	r9, r5
 80055a8:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80055ac:	9201      	str	r2, [sp, #4]
 80055ae:	9502      	str	r5, [sp, #8]
 80055b0:	68a2      	ldr	r2, [r4, #8]
 80055b2:	b152      	cbz	r2, 80055ca <_scanf_float+0x66>
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	781b      	ldrb	r3, [r3, #0]
 80055b8:	2b4e      	cmp	r3, #78	@ 0x4e
 80055ba:	d865      	bhi.n	8005688 <_scanf_float+0x124>
 80055bc:	2b40      	cmp	r3, #64	@ 0x40
 80055be:	d83d      	bhi.n	800563c <_scanf_float+0xd8>
 80055c0:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 80055c4:	b2c8      	uxtb	r0, r1
 80055c6:	280e      	cmp	r0, #14
 80055c8:	d93b      	bls.n	8005642 <_scanf_float+0xde>
 80055ca:	f1b9 0f00 	cmp.w	r9, #0
 80055ce:	d003      	beq.n	80055d8 <_scanf_float+0x74>
 80055d0:	6823      	ldr	r3, [r4, #0]
 80055d2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80055d6:	6023      	str	r3, [r4, #0]
 80055d8:	f10a 3aff 	add.w	sl, sl, #4294967295
 80055dc:	f1ba 0f01 	cmp.w	sl, #1
 80055e0:	f200 8118 	bhi.w	8005814 <_scanf_float+0x2b0>
 80055e4:	9b01      	ldr	r3, [sp, #4]
 80055e6:	429e      	cmp	r6, r3
 80055e8:	f200 8109 	bhi.w	80057fe <_scanf_float+0x29a>
 80055ec:	2001      	movs	r0, #1
 80055ee:	b007      	add	sp, #28
 80055f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055f4:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 80055f8:	2a0d      	cmp	r2, #13
 80055fa:	d8e6      	bhi.n	80055ca <_scanf_float+0x66>
 80055fc:	a101      	add	r1, pc, #4	@ (adr r1, 8005604 <_scanf_float+0xa0>)
 80055fe:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005602:	bf00      	nop
 8005604:	0800574b 	.word	0x0800574b
 8005608:	080055cb 	.word	0x080055cb
 800560c:	080055cb 	.word	0x080055cb
 8005610:	080055cb 	.word	0x080055cb
 8005614:	080057ab 	.word	0x080057ab
 8005618:	08005783 	.word	0x08005783
 800561c:	080055cb 	.word	0x080055cb
 8005620:	080055cb 	.word	0x080055cb
 8005624:	08005759 	.word	0x08005759
 8005628:	080055cb 	.word	0x080055cb
 800562c:	080055cb 	.word	0x080055cb
 8005630:	080055cb 	.word	0x080055cb
 8005634:	080055cb 	.word	0x080055cb
 8005638:	08005711 	.word	0x08005711
 800563c:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8005640:	e7da      	b.n	80055f8 <_scanf_float+0x94>
 8005642:	290e      	cmp	r1, #14
 8005644:	d8c1      	bhi.n	80055ca <_scanf_float+0x66>
 8005646:	a001      	add	r0, pc, #4	@ (adr r0, 800564c <_scanf_float+0xe8>)
 8005648:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800564c:	08005701 	.word	0x08005701
 8005650:	080055cb 	.word	0x080055cb
 8005654:	08005701 	.word	0x08005701
 8005658:	08005797 	.word	0x08005797
 800565c:	080055cb 	.word	0x080055cb
 8005660:	080056a9 	.word	0x080056a9
 8005664:	080056e7 	.word	0x080056e7
 8005668:	080056e7 	.word	0x080056e7
 800566c:	080056e7 	.word	0x080056e7
 8005670:	080056e7 	.word	0x080056e7
 8005674:	080056e7 	.word	0x080056e7
 8005678:	080056e7 	.word	0x080056e7
 800567c:	080056e7 	.word	0x080056e7
 8005680:	080056e7 	.word	0x080056e7
 8005684:	080056e7 	.word	0x080056e7
 8005688:	2b6e      	cmp	r3, #110	@ 0x6e
 800568a:	d809      	bhi.n	80056a0 <_scanf_float+0x13c>
 800568c:	2b60      	cmp	r3, #96	@ 0x60
 800568e:	d8b1      	bhi.n	80055f4 <_scanf_float+0x90>
 8005690:	2b54      	cmp	r3, #84	@ 0x54
 8005692:	d07b      	beq.n	800578c <_scanf_float+0x228>
 8005694:	2b59      	cmp	r3, #89	@ 0x59
 8005696:	d198      	bne.n	80055ca <_scanf_float+0x66>
 8005698:	2d07      	cmp	r5, #7
 800569a:	d196      	bne.n	80055ca <_scanf_float+0x66>
 800569c:	2508      	movs	r5, #8
 800569e:	e02c      	b.n	80056fa <_scanf_float+0x196>
 80056a0:	2b74      	cmp	r3, #116	@ 0x74
 80056a2:	d073      	beq.n	800578c <_scanf_float+0x228>
 80056a4:	2b79      	cmp	r3, #121	@ 0x79
 80056a6:	e7f6      	b.n	8005696 <_scanf_float+0x132>
 80056a8:	6821      	ldr	r1, [r4, #0]
 80056aa:	05c8      	lsls	r0, r1, #23
 80056ac:	d51b      	bpl.n	80056e6 <_scanf_float+0x182>
 80056ae:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 80056b2:	6021      	str	r1, [r4, #0]
 80056b4:	f109 0901 	add.w	r9, r9, #1
 80056b8:	f1bb 0f00 	cmp.w	fp, #0
 80056bc:	d003      	beq.n	80056c6 <_scanf_float+0x162>
 80056be:	3201      	adds	r2, #1
 80056c0:	f10b 3bff 	add.w	fp, fp, #4294967295
 80056c4:	60a2      	str	r2, [r4, #8]
 80056c6:	68a3      	ldr	r3, [r4, #8]
 80056c8:	3b01      	subs	r3, #1
 80056ca:	60a3      	str	r3, [r4, #8]
 80056cc:	6923      	ldr	r3, [r4, #16]
 80056ce:	3301      	adds	r3, #1
 80056d0:	6123      	str	r3, [r4, #16]
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	3b01      	subs	r3, #1
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	607b      	str	r3, [r7, #4]
 80056da:	f340 8087 	ble.w	80057ec <_scanf_float+0x288>
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	3301      	adds	r3, #1
 80056e2:	603b      	str	r3, [r7, #0]
 80056e4:	e764      	b.n	80055b0 <_scanf_float+0x4c>
 80056e6:	eb1a 0105 	adds.w	r1, sl, r5
 80056ea:	f47f af6e 	bne.w	80055ca <_scanf_float+0x66>
 80056ee:	460d      	mov	r5, r1
 80056f0:	468a      	mov	sl, r1
 80056f2:	6822      	ldr	r2, [r4, #0]
 80056f4:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 80056f8:	6022      	str	r2, [r4, #0]
 80056fa:	f806 3b01 	strb.w	r3, [r6], #1
 80056fe:	e7e2      	b.n	80056c6 <_scanf_float+0x162>
 8005700:	6822      	ldr	r2, [r4, #0]
 8005702:	0610      	lsls	r0, r2, #24
 8005704:	f57f af61 	bpl.w	80055ca <_scanf_float+0x66>
 8005708:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800570c:	6022      	str	r2, [r4, #0]
 800570e:	e7f4      	b.n	80056fa <_scanf_float+0x196>
 8005710:	f1ba 0f00 	cmp.w	sl, #0
 8005714:	d10e      	bne.n	8005734 <_scanf_float+0x1d0>
 8005716:	f1b9 0f00 	cmp.w	r9, #0
 800571a:	d10e      	bne.n	800573a <_scanf_float+0x1d6>
 800571c:	6822      	ldr	r2, [r4, #0]
 800571e:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8005722:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8005726:	d108      	bne.n	800573a <_scanf_float+0x1d6>
 8005728:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800572c:	f04f 0a01 	mov.w	sl, #1
 8005730:	6022      	str	r2, [r4, #0]
 8005732:	e7e2      	b.n	80056fa <_scanf_float+0x196>
 8005734:	f1ba 0f02 	cmp.w	sl, #2
 8005738:	d055      	beq.n	80057e6 <_scanf_float+0x282>
 800573a:	2d01      	cmp	r5, #1
 800573c:	d002      	beq.n	8005744 <_scanf_float+0x1e0>
 800573e:	2d04      	cmp	r5, #4
 8005740:	f47f af43 	bne.w	80055ca <_scanf_float+0x66>
 8005744:	3501      	adds	r5, #1
 8005746:	b2ed      	uxtb	r5, r5
 8005748:	e7d7      	b.n	80056fa <_scanf_float+0x196>
 800574a:	f1ba 0f01 	cmp.w	sl, #1
 800574e:	f47f af3c 	bne.w	80055ca <_scanf_float+0x66>
 8005752:	f04f 0a02 	mov.w	sl, #2
 8005756:	e7d0      	b.n	80056fa <_scanf_float+0x196>
 8005758:	b97d      	cbnz	r5, 800577a <_scanf_float+0x216>
 800575a:	f1b9 0f00 	cmp.w	r9, #0
 800575e:	f47f af37 	bne.w	80055d0 <_scanf_float+0x6c>
 8005762:	6822      	ldr	r2, [r4, #0]
 8005764:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8005768:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800576c:	f040 8103 	bne.w	8005976 <_scanf_float+0x412>
 8005770:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8005774:	2501      	movs	r5, #1
 8005776:	6022      	str	r2, [r4, #0]
 8005778:	e7bf      	b.n	80056fa <_scanf_float+0x196>
 800577a:	2d03      	cmp	r5, #3
 800577c:	d0e2      	beq.n	8005744 <_scanf_float+0x1e0>
 800577e:	2d05      	cmp	r5, #5
 8005780:	e7de      	b.n	8005740 <_scanf_float+0x1dc>
 8005782:	2d02      	cmp	r5, #2
 8005784:	f47f af21 	bne.w	80055ca <_scanf_float+0x66>
 8005788:	2503      	movs	r5, #3
 800578a:	e7b6      	b.n	80056fa <_scanf_float+0x196>
 800578c:	2d06      	cmp	r5, #6
 800578e:	f47f af1c 	bne.w	80055ca <_scanf_float+0x66>
 8005792:	2507      	movs	r5, #7
 8005794:	e7b1      	b.n	80056fa <_scanf_float+0x196>
 8005796:	6822      	ldr	r2, [r4, #0]
 8005798:	0591      	lsls	r1, r2, #22
 800579a:	f57f af16 	bpl.w	80055ca <_scanf_float+0x66>
 800579e:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 80057a2:	6022      	str	r2, [r4, #0]
 80057a4:	f8cd 9008 	str.w	r9, [sp, #8]
 80057a8:	e7a7      	b.n	80056fa <_scanf_float+0x196>
 80057aa:	6822      	ldr	r2, [r4, #0]
 80057ac:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 80057b0:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80057b4:	d006      	beq.n	80057c4 <_scanf_float+0x260>
 80057b6:	0550      	lsls	r0, r2, #21
 80057b8:	f57f af07 	bpl.w	80055ca <_scanf_float+0x66>
 80057bc:	f1b9 0f00 	cmp.w	r9, #0
 80057c0:	f000 80d9 	beq.w	8005976 <_scanf_float+0x412>
 80057c4:	0591      	lsls	r1, r2, #22
 80057c6:	bf58      	it	pl
 80057c8:	9902      	ldrpl	r1, [sp, #8]
 80057ca:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80057ce:	bf58      	it	pl
 80057d0:	eba9 0101 	subpl.w	r1, r9, r1
 80057d4:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 80057d8:	f04f 0900 	mov.w	r9, #0
 80057dc:	bf58      	it	pl
 80057de:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80057e2:	6022      	str	r2, [r4, #0]
 80057e4:	e789      	b.n	80056fa <_scanf_float+0x196>
 80057e6:	f04f 0a03 	mov.w	sl, #3
 80057ea:	e786      	b.n	80056fa <_scanf_float+0x196>
 80057ec:	4639      	mov	r1, r7
 80057ee:	4640      	mov	r0, r8
 80057f0:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80057f4:	4798      	blx	r3
 80057f6:	2800      	cmp	r0, #0
 80057f8:	f43f aeda 	beq.w	80055b0 <_scanf_float+0x4c>
 80057fc:	e6e5      	b.n	80055ca <_scanf_float+0x66>
 80057fe:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005802:	463a      	mov	r2, r7
 8005804:	4640      	mov	r0, r8
 8005806:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800580a:	4798      	blx	r3
 800580c:	6923      	ldr	r3, [r4, #16]
 800580e:	3b01      	subs	r3, #1
 8005810:	6123      	str	r3, [r4, #16]
 8005812:	e6e7      	b.n	80055e4 <_scanf_float+0x80>
 8005814:	1e6b      	subs	r3, r5, #1
 8005816:	2b06      	cmp	r3, #6
 8005818:	d824      	bhi.n	8005864 <_scanf_float+0x300>
 800581a:	2d02      	cmp	r5, #2
 800581c:	d836      	bhi.n	800588c <_scanf_float+0x328>
 800581e:	9b01      	ldr	r3, [sp, #4]
 8005820:	429e      	cmp	r6, r3
 8005822:	f67f aee3 	bls.w	80055ec <_scanf_float+0x88>
 8005826:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800582a:	463a      	mov	r2, r7
 800582c:	4640      	mov	r0, r8
 800582e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005832:	4798      	blx	r3
 8005834:	6923      	ldr	r3, [r4, #16]
 8005836:	3b01      	subs	r3, #1
 8005838:	6123      	str	r3, [r4, #16]
 800583a:	e7f0      	b.n	800581e <_scanf_float+0x2ba>
 800583c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005840:	463a      	mov	r2, r7
 8005842:	4640      	mov	r0, r8
 8005844:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8005848:	4798      	blx	r3
 800584a:	6923      	ldr	r3, [r4, #16]
 800584c:	3b01      	subs	r3, #1
 800584e:	6123      	str	r3, [r4, #16]
 8005850:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005854:	fa5f fa8a 	uxtb.w	sl, sl
 8005858:	f1ba 0f02 	cmp.w	sl, #2
 800585c:	d1ee      	bne.n	800583c <_scanf_float+0x2d8>
 800585e:	3d03      	subs	r5, #3
 8005860:	b2ed      	uxtb	r5, r5
 8005862:	1b76      	subs	r6, r6, r5
 8005864:	6823      	ldr	r3, [r4, #0]
 8005866:	05da      	lsls	r2, r3, #23
 8005868:	d530      	bpl.n	80058cc <_scanf_float+0x368>
 800586a:	055b      	lsls	r3, r3, #21
 800586c:	d511      	bpl.n	8005892 <_scanf_float+0x32e>
 800586e:	9b01      	ldr	r3, [sp, #4]
 8005870:	429e      	cmp	r6, r3
 8005872:	f67f aebb 	bls.w	80055ec <_scanf_float+0x88>
 8005876:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800587a:	463a      	mov	r2, r7
 800587c:	4640      	mov	r0, r8
 800587e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005882:	4798      	blx	r3
 8005884:	6923      	ldr	r3, [r4, #16]
 8005886:	3b01      	subs	r3, #1
 8005888:	6123      	str	r3, [r4, #16]
 800588a:	e7f0      	b.n	800586e <_scanf_float+0x30a>
 800588c:	46aa      	mov	sl, r5
 800588e:	46b3      	mov	fp, r6
 8005890:	e7de      	b.n	8005850 <_scanf_float+0x2ec>
 8005892:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8005896:	6923      	ldr	r3, [r4, #16]
 8005898:	2965      	cmp	r1, #101	@ 0x65
 800589a:	f103 33ff 	add.w	r3, r3, #4294967295
 800589e:	f106 35ff 	add.w	r5, r6, #4294967295
 80058a2:	6123      	str	r3, [r4, #16]
 80058a4:	d00c      	beq.n	80058c0 <_scanf_float+0x35c>
 80058a6:	2945      	cmp	r1, #69	@ 0x45
 80058a8:	d00a      	beq.n	80058c0 <_scanf_float+0x35c>
 80058aa:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80058ae:	463a      	mov	r2, r7
 80058b0:	4640      	mov	r0, r8
 80058b2:	4798      	blx	r3
 80058b4:	6923      	ldr	r3, [r4, #16]
 80058b6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80058ba:	3b01      	subs	r3, #1
 80058bc:	1eb5      	subs	r5, r6, #2
 80058be:	6123      	str	r3, [r4, #16]
 80058c0:	463a      	mov	r2, r7
 80058c2:	4640      	mov	r0, r8
 80058c4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80058c8:	4798      	blx	r3
 80058ca:	462e      	mov	r6, r5
 80058cc:	6822      	ldr	r2, [r4, #0]
 80058ce:	f012 0210 	ands.w	r2, r2, #16
 80058d2:	d001      	beq.n	80058d8 <_scanf_float+0x374>
 80058d4:	2000      	movs	r0, #0
 80058d6:	e68a      	b.n	80055ee <_scanf_float+0x8a>
 80058d8:	7032      	strb	r2, [r6, #0]
 80058da:	6823      	ldr	r3, [r4, #0]
 80058dc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80058e0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80058e4:	d11c      	bne.n	8005920 <_scanf_float+0x3bc>
 80058e6:	9b02      	ldr	r3, [sp, #8]
 80058e8:	454b      	cmp	r3, r9
 80058ea:	eba3 0209 	sub.w	r2, r3, r9
 80058ee:	d123      	bne.n	8005938 <_scanf_float+0x3d4>
 80058f0:	2200      	movs	r2, #0
 80058f2:	4640      	mov	r0, r8
 80058f4:	9901      	ldr	r1, [sp, #4]
 80058f6:	f002 fbef 	bl	80080d8 <_strtod_r>
 80058fa:	9b03      	ldr	r3, [sp, #12]
 80058fc:	6825      	ldr	r5, [r4, #0]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f015 0f02 	tst.w	r5, #2
 8005904:	4606      	mov	r6, r0
 8005906:	460f      	mov	r7, r1
 8005908:	f103 0204 	add.w	r2, r3, #4
 800590c:	d01f      	beq.n	800594e <_scanf_float+0x3ea>
 800590e:	9903      	ldr	r1, [sp, #12]
 8005910:	600a      	str	r2, [r1, #0]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	e9c3 6700 	strd	r6, r7, [r3]
 8005918:	68e3      	ldr	r3, [r4, #12]
 800591a:	3301      	adds	r3, #1
 800591c:	60e3      	str	r3, [r4, #12]
 800591e:	e7d9      	b.n	80058d4 <_scanf_float+0x370>
 8005920:	9b04      	ldr	r3, [sp, #16]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d0e4      	beq.n	80058f0 <_scanf_float+0x38c>
 8005926:	9905      	ldr	r1, [sp, #20]
 8005928:	230a      	movs	r3, #10
 800592a:	4640      	mov	r0, r8
 800592c:	3101      	adds	r1, #1
 800592e:	f002 fc53 	bl	80081d8 <_strtol_r>
 8005932:	9b04      	ldr	r3, [sp, #16]
 8005934:	9e05      	ldr	r6, [sp, #20]
 8005936:	1ac2      	subs	r2, r0, r3
 8005938:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800593c:	429e      	cmp	r6, r3
 800593e:	bf28      	it	cs
 8005940:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8005944:	4630      	mov	r0, r6
 8005946:	490d      	ldr	r1, [pc, #52]	@ (800597c <_scanf_float+0x418>)
 8005948:	f000 f8de 	bl	8005b08 <siprintf>
 800594c:	e7d0      	b.n	80058f0 <_scanf_float+0x38c>
 800594e:	076d      	lsls	r5, r5, #29
 8005950:	d4dd      	bmi.n	800590e <_scanf_float+0x3aa>
 8005952:	9d03      	ldr	r5, [sp, #12]
 8005954:	602a      	str	r2, [r5, #0]
 8005956:	681d      	ldr	r5, [r3, #0]
 8005958:	4602      	mov	r2, r0
 800595a:	460b      	mov	r3, r1
 800595c:	f7fb f90a 	bl	8000b74 <__aeabi_dcmpun>
 8005960:	b120      	cbz	r0, 800596c <_scanf_float+0x408>
 8005962:	4807      	ldr	r0, [pc, #28]	@ (8005980 <_scanf_float+0x41c>)
 8005964:	f000 f9c2 	bl	8005cec <nanf>
 8005968:	6028      	str	r0, [r5, #0]
 800596a:	e7d5      	b.n	8005918 <_scanf_float+0x3b4>
 800596c:	4630      	mov	r0, r6
 800596e:	4639      	mov	r1, r7
 8005970:	f7fb f95e 	bl	8000c30 <__aeabi_d2f>
 8005974:	e7f8      	b.n	8005968 <_scanf_float+0x404>
 8005976:	f04f 0900 	mov.w	r9, #0
 800597a:	e62d      	b.n	80055d8 <_scanf_float+0x74>
 800597c:	0800946a 	.word	0x0800946a
 8005980:	08009805 	.word	0x08009805

08005984 <std>:
 8005984:	2300      	movs	r3, #0
 8005986:	b510      	push	{r4, lr}
 8005988:	4604      	mov	r4, r0
 800598a:	e9c0 3300 	strd	r3, r3, [r0]
 800598e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005992:	6083      	str	r3, [r0, #8]
 8005994:	8181      	strh	r1, [r0, #12]
 8005996:	6643      	str	r3, [r0, #100]	@ 0x64
 8005998:	81c2      	strh	r2, [r0, #14]
 800599a:	6183      	str	r3, [r0, #24]
 800599c:	4619      	mov	r1, r3
 800599e:	2208      	movs	r2, #8
 80059a0:	305c      	adds	r0, #92	@ 0x5c
 80059a2:	f000 f914 	bl	8005bce <memset>
 80059a6:	4b0d      	ldr	r3, [pc, #52]	@ (80059dc <std+0x58>)
 80059a8:	6224      	str	r4, [r4, #32]
 80059aa:	6263      	str	r3, [r4, #36]	@ 0x24
 80059ac:	4b0c      	ldr	r3, [pc, #48]	@ (80059e0 <std+0x5c>)
 80059ae:	62a3      	str	r3, [r4, #40]	@ 0x28
 80059b0:	4b0c      	ldr	r3, [pc, #48]	@ (80059e4 <std+0x60>)
 80059b2:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80059b4:	4b0c      	ldr	r3, [pc, #48]	@ (80059e8 <std+0x64>)
 80059b6:	6323      	str	r3, [r4, #48]	@ 0x30
 80059b8:	4b0c      	ldr	r3, [pc, #48]	@ (80059ec <std+0x68>)
 80059ba:	429c      	cmp	r4, r3
 80059bc:	d006      	beq.n	80059cc <std+0x48>
 80059be:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80059c2:	4294      	cmp	r4, r2
 80059c4:	d002      	beq.n	80059cc <std+0x48>
 80059c6:	33d0      	adds	r3, #208	@ 0xd0
 80059c8:	429c      	cmp	r4, r3
 80059ca:	d105      	bne.n	80059d8 <std+0x54>
 80059cc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80059d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80059d4:	f000 b978 	b.w	8005cc8 <__retarget_lock_init_recursive>
 80059d8:	bd10      	pop	{r4, pc}
 80059da:	bf00      	nop
 80059dc:	08005b49 	.word	0x08005b49
 80059e0:	08005b6b 	.word	0x08005b6b
 80059e4:	08005ba3 	.word	0x08005ba3
 80059e8:	08005bc7 	.word	0x08005bc7
 80059ec:	200002c0 	.word	0x200002c0

080059f0 <stdio_exit_handler>:
 80059f0:	4a02      	ldr	r2, [pc, #8]	@ (80059fc <stdio_exit_handler+0xc>)
 80059f2:	4903      	ldr	r1, [pc, #12]	@ (8005a00 <stdio_exit_handler+0x10>)
 80059f4:	4803      	ldr	r0, [pc, #12]	@ (8005a04 <stdio_exit_handler+0x14>)
 80059f6:	f000 b869 	b.w	8005acc <_fwalk_sglue>
 80059fa:	bf00      	nop
 80059fc:	20000014 	.word	0x20000014
 8005a00:	0800858d 	.word	0x0800858d
 8005a04:	20000024 	.word	0x20000024

08005a08 <cleanup_stdio>:
 8005a08:	6841      	ldr	r1, [r0, #4]
 8005a0a:	4b0c      	ldr	r3, [pc, #48]	@ (8005a3c <cleanup_stdio+0x34>)
 8005a0c:	b510      	push	{r4, lr}
 8005a0e:	4299      	cmp	r1, r3
 8005a10:	4604      	mov	r4, r0
 8005a12:	d001      	beq.n	8005a18 <cleanup_stdio+0x10>
 8005a14:	f002 fdba 	bl	800858c <_fflush_r>
 8005a18:	68a1      	ldr	r1, [r4, #8]
 8005a1a:	4b09      	ldr	r3, [pc, #36]	@ (8005a40 <cleanup_stdio+0x38>)
 8005a1c:	4299      	cmp	r1, r3
 8005a1e:	d002      	beq.n	8005a26 <cleanup_stdio+0x1e>
 8005a20:	4620      	mov	r0, r4
 8005a22:	f002 fdb3 	bl	800858c <_fflush_r>
 8005a26:	68e1      	ldr	r1, [r4, #12]
 8005a28:	4b06      	ldr	r3, [pc, #24]	@ (8005a44 <cleanup_stdio+0x3c>)
 8005a2a:	4299      	cmp	r1, r3
 8005a2c:	d004      	beq.n	8005a38 <cleanup_stdio+0x30>
 8005a2e:	4620      	mov	r0, r4
 8005a30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005a34:	f002 bdaa 	b.w	800858c <_fflush_r>
 8005a38:	bd10      	pop	{r4, pc}
 8005a3a:	bf00      	nop
 8005a3c:	200002c0 	.word	0x200002c0
 8005a40:	20000328 	.word	0x20000328
 8005a44:	20000390 	.word	0x20000390

08005a48 <global_stdio_init.part.0>:
 8005a48:	b510      	push	{r4, lr}
 8005a4a:	4b0b      	ldr	r3, [pc, #44]	@ (8005a78 <global_stdio_init.part.0+0x30>)
 8005a4c:	4c0b      	ldr	r4, [pc, #44]	@ (8005a7c <global_stdio_init.part.0+0x34>)
 8005a4e:	4a0c      	ldr	r2, [pc, #48]	@ (8005a80 <global_stdio_init.part.0+0x38>)
 8005a50:	4620      	mov	r0, r4
 8005a52:	601a      	str	r2, [r3, #0]
 8005a54:	2104      	movs	r1, #4
 8005a56:	2200      	movs	r2, #0
 8005a58:	f7ff ff94 	bl	8005984 <std>
 8005a5c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005a60:	2201      	movs	r2, #1
 8005a62:	2109      	movs	r1, #9
 8005a64:	f7ff ff8e 	bl	8005984 <std>
 8005a68:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005a6c:	2202      	movs	r2, #2
 8005a6e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005a72:	2112      	movs	r1, #18
 8005a74:	f7ff bf86 	b.w	8005984 <std>
 8005a78:	200003f8 	.word	0x200003f8
 8005a7c:	200002c0 	.word	0x200002c0
 8005a80:	080059f1 	.word	0x080059f1

08005a84 <__sfp_lock_acquire>:
 8005a84:	4801      	ldr	r0, [pc, #4]	@ (8005a8c <__sfp_lock_acquire+0x8>)
 8005a86:	f000 b920 	b.w	8005cca <__retarget_lock_acquire_recursive>
 8005a8a:	bf00      	nop
 8005a8c:	20000401 	.word	0x20000401

08005a90 <__sfp_lock_release>:
 8005a90:	4801      	ldr	r0, [pc, #4]	@ (8005a98 <__sfp_lock_release+0x8>)
 8005a92:	f000 b91b 	b.w	8005ccc <__retarget_lock_release_recursive>
 8005a96:	bf00      	nop
 8005a98:	20000401 	.word	0x20000401

08005a9c <__sinit>:
 8005a9c:	b510      	push	{r4, lr}
 8005a9e:	4604      	mov	r4, r0
 8005aa0:	f7ff fff0 	bl	8005a84 <__sfp_lock_acquire>
 8005aa4:	6a23      	ldr	r3, [r4, #32]
 8005aa6:	b11b      	cbz	r3, 8005ab0 <__sinit+0x14>
 8005aa8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005aac:	f7ff bff0 	b.w	8005a90 <__sfp_lock_release>
 8005ab0:	4b04      	ldr	r3, [pc, #16]	@ (8005ac4 <__sinit+0x28>)
 8005ab2:	6223      	str	r3, [r4, #32]
 8005ab4:	4b04      	ldr	r3, [pc, #16]	@ (8005ac8 <__sinit+0x2c>)
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d1f5      	bne.n	8005aa8 <__sinit+0xc>
 8005abc:	f7ff ffc4 	bl	8005a48 <global_stdio_init.part.0>
 8005ac0:	e7f2      	b.n	8005aa8 <__sinit+0xc>
 8005ac2:	bf00      	nop
 8005ac4:	08005a09 	.word	0x08005a09
 8005ac8:	200003f8 	.word	0x200003f8

08005acc <_fwalk_sglue>:
 8005acc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005ad0:	4607      	mov	r7, r0
 8005ad2:	4688      	mov	r8, r1
 8005ad4:	4614      	mov	r4, r2
 8005ad6:	2600      	movs	r6, #0
 8005ad8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005adc:	f1b9 0901 	subs.w	r9, r9, #1
 8005ae0:	d505      	bpl.n	8005aee <_fwalk_sglue+0x22>
 8005ae2:	6824      	ldr	r4, [r4, #0]
 8005ae4:	2c00      	cmp	r4, #0
 8005ae6:	d1f7      	bne.n	8005ad8 <_fwalk_sglue+0xc>
 8005ae8:	4630      	mov	r0, r6
 8005aea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005aee:	89ab      	ldrh	r3, [r5, #12]
 8005af0:	2b01      	cmp	r3, #1
 8005af2:	d907      	bls.n	8005b04 <_fwalk_sglue+0x38>
 8005af4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005af8:	3301      	adds	r3, #1
 8005afa:	d003      	beq.n	8005b04 <_fwalk_sglue+0x38>
 8005afc:	4629      	mov	r1, r5
 8005afe:	4638      	mov	r0, r7
 8005b00:	47c0      	blx	r8
 8005b02:	4306      	orrs	r6, r0
 8005b04:	3568      	adds	r5, #104	@ 0x68
 8005b06:	e7e9      	b.n	8005adc <_fwalk_sglue+0x10>

08005b08 <siprintf>:
 8005b08:	b40e      	push	{r1, r2, r3}
 8005b0a:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005b0e:	b500      	push	{lr}
 8005b10:	b09c      	sub	sp, #112	@ 0x70
 8005b12:	ab1d      	add	r3, sp, #116	@ 0x74
 8005b14:	9002      	str	r0, [sp, #8]
 8005b16:	9006      	str	r0, [sp, #24]
 8005b18:	9107      	str	r1, [sp, #28]
 8005b1a:	9104      	str	r1, [sp, #16]
 8005b1c:	4808      	ldr	r0, [pc, #32]	@ (8005b40 <siprintf+0x38>)
 8005b1e:	4909      	ldr	r1, [pc, #36]	@ (8005b44 <siprintf+0x3c>)
 8005b20:	f853 2b04 	ldr.w	r2, [r3], #4
 8005b24:	9105      	str	r1, [sp, #20]
 8005b26:	6800      	ldr	r0, [r0, #0]
 8005b28:	a902      	add	r1, sp, #8
 8005b2a:	9301      	str	r3, [sp, #4]
 8005b2c:	f002 fbb2 	bl	8008294 <_svfiprintf_r>
 8005b30:	2200      	movs	r2, #0
 8005b32:	9b02      	ldr	r3, [sp, #8]
 8005b34:	701a      	strb	r2, [r3, #0]
 8005b36:	b01c      	add	sp, #112	@ 0x70
 8005b38:	f85d eb04 	ldr.w	lr, [sp], #4
 8005b3c:	b003      	add	sp, #12
 8005b3e:	4770      	bx	lr
 8005b40:	20000020 	.word	0x20000020
 8005b44:	ffff0208 	.word	0xffff0208

08005b48 <__sread>:
 8005b48:	b510      	push	{r4, lr}
 8005b4a:	460c      	mov	r4, r1
 8005b4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b50:	f000 f86c 	bl	8005c2c <_read_r>
 8005b54:	2800      	cmp	r0, #0
 8005b56:	bfab      	itete	ge
 8005b58:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005b5a:	89a3      	ldrhlt	r3, [r4, #12]
 8005b5c:	181b      	addge	r3, r3, r0
 8005b5e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005b62:	bfac      	ite	ge
 8005b64:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005b66:	81a3      	strhlt	r3, [r4, #12]
 8005b68:	bd10      	pop	{r4, pc}

08005b6a <__swrite>:
 8005b6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b6e:	461f      	mov	r7, r3
 8005b70:	898b      	ldrh	r3, [r1, #12]
 8005b72:	4605      	mov	r5, r0
 8005b74:	05db      	lsls	r3, r3, #23
 8005b76:	460c      	mov	r4, r1
 8005b78:	4616      	mov	r6, r2
 8005b7a:	d505      	bpl.n	8005b88 <__swrite+0x1e>
 8005b7c:	2302      	movs	r3, #2
 8005b7e:	2200      	movs	r2, #0
 8005b80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b84:	f000 f840 	bl	8005c08 <_lseek_r>
 8005b88:	89a3      	ldrh	r3, [r4, #12]
 8005b8a:	4632      	mov	r2, r6
 8005b8c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005b90:	81a3      	strh	r3, [r4, #12]
 8005b92:	4628      	mov	r0, r5
 8005b94:	463b      	mov	r3, r7
 8005b96:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005b9a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005b9e:	f000 b857 	b.w	8005c50 <_write_r>

08005ba2 <__sseek>:
 8005ba2:	b510      	push	{r4, lr}
 8005ba4:	460c      	mov	r4, r1
 8005ba6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005baa:	f000 f82d 	bl	8005c08 <_lseek_r>
 8005bae:	1c43      	adds	r3, r0, #1
 8005bb0:	89a3      	ldrh	r3, [r4, #12]
 8005bb2:	bf15      	itete	ne
 8005bb4:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005bb6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005bba:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005bbe:	81a3      	strheq	r3, [r4, #12]
 8005bc0:	bf18      	it	ne
 8005bc2:	81a3      	strhne	r3, [r4, #12]
 8005bc4:	bd10      	pop	{r4, pc}

08005bc6 <__sclose>:
 8005bc6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005bca:	f000 b80d 	b.w	8005be8 <_close_r>

08005bce <memset>:
 8005bce:	4603      	mov	r3, r0
 8005bd0:	4402      	add	r2, r0
 8005bd2:	4293      	cmp	r3, r2
 8005bd4:	d100      	bne.n	8005bd8 <memset+0xa>
 8005bd6:	4770      	bx	lr
 8005bd8:	f803 1b01 	strb.w	r1, [r3], #1
 8005bdc:	e7f9      	b.n	8005bd2 <memset+0x4>
	...

08005be0 <_localeconv_r>:
 8005be0:	4800      	ldr	r0, [pc, #0]	@ (8005be4 <_localeconv_r+0x4>)
 8005be2:	4770      	bx	lr
 8005be4:	20000160 	.word	0x20000160

08005be8 <_close_r>:
 8005be8:	b538      	push	{r3, r4, r5, lr}
 8005bea:	2300      	movs	r3, #0
 8005bec:	4d05      	ldr	r5, [pc, #20]	@ (8005c04 <_close_r+0x1c>)
 8005bee:	4604      	mov	r4, r0
 8005bf0:	4608      	mov	r0, r1
 8005bf2:	602b      	str	r3, [r5, #0]
 8005bf4:	f7fb ff41 	bl	8001a7a <_close>
 8005bf8:	1c43      	adds	r3, r0, #1
 8005bfa:	d102      	bne.n	8005c02 <_close_r+0x1a>
 8005bfc:	682b      	ldr	r3, [r5, #0]
 8005bfe:	b103      	cbz	r3, 8005c02 <_close_r+0x1a>
 8005c00:	6023      	str	r3, [r4, #0]
 8005c02:	bd38      	pop	{r3, r4, r5, pc}
 8005c04:	200003fc 	.word	0x200003fc

08005c08 <_lseek_r>:
 8005c08:	b538      	push	{r3, r4, r5, lr}
 8005c0a:	4604      	mov	r4, r0
 8005c0c:	4608      	mov	r0, r1
 8005c0e:	4611      	mov	r1, r2
 8005c10:	2200      	movs	r2, #0
 8005c12:	4d05      	ldr	r5, [pc, #20]	@ (8005c28 <_lseek_r+0x20>)
 8005c14:	602a      	str	r2, [r5, #0]
 8005c16:	461a      	mov	r2, r3
 8005c18:	f7fb ff53 	bl	8001ac2 <_lseek>
 8005c1c:	1c43      	adds	r3, r0, #1
 8005c1e:	d102      	bne.n	8005c26 <_lseek_r+0x1e>
 8005c20:	682b      	ldr	r3, [r5, #0]
 8005c22:	b103      	cbz	r3, 8005c26 <_lseek_r+0x1e>
 8005c24:	6023      	str	r3, [r4, #0]
 8005c26:	bd38      	pop	{r3, r4, r5, pc}
 8005c28:	200003fc 	.word	0x200003fc

08005c2c <_read_r>:
 8005c2c:	b538      	push	{r3, r4, r5, lr}
 8005c2e:	4604      	mov	r4, r0
 8005c30:	4608      	mov	r0, r1
 8005c32:	4611      	mov	r1, r2
 8005c34:	2200      	movs	r2, #0
 8005c36:	4d05      	ldr	r5, [pc, #20]	@ (8005c4c <_read_r+0x20>)
 8005c38:	602a      	str	r2, [r5, #0]
 8005c3a:	461a      	mov	r2, r3
 8005c3c:	f7fb fee4 	bl	8001a08 <_read>
 8005c40:	1c43      	adds	r3, r0, #1
 8005c42:	d102      	bne.n	8005c4a <_read_r+0x1e>
 8005c44:	682b      	ldr	r3, [r5, #0]
 8005c46:	b103      	cbz	r3, 8005c4a <_read_r+0x1e>
 8005c48:	6023      	str	r3, [r4, #0]
 8005c4a:	bd38      	pop	{r3, r4, r5, pc}
 8005c4c:	200003fc 	.word	0x200003fc

08005c50 <_write_r>:
 8005c50:	b538      	push	{r3, r4, r5, lr}
 8005c52:	4604      	mov	r4, r0
 8005c54:	4608      	mov	r0, r1
 8005c56:	4611      	mov	r1, r2
 8005c58:	2200      	movs	r2, #0
 8005c5a:	4d05      	ldr	r5, [pc, #20]	@ (8005c70 <_write_r+0x20>)
 8005c5c:	602a      	str	r2, [r5, #0]
 8005c5e:	461a      	mov	r2, r3
 8005c60:	f7fb feef 	bl	8001a42 <_write>
 8005c64:	1c43      	adds	r3, r0, #1
 8005c66:	d102      	bne.n	8005c6e <_write_r+0x1e>
 8005c68:	682b      	ldr	r3, [r5, #0]
 8005c6a:	b103      	cbz	r3, 8005c6e <_write_r+0x1e>
 8005c6c:	6023      	str	r3, [r4, #0]
 8005c6e:	bd38      	pop	{r3, r4, r5, pc}
 8005c70:	200003fc 	.word	0x200003fc

08005c74 <__errno>:
 8005c74:	4b01      	ldr	r3, [pc, #4]	@ (8005c7c <__errno+0x8>)
 8005c76:	6818      	ldr	r0, [r3, #0]
 8005c78:	4770      	bx	lr
 8005c7a:	bf00      	nop
 8005c7c:	20000020 	.word	0x20000020

08005c80 <__libc_init_array>:
 8005c80:	b570      	push	{r4, r5, r6, lr}
 8005c82:	2600      	movs	r6, #0
 8005c84:	4d0c      	ldr	r5, [pc, #48]	@ (8005cb8 <__libc_init_array+0x38>)
 8005c86:	4c0d      	ldr	r4, [pc, #52]	@ (8005cbc <__libc_init_array+0x3c>)
 8005c88:	1b64      	subs	r4, r4, r5
 8005c8a:	10a4      	asrs	r4, r4, #2
 8005c8c:	42a6      	cmp	r6, r4
 8005c8e:	d109      	bne.n	8005ca4 <__libc_init_array+0x24>
 8005c90:	f003 fb68 	bl	8009364 <_init>
 8005c94:	2600      	movs	r6, #0
 8005c96:	4d0a      	ldr	r5, [pc, #40]	@ (8005cc0 <__libc_init_array+0x40>)
 8005c98:	4c0a      	ldr	r4, [pc, #40]	@ (8005cc4 <__libc_init_array+0x44>)
 8005c9a:	1b64      	subs	r4, r4, r5
 8005c9c:	10a4      	asrs	r4, r4, #2
 8005c9e:	42a6      	cmp	r6, r4
 8005ca0:	d105      	bne.n	8005cae <__libc_init_array+0x2e>
 8005ca2:	bd70      	pop	{r4, r5, r6, pc}
 8005ca4:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ca8:	4798      	blx	r3
 8005caa:	3601      	adds	r6, #1
 8005cac:	e7ee      	b.n	8005c8c <__libc_init_array+0xc>
 8005cae:	f855 3b04 	ldr.w	r3, [r5], #4
 8005cb2:	4798      	blx	r3
 8005cb4:	3601      	adds	r6, #1
 8005cb6:	e7f2      	b.n	8005c9e <__libc_init_array+0x1e>
 8005cb8:	08009870 	.word	0x08009870
 8005cbc:	08009870 	.word	0x08009870
 8005cc0:	08009870 	.word	0x08009870
 8005cc4:	08009874 	.word	0x08009874

08005cc8 <__retarget_lock_init_recursive>:
 8005cc8:	4770      	bx	lr

08005cca <__retarget_lock_acquire_recursive>:
 8005cca:	4770      	bx	lr

08005ccc <__retarget_lock_release_recursive>:
 8005ccc:	4770      	bx	lr

08005cce <memchr>:
 8005cce:	4603      	mov	r3, r0
 8005cd0:	b510      	push	{r4, lr}
 8005cd2:	b2c9      	uxtb	r1, r1
 8005cd4:	4402      	add	r2, r0
 8005cd6:	4293      	cmp	r3, r2
 8005cd8:	4618      	mov	r0, r3
 8005cda:	d101      	bne.n	8005ce0 <memchr+0x12>
 8005cdc:	2000      	movs	r0, #0
 8005cde:	e003      	b.n	8005ce8 <memchr+0x1a>
 8005ce0:	7804      	ldrb	r4, [r0, #0]
 8005ce2:	3301      	adds	r3, #1
 8005ce4:	428c      	cmp	r4, r1
 8005ce6:	d1f6      	bne.n	8005cd6 <memchr+0x8>
 8005ce8:	bd10      	pop	{r4, pc}
	...

08005cec <nanf>:
 8005cec:	4800      	ldr	r0, [pc, #0]	@ (8005cf0 <nanf+0x4>)
 8005cee:	4770      	bx	lr
 8005cf0:	7fc00000 	.word	0x7fc00000

08005cf4 <quorem>:
 8005cf4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cf8:	6903      	ldr	r3, [r0, #16]
 8005cfa:	690c      	ldr	r4, [r1, #16]
 8005cfc:	4607      	mov	r7, r0
 8005cfe:	42a3      	cmp	r3, r4
 8005d00:	db7e      	blt.n	8005e00 <quorem+0x10c>
 8005d02:	3c01      	subs	r4, #1
 8005d04:	00a3      	lsls	r3, r4, #2
 8005d06:	f100 0514 	add.w	r5, r0, #20
 8005d0a:	f101 0814 	add.w	r8, r1, #20
 8005d0e:	9300      	str	r3, [sp, #0]
 8005d10:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005d14:	9301      	str	r3, [sp, #4]
 8005d16:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005d1a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005d1e:	3301      	adds	r3, #1
 8005d20:	429a      	cmp	r2, r3
 8005d22:	fbb2 f6f3 	udiv	r6, r2, r3
 8005d26:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005d2a:	d32e      	bcc.n	8005d8a <quorem+0x96>
 8005d2c:	f04f 0a00 	mov.w	sl, #0
 8005d30:	46c4      	mov	ip, r8
 8005d32:	46ae      	mov	lr, r5
 8005d34:	46d3      	mov	fp, sl
 8005d36:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005d3a:	b298      	uxth	r0, r3
 8005d3c:	fb06 a000 	mla	r0, r6, r0, sl
 8005d40:	0c1b      	lsrs	r3, r3, #16
 8005d42:	0c02      	lsrs	r2, r0, #16
 8005d44:	fb06 2303 	mla	r3, r6, r3, r2
 8005d48:	f8de 2000 	ldr.w	r2, [lr]
 8005d4c:	b280      	uxth	r0, r0
 8005d4e:	b292      	uxth	r2, r2
 8005d50:	1a12      	subs	r2, r2, r0
 8005d52:	445a      	add	r2, fp
 8005d54:	f8de 0000 	ldr.w	r0, [lr]
 8005d58:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005d5c:	b29b      	uxth	r3, r3
 8005d5e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8005d62:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8005d66:	b292      	uxth	r2, r2
 8005d68:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8005d6c:	45e1      	cmp	r9, ip
 8005d6e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8005d72:	f84e 2b04 	str.w	r2, [lr], #4
 8005d76:	d2de      	bcs.n	8005d36 <quorem+0x42>
 8005d78:	9b00      	ldr	r3, [sp, #0]
 8005d7a:	58eb      	ldr	r3, [r5, r3]
 8005d7c:	b92b      	cbnz	r3, 8005d8a <quorem+0x96>
 8005d7e:	9b01      	ldr	r3, [sp, #4]
 8005d80:	3b04      	subs	r3, #4
 8005d82:	429d      	cmp	r5, r3
 8005d84:	461a      	mov	r2, r3
 8005d86:	d32f      	bcc.n	8005de8 <quorem+0xf4>
 8005d88:	613c      	str	r4, [r7, #16]
 8005d8a:	4638      	mov	r0, r7
 8005d8c:	f001 f9c4 	bl	8007118 <__mcmp>
 8005d90:	2800      	cmp	r0, #0
 8005d92:	db25      	blt.n	8005de0 <quorem+0xec>
 8005d94:	4629      	mov	r1, r5
 8005d96:	2000      	movs	r0, #0
 8005d98:	f858 2b04 	ldr.w	r2, [r8], #4
 8005d9c:	f8d1 c000 	ldr.w	ip, [r1]
 8005da0:	fa1f fe82 	uxth.w	lr, r2
 8005da4:	fa1f f38c 	uxth.w	r3, ip
 8005da8:	eba3 030e 	sub.w	r3, r3, lr
 8005dac:	4403      	add	r3, r0
 8005dae:	0c12      	lsrs	r2, r2, #16
 8005db0:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8005db4:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8005db8:	b29b      	uxth	r3, r3
 8005dba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005dbe:	45c1      	cmp	r9, r8
 8005dc0:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005dc4:	f841 3b04 	str.w	r3, [r1], #4
 8005dc8:	d2e6      	bcs.n	8005d98 <quorem+0xa4>
 8005dca:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005dce:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005dd2:	b922      	cbnz	r2, 8005dde <quorem+0xea>
 8005dd4:	3b04      	subs	r3, #4
 8005dd6:	429d      	cmp	r5, r3
 8005dd8:	461a      	mov	r2, r3
 8005dda:	d30b      	bcc.n	8005df4 <quorem+0x100>
 8005ddc:	613c      	str	r4, [r7, #16]
 8005dde:	3601      	adds	r6, #1
 8005de0:	4630      	mov	r0, r6
 8005de2:	b003      	add	sp, #12
 8005de4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005de8:	6812      	ldr	r2, [r2, #0]
 8005dea:	3b04      	subs	r3, #4
 8005dec:	2a00      	cmp	r2, #0
 8005dee:	d1cb      	bne.n	8005d88 <quorem+0x94>
 8005df0:	3c01      	subs	r4, #1
 8005df2:	e7c6      	b.n	8005d82 <quorem+0x8e>
 8005df4:	6812      	ldr	r2, [r2, #0]
 8005df6:	3b04      	subs	r3, #4
 8005df8:	2a00      	cmp	r2, #0
 8005dfa:	d1ef      	bne.n	8005ddc <quorem+0xe8>
 8005dfc:	3c01      	subs	r4, #1
 8005dfe:	e7ea      	b.n	8005dd6 <quorem+0xe2>
 8005e00:	2000      	movs	r0, #0
 8005e02:	e7ee      	b.n	8005de2 <quorem+0xee>
 8005e04:	0000      	movs	r0, r0
	...

08005e08 <_dtoa_r>:
 8005e08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e0c:	4614      	mov	r4, r2
 8005e0e:	461d      	mov	r5, r3
 8005e10:	69c7      	ldr	r7, [r0, #28]
 8005e12:	b097      	sub	sp, #92	@ 0x5c
 8005e14:	4683      	mov	fp, r0
 8005e16:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8005e1a:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8005e1c:	b97f      	cbnz	r7, 8005e3e <_dtoa_r+0x36>
 8005e1e:	2010      	movs	r0, #16
 8005e20:	f000 fe02 	bl	8006a28 <malloc>
 8005e24:	4602      	mov	r2, r0
 8005e26:	f8cb 001c 	str.w	r0, [fp, #28]
 8005e2a:	b920      	cbnz	r0, 8005e36 <_dtoa_r+0x2e>
 8005e2c:	21ef      	movs	r1, #239	@ 0xef
 8005e2e:	4ba8      	ldr	r3, [pc, #672]	@ (80060d0 <_dtoa_r+0x2c8>)
 8005e30:	48a8      	ldr	r0, [pc, #672]	@ (80060d4 <_dtoa_r+0x2cc>)
 8005e32:	f002 fc23 	bl	800867c <__assert_func>
 8005e36:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8005e3a:	6007      	str	r7, [r0, #0]
 8005e3c:	60c7      	str	r7, [r0, #12]
 8005e3e:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005e42:	6819      	ldr	r1, [r3, #0]
 8005e44:	b159      	cbz	r1, 8005e5e <_dtoa_r+0x56>
 8005e46:	685a      	ldr	r2, [r3, #4]
 8005e48:	2301      	movs	r3, #1
 8005e4a:	4093      	lsls	r3, r2
 8005e4c:	604a      	str	r2, [r1, #4]
 8005e4e:	608b      	str	r3, [r1, #8]
 8005e50:	4658      	mov	r0, fp
 8005e52:	f000 fedf 	bl	8006c14 <_Bfree>
 8005e56:	2200      	movs	r2, #0
 8005e58:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005e5c:	601a      	str	r2, [r3, #0]
 8005e5e:	1e2b      	subs	r3, r5, #0
 8005e60:	bfaf      	iteee	ge
 8005e62:	2300      	movge	r3, #0
 8005e64:	2201      	movlt	r2, #1
 8005e66:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8005e6a:	9303      	strlt	r3, [sp, #12]
 8005e6c:	bfa8      	it	ge
 8005e6e:	6033      	strge	r3, [r6, #0]
 8005e70:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8005e74:	4b98      	ldr	r3, [pc, #608]	@ (80060d8 <_dtoa_r+0x2d0>)
 8005e76:	bfb8      	it	lt
 8005e78:	6032      	strlt	r2, [r6, #0]
 8005e7a:	ea33 0308 	bics.w	r3, r3, r8
 8005e7e:	d112      	bne.n	8005ea6 <_dtoa_r+0x9e>
 8005e80:	f242 730f 	movw	r3, #9999	@ 0x270f
 8005e84:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8005e86:	6013      	str	r3, [r2, #0]
 8005e88:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8005e8c:	4323      	orrs	r3, r4
 8005e8e:	f000 8550 	beq.w	8006932 <_dtoa_r+0xb2a>
 8005e92:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8005e94:	f8df a244 	ldr.w	sl, [pc, #580]	@ 80060dc <_dtoa_r+0x2d4>
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	f000 8552 	beq.w	8006942 <_dtoa_r+0xb3a>
 8005e9e:	f10a 0303 	add.w	r3, sl, #3
 8005ea2:	f000 bd4c 	b.w	800693e <_dtoa_r+0xb36>
 8005ea6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005eaa:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8005eae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	2300      	movs	r3, #0
 8005eb6:	f7fa fe2b 	bl	8000b10 <__aeabi_dcmpeq>
 8005eba:	4607      	mov	r7, r0
 8005ebc:	b158      	cbz	r0, 8005ed6 <_dtoa_r+0xce>
 8005ebe:	2301      	movs	r3, #1
 8005ec0:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8005ec2:	6013      	str	r3, [r2, #0]
 8005ec4:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8005ec6:	b113      	cbz	r3, 8005ece <_dtoa_r+0xc6>
 8005ec8:	4b85      	ldr	r3, [pc, #532]	@ (80060e0 <_dtoa_r+0x2d8>)
 8005eca:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8005ecc:	6013      	str	r3, [r2, #0]
 8005ece:	f8df a214 	ldr.w	sl, [pc, #532]	@ 80060e4 <_dtoa_r+0x2dc>
 8005ed2:	f000 bd36 	b.w	8006942 <_dtoa_r+0xb3a>
 8005ed6:	ab14      	add	r3, sp, #80	@ 0x50
 8005ed8:	9301      	str	r3, [sp, #4]
 8005eda:	ab15      	add	r3, sp, #84	@ 0x54
 8005edc:	9300      	str	r3, [sp, #0]
 8005ede:	4658      	mov	r0, fp
 8005ee0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8005ee4:	f001 fa30 	bl	8007348 <__d2b>
 8005ee8:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8005eec:	4681      	mov	r9, r0
 8005eee:	2e00      	cmp	r6, #0
 8005ef0:	d077      	beq.n	8005fe2 <_dtoa_r+0x1da>
 8005ef2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005ef6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005ef8:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8005efc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005f00:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8005f04:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8005f08:	9712      	str	r7, [sp, #72]	@ 0x48
 8005f0a:	4619      	mov	r1, r3
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	4b76      	ldr	r3, [pc, #472]	@ (80060e8 <_dtoa_r+0x2e0>)
 8005f10:	f7fa f9de 	bl	80002d0 <__aeabi_dsub>
 8005f14:	a368      	add	r3, pc, #416	@ (adr r3, 80060b8 <_dtoa_r+0x2b0>)
 8005f16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f1a:	f7fa fb91 	bl	8000640 <__aeabi_dmul>
 8005f1e:	a368      	add	r3, pc, #416	@ (adr r3, 80060c0 <_dtoa_r+0x2b8>)
 8005f20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f24:	f7fa f9d6 	bl	80002d4 <__adddf3>
 8005f28:	4604      	mov	r4, r0
 8005f2a:	4630      	mov	r0, r6
 8005f2c:	460d      	mov	r5, r1
 8005f2e:	f7fa fb1d 	bl	800056c <__aeabi_i2d>
 8005f32:	a365      	add	r3, pc, #404	@ (adr r3, 80060c8 <_dtoa_r+0x2c0>)
 8005f34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f38:	f7fa fb82 	bl	8000640 <__aeabi_dmul>
 8005f3c:	4602      	mov	r2, r0
 8005f3e:	460b      	mov	r3, r1
 8005f40:	4620      	mov	r0, r4
 8005f42:	4629      	mov	r1, r5
 8005f44:	f7fa f9c6 	bl	80002d4 <__adddf3>
 8005f48:	4604      	mov	r4, r0
 8005f4a:	460d      	mov	r5, r1
 8005f4c:	f7fa fe28 	bl	8000ba0 <__aeabi_d2iz>
 8005f50:	2200      	movs	r2, #0
 8005f52:	4607      	mov	r7, r0
 8005f54:	2300      	movs	r3, #0
 8005f56:	4620      	mov	r0, r4
 8005f58:	4629      	mov	r1, r5
 8005f5a:	f7fa fde3 	bl	8000b24 <__aeabi_dcmplt>
 8005f5e:	b140      	cbz	r0, 8005f72 <_dtoa_r+0x16a>
 8005f60:	4638      	mov	r0, r7
 8005f62:	f7fa fb03 	bl	800056c <__aeabi_i2d>
 8005f66:	4622      	mov	r2, r4
 8005f68:	462b      	mov	r3, r5
 8005f6a:	f7fa fdd1 	bl	8000b10 <__aeabi_dcmpeq>
 8005f6e:	b900      	cbnz	r0, 8005f72 <_dtoa_r+0x16a>
 8005f70:	3f01      	subs	r7, #1
 8005f72:	2f16      	cmp	r7, #22
 8005f74:	d853      	bhi.n	800601e <_dtoa_r+0x216>
 8005f76:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005f7a:	4b5c      	ldr	r3, [pc, #368]	@ (80060ec <_dtoa_r+0x2e4>)
 8005f7c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005f80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f84:	f7fa fdce 	bl	8000b24 <__aeabi_dcmplt>
 8005f88:	2800      	cmp	r0, #0
 8005f8a:	d04a      	beq.n	8006022 <_dtoa_r+0x21a>
 8005f8c:	2300      	movs	r3, #0
 8005f8e:	3f01      	subs	r7, #1
 8005f90:	930f      	str	r3, [sp, #60]	@ 0x3c
 8005f92:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005f94:	1b9b      	subs	r3, r3, r6
 8005f96:	1e5a      	subs	r2, r3, #1
 8005f98:	bf46      	itte	mi
 8005f9a:	f1c3 0801 	rsbmi	r8, r3, #1
 8005f9e:	2300      	movmi	r3, #0
 8005fa0:	f04f 0800 	movpl.w	r8, #0
 8005fa4:	9209      	str	r2, [sp, #36]	@ 0x24
 8005fa6:	bf48      	it	mi
 8005fa8:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8005faa:	2f00      	cmp	r7, #0
 8005fac:	db3b      	blt.n	8006026 <_dtoa_r+0x21e>
 8005fae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005fb0:	970e      	str	r7, [sp, #56]	@ 0x38
 8005fb2:	443b      	add	r3, r7
 8005fb4:	9309      	str	r3, [sp, #36]	@ 0x24
 8005fb6:	2300      	movs	r3, #0
 8005fb8:	930a      	str	r3, [sp, #40]	@ 0x28
 8005fba:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005fbc:	2b09      	cmp	r3, #9
 8005fbe:	d866      	bhi.n	800608e <_dtoa_r+0x286>
 8005fc0:	2b05      	cmp	r3, #5
 8005fc2:	bfc4      	itt	gt
 8005fc4:	3b04      	subgt	r3, #4
 8005fc6:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8005fc8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005fca:	bfc8      	it	gt
 8005fcc:	2400      	movgt	r4, #0
 8005fce:	f1a3 0302 	sub.w	r3, r3, #2
 8005fd2:	bfd8      	it	le
 8005fd4:	2401      	movle	r4, #1
 8005fd6:	2b03      	cmp	r3, #3
 8005fd8:	d864      	bhi.n	80060a4 <_dtoa_r+0x29c>
 8005fda:	e8df f003 	tbb	[pc, r3]
 8005fde:	382b      	.short	0x382b
 8005fe0:	5636      	.short	0x5636
 8005fe2:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8005fe6:	441e      	add	r6, r3
 8005fe8:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8005fec:	2b20      	cmp	r3, #32
 8005fee:	bfc1      	itttt	gt
 8005ff0:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8005ff4:	fa08 f803 	lslgt.w	r8, r8, r3
 8005ff8:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8005ffc:	fa24 f303 	lsrgt.w	r3, r4, r3
 8006000:	bfd6      	itet	le
 8006002:	f1c3 0320 	rsble	r3, r3, #32
 8006006:	ea48 0003 	orrgt.w	r0, r8, r3
 800600a:	fa04 f003 	lslle.w	r0, r4, r3
 800600e:	f7fa fa9d 	bl	800054c <__aeabi_ui2d>
 8006012:	2201      	movs	r2, #1
 8006014:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8006018:	3e01      	subs	r6, #1
 800601a:	9212      	str	r2, [sp, #72]	@ 0x48
 800601c:	e775      	b.n	8005f0a <_dtoa_r+0x102>
 800601e:	2301      	movs	r3, #1
 8006020:	e7b6      	b.n	8005f90 <_dtoa_r+0x188>
 8006022:	900f      	str	r0, [sp, #60]	@ 0x3c
 8006024:	e7b5      	b.n	8005f92 <_dtoa_r+0x18a>
 8006026:	427b      	negs	r3, r7
 8006028:	930a      	str	r3, [sp, #40]	@ 0x28
 800602a:	2300      	movs	r3, #0
 800602c:	eba8 0807 	sub.w	r8, r8, r7
 8006030:	930e      	str	r3, [sp, #56]	@ 0x38
 8006032:	e7c2      	b.n	8005fba <_dtoa_r+0x1b2>
 8006034:	2300      	movs	r3, #0
 8006036:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006038:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800603a:	2b00      	cmp	r3, #0
 800603c:	dc35      	bgt.n	80060aa <_dtoa_r+0x2a2>
 800603e:	2301      	movs	r3, #1
 8006040:	461a      	mov	r2, r3
 8006042:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8006046:	9221      	str	r2, [sp, #132]	@ 0x84
 8006048:	e00b      	b.n	8006062 <_dtoa_r+0x25a>
 800604a:	2301      	movs	r3, #1
 800604c:	e7f3      	b.n	8006036 <_dtoa_r+0x22e>
 800604e:	2300      	movs	r3, #0
 8006050:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006052:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006054:	18fb      	adds	r3, r7, r3
 8006056:	9308      	str	r3, [sp, #32]
 8006058:	3301      	adds	r3, #1
 800605a:	2b01      	cmp	r3, #1
 800605c:	9307      	str	r3, [sp, #28]
 800605e:	bfb8      	it	lt
 8006060:	2301      	movlt	r3, #1
 8006062:	2100      	movs	r1, #0
 8006064:	2204      	movs	r2, #4
 8006066:	f8db 001c 	ldr.w	r0, [fp, #28]
 800606a:	f102 0514 	add.w	r5, r2, #20
 800606e:	429d      	cmp	r5, r3
 8006070:	d91f      	bls.n	80060b2 <_dtoa_r+0x2aa>
 8006072:	6041      	str	r1, [r0, #4]
 8006074:	4658      	mov	r0, fp
 8006076:	f000 fd8d 	bl	8006b94 <_Balloc>
 800607a:	4682      	mov	sl, r0
 800607c:	2800      	cmp	r0, #0
 800607e:	d139      	bne.n	80060f4 <_dtoa_r+0x2ec>
 8006080:	4602      	mov	r2, r0
 8006082:	f240 11af 	movw	r1, #431	@ 0x1af
 8006086:	4b1a      	ldr	r3, [pc, #104]	@ (80060f0 <_dtoa_r+0x2e8>)
 8006088:	e6d2      	b.n	8005e30 <_dtoa_r+0x28>
 800608a:	2301      	movs	r3, #1
 800608c:	e7e0      	b.n	8006050 <_dtoa_r+0x248>
 800608e:	2401      	movs	r4, #1
 8006090:	2300      	movs	r3, #0
 8006092:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006094:	9320      	str	r3, [sp, #128]	@ 0x80
 8006096:	f04f 33ff 	mov.w	r3, #4294967295
 800609a:	2200      	movs	r2, #0
 800609c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80060a0:	2312      	movs	r3, #18
 80060a2:	e7d0      	b.n	8006046 <_dtoa_r+0x23e>
 80060a4:	2301      	movs	r3, #1
 80060a6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80060a8:	e7f5      	b.n	8006096 <_dtoa_r+0x28e>
 80060aa:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80060ac:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80060b0:	e7d7      	b.n	8006062 <_dtoa_r+0x25a>
 80060b2:	3101      	adds	r1, #1
 80060b4:	0052      	lsls	r2, r2, #1
 80060b6:	e7d8      	b.n	800606a <_dtoa_r+0x262>
 80060b8:	636f4361 	.word	0x636f4361
 80060bc:	3fd287a7 	.word	0x3fd287a7
 80060c0:	8b60c8b3 	.word	0x8b60c8b3
 80060c4:	3fc68a28 	.word	0x3fc68a28
 80060c8:	509f79fb 	.word	0x509f79fb
 80060cc:	3fd34413 	.word	0x3fd34413
 80060d0:	0800947c 	.word	0x0800947c
 80060d4:	08009493 	.word	0x08009493
 80060d8:	7ff00000 	.word	0x7ff00000
 80060dc:	08009478 	.word	0x08009478
 80060e0:	08009447 	.word	0x08009447
 80060e4:	08009446 	.word	0x08009446
 80060e8:	3ff80000 	.word	0x3ff80000
 80060ec:	08009590 	.word	0x08009590
 80060f0:	080094eb 	.word	0x080094eb
 80060f4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80060f8:	6018      	str	r0, [r3, #0]
 80060fa:	9b07      	ldr	r3, [sp, #28]
 80060fc:	2b0e      	cmp	r3, #14
 80060fe:	f200 80a4 	bhi.w	800624a <_dtoa_r+0x442>
 8006102:	2c00      	cmp	r4, #0
 8006104:	f000 80a1 	beq.w	800624a <_dtoa_r+0x442>
 8006108:	2f00      	cmp	r7, #0
 800610a:	dd33      	ble.n	8006174 <_dtoa_r+0x36c>
 800610c:	4b86      	ldr	r3, [pc, #536]	@ (8006328 <_dtoa_r+0x520>)
 800610e:	f007 020f 	and.w	r2, r7, #15
 8006112:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006116:	05f8      	lsls	r0, r7, #23
 8006118:	e9d3 3400 	ldrd	r3, r4, [r3]
 800611c:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006120:	ea4f 1427 	mov.w	r4, r7, asr #4
 8006124:	d516      	bpl.n	8006154 <_dtoa_r+0x34c>
 8006126:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800612a:	4b80      	ldr	r3, [pc, #512]	@ (800632c <_dtoa_r+0x524>)
 800612c:	2603      	movs	r6, #3
 800612e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006132:	f7fa fbaf 	bl	8000894 <__aeabi_ddiv>
 8006136:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800613a:	f004 040f 	and.w	r4, r4, #15
 800613e:	4d7b      	ldr	r5, [pc, #492]	@ (800632c <_dtoa_r+0x524>)
 8006140:	b954      	cbnz	r4, 8006158 <_dtoa_r+0x350>
 8006142:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006146:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800614a:	f7fa fba3 	bl	8000894 <__aeabi_ddiv>
 800614e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006152:	e028      	b.n	80061a6 <_dtoa_r+0x39e>
 8006154:	2602      	movs	r6, #2
 8006156:	e7f2      	b.n	800613e <_dtoa_r+0x336>
 8006158:	07e1      	lsls	r1, r4, #31
 800615a:	d508      	bpl.n	800616e <_dtoa_r+0x366>
 800615c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006160:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006164:	f7fa fa6c 	bl	8000640 <__aeabi_dmul>
 8006168:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800616c:	3601      	adds	r6, #1
 800616e:	1064      	asrs	r4, r4, #1
 8006170:	3508      	adds	r5, #8
 8006172:	e7e5      	b.n	8006140 <_dtoa_r+0x338>
 8006174:	f000 80d2 	beq.w	800631c <_dtoa_r+0x514>
 8006178:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800617c:	427c      	negs	r4, r7
 800617e:	4b6a      	ldr	r3, [pc, #424]	@ (8006328 <_dtoa_r+0x520>)
 8006180:	f004 020f 	and.w	r2, r4, #15
 8006184:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006188:	e9d3 2300 	ldrd	r2, r3, [r3]
 800618c:	f7fa fa58 	bl	8000640 <__aeabi_dmul>
 8006190:	2602      	movs	r6, #2
 8006192:	2300      	movs	r3, #0
 8006194:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006198:	4d64      	ldr	r5, [pc, #400]	@ (800632c <_dtoa_r+0x524>)
 800619a:	1124      	asrs	r4, r4, #4
 800619c:	2c00      	cmp	r4, #0
 800619e:	f040 80b2 	bne.w	8006306 <_dtoa_r+0x4fe>
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d1d3      	bne.n	800614e <_dtoa_r+0x346>
 80061a6:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80061aa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	f000 80b7 	beq.w	8006320 <_dtoa_r+0x518>
 80061b2:	2200      	movs	r2, #0
 80061b4:	4620      	mov	r0, r4
 80061b6:	4629      	mov	r1, r5
 80061b8:	4b5d      	ldr	r3, [pc, #372]	@ (8006330 <_dtoa_r+0x528>)
 80061ba:	f7fa fcb3 	bl	8000b24 <__aeabi_dcmplt>
 80061be:	2800      	cmp	r0, #0
 80061c0:	f000 80ae 	beq.w	8006320 <_dtoa_r+0x518>
 80061c4:	9b07      	ldr	r3, [sp, #28]
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	f000 80aa 	beq.w	8006320 <_dtoa_r+0x518>
 80061cc:	9b08      	ldr	r3, [sp, #32]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	dd37      	ble.n	8006242 <_dtoa_r+0x43a>
 80061d2:	1e7b      	subs	r3, r7, #1
 80061d4:	4620      	mov	r0, r4
 80061d6:	9304      	str	r3, [sp, #16]
 80061d8:	2200      	movs	r2, #0
 80061da:	4629      	mov	r1, r5
 80061dc:	4b55      	ldr	r3, [pc, #340]	@ (8006334 <_dtoa_r+0x52c>)
 80061de:	f7fa fa2f 	bl	8000640 <__aeabi_dmul>
 80061e2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80061e6:	9c08      	ldr	r4, [sp, #32]
 80061e8:	3601      	adds	r6, #1
 80061ea:	4630      	mov	r0, r6
 80061ec:	f7fa f9be 	bl	800056c <__aeabi_i2d>
 80061f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80061f4:	f7fa fa24 	bl	8000640 <__aeabi_dmul>
 80061f8:	2200      	movs	r2, #0
 80061fa:	4b4f      	ldr	r3, [pc, #316]	@ (8006338 <_dtoa_r+0x530>)
 80061fc:	f7fa f86a 	bl	80002d4 <__adddf3>
 8006200:	4605      	mov	r5, r0
 8006202:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8006206:	2c00      	cmp	r4, #0
 8006208:	f040 809a 	bne.w	8006340 <_dtoa_r+0x538>
 800620c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006210:	2200      	movs	r2, #0
 8006212:	4b4a      	ldr	r3, [pc, #296]	@ (800633c <_dtoa_r+0x534>)
 8006214:	f7fa f85c 	bl	80002d0 <__aeabi_dsub>
 8006218:	4602      	mov	r2, r0
 800621a:	460b      	mov	r3, r1
 800621c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006220:	462a      	mov	r2, r5
 8006222:	4633      	mov	r3, r6
 8006224:	f7fa fc9c 	bl	8000b60 <__aeabi_dcmpgt>
 8006228:	2800      	cmp	r0, #0
 800622a:	f040 828e 	bne.w	800674a <_dtoa_r+0x942>
 800622e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006232:	462a      	mov	r2, r5
 8006234:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006238:	f7fa fc74 	bl	8000b24 <__aeabi_dcmplt>
 800623c:	2800      	cmp	r0, #0
 800623e:	f040 8127 	bne.w	8006490 <_dtoa_r+0x688>
 8006242:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8006246:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800624a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800624c:	2b00      	cmp	r3, #0
 800624e:	f2c0 8163 	blt.w	8006518 <_dtoa_r+0x710>
 8006252:	2f0e      	cmp	r7, #14
 8006254:	f300 8160 	bgt.w	8006518 <_dtoa_r+0x710>
 8006258:	4b33      	ldr	r3, [pc, #204]	@ (8006328 <_dtoa_r+0x520>)
 800625a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800625e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006262:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006266:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006268:	2b00      	cmp	r3, #0
 800626a:	da03      	bge.n	8006274 <_dtoa_r+0x46c>
 800626c:	9b07      	ldr	r3, [sp, #28]
 800626e:	2b00      	cmp	r3, #0
 8006270:	f340 8100 	ble.w	8006474 <_dtoa_r+0x66c>
 8006274:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006278:	4656      	mov	r6, sl
 800627a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800627e:	4620      	mov	r0, r4
 8006280:	4629      	mov	r1, r5
 8006282:	f7fa fb07 	bl	8000894 <__aeabi_ddiv>
 8006286:	f7fa fc8b 	bl	8000ba0 <__aeabi_d2iz>
 800628a:	4680      	mov	r8, r0
 800628c:	f7fa f96e 	bl	800056c <__aeabi_i2d>
 8006290:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006294:	f7fa f9d4 	bl	8000640 <__aeabi_dmul>
 8006298:	4602      	mov	r2, r0
 800629a:	460b      	mov	r3, r1
 800629c:	4620      	mov	r0, r4
 800629e:	4629      	mov	r1, r5
 80062a0:	f7fa f816 	bl	80002d0 <__aeabi_dsub>
 80062a4:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80062a8:	9d07      	ldr	r5, [sp, #28]
 80062aa:	f806 4b01 	strb.w	r4, [r6], #1
 80062ae:	eba6 040a 	sub.w	r4, r6, sl
 80062b2:	42a5      	cmp	r5, r4
 80062b4:	4602      	mov	r2, r0
 80062b6:	460b      	mov	r3, r1
 80062b8:	f040 8116 	bne.w	80064e8 <_dtoa_r+0x6e0>
 80062bc:	f7fa f80a 	bl	80002d4 <__adddf3>
 80062c0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80062c4:	4604      	mov	r4, r0
 80062c6:	460d      	mov	r5, r1
 80062c8:	f7fa fc4a 	bl	8000b60 <__aeabi_dcmpgt>
 80062cc:	2800      	cmp	r0, #0
 80062ce:	f040 80f8 	bne.w	80064c2 <_dtoa_r+0x6ba>
 80062d2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80062d6:	4620      	mov	r0, r4
 80062d8:	4629      	mov	r1, r5
 80062da:	f7fa fc19 	bl	8000b10 <__aeabi_dcmpeq>
 80062de:	b118      	cbz	r0, 80062e8 <_dtoa_r+0x4e0>
 80062e0:	f018 0f01 	tst.w	r8, #1
 80062e4:	f040 80ed 	bne.w	80064c2 <_dtoa_r+0x6ba>
 80062e8:	4649      	mov	r1, r9
 80062ea:	4658      	mov	r0, fp
 80062ec:	f000 fc92 	bl	8006c14 <_Bfree>
 80062f0:	2300      	movs	r3, #0
 80062f2:	7033      	strb	r3, [r6, #0]
 80062f4:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80062f6:	3701      	adds	r7, #1
 80062f8:	601f      	str	r7, [r3, #0]
 80062fa:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	f000 8320 	beq.w	8006942 <_dtoa_r+0xb3a>
 8006302:	601e      	str	r6, [r3, #0]
 8006304:	e31d      	b.n	8006942 <_dtoa_r+0xb3a>
 8006306:	07e2      	lsls	r2, r4, #31
 8006308:	d505      	bpl.n	8006316 <_dtoa_r+0x50e>
 800630a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800630e:	f7fa f997 	bl	8000640 <__aeabi_dmul>
 8006312:	2301      	movs	r3, #1
 8006314:	3601      	adds	r6, #1
 8006316:	1064      	asrs	r4, r4, #1
 8006318:	3508      	adds	r5, #8
 800631a:	e73f      	b.n	800619c <_dtoa_r+0x394>
 800631c:	2602      	movs	r6, #2
 800631e:	e742      	b.n	80061a6 <_dtoa_r+0x39e>
 8006320:	9c07      	ldr	r4, [sp, #28]
 8006322:	9704      	str	r7, [sp, #16]
 8006324:	e761      	b.n	80061ea <_dtoa_r+0x3e2>
 8006326:	bf00      	nop
 8006328:	08009590 	.word	0x08009590
 800632c:	08009568 	.word	0x08009568
 8006330:	3ff00000 	.word	0x3ff00000
 8006334:	40240000 	.word	0x40240000
 8006338:	401c0000 	.word	0x401c0000
 800633c:	40140000 	.word	0x40140000
 8006340:	4b70      	ldr	r3, [pc, #448]	@ (8006504 <_dtoa_r+0x6fc>)
 8006342:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006344:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006348:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800634c:	4454      	add	r4, sl
 800634e:	2900      	cmp	r1, #0
 8006350:	d045      	beq.n	80063de <_dtoa_r+0x5d6>
 8006352:	2000      	movs	r0, #0
 8006354:	496c      	ldr	r1, [pc, #432]	@ (8006508 <_dtoa_r+0x700>)
 8006356:	f7fa fa9d 	bl	8000894 <__aeabi_ddiv>
 800635a:	4633      	mov	r3, r6
 800635c:	462a      	mov	r2, r5
 800635e:	f7f9 ffb7 	bl	80002d0 <__aeabi_dsub>
 8006362:	4656      	mov	r6, sl
 8006364:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006368:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800636c:	f7fa fc18 	bl	8000ba0 <__aeabi_d2iz>
 8006370:	4605      	mov	r5, r0
 8006372:	f7fa f8fb 	bl	800056c <__aeabi_i2d>
 8006376:	4602      	mov	r2, r0
 8006378:	460b      	mov	r3, r1
 800637a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800637e:	f7f9 ffa7 	bl	80002d0 <__aeabi_dsub>
 8006382:	4602      	mov	r2, r0
 8006384:	460b      	mov	r3, r1
 8006386:	3530      	adds	r5, #48	@ 0x30
 8006388:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800638c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006390:	f806 5b01 	strb.w	r5, [r6], #1
 8006394:	f7fa fbc6 	bl	8000b24 <__aeabi_dcmplt>
 8006398:	2800      	cmp	r0, #0
 800639a:	d163      	bne.n	8006464 <_dtoa_r+0x65c>
 800639c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80063a0:	2000      	movs	r0, #0
 80063a2:	495a      	ldr	r1, [pc, #360]	@ (800650c <_dtoa_r+0x704>)
 80063a4:	f7f9 ff94 	bl	80002d0 <__aeabi_dsub>
 80063a8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80063ac:	f7fa fbba 	bl	8000b24 <__aeabi_dcmplt>
 80063b0:	2800      	cmp	r0, #0
 80063b2:	f040 8087 	bne.w	80064c4 <_dtoa_r+0x6bc>
 80063b6:	42a6      	cmp	r6, r4
 80063b8:	f43f af43 	beq.w	8006242 <_dtoa_r+0x43a>
 80063bc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80063c0:	2200      	movs	r2, #0
 80063c2:	4b53      	ldr	r3, [pc, #332]	@ (8006510 <_dtoa_r+0x708>)
 80063c4:	f7fa f93c 	bl	8000640 <__aeabi_dmul>
 80063c8:	2200      	movs	r2, #0
 80063ca:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80063ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80063d2:	4b4f      	ldr	r3, [pc, #316]	@ (8006510 <_dtoa_r+0x708>)
 80063d4:	f7fa f934 	bl	8000640 <__aeabi_dmul>
 80063d8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80063dc:	e7c4      	b.n	8006368 <_dtoa_r+0x560>
 80063de:	4631      	mov	r1, r6
 80063e0:	4628      	mov	r0, r5
 80063e2:	f7fa f92d 	bl	8000640 <__aeabi_dmul>
 80063e6:	4656      	mov	r6, sl
 80063e8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80063ec:	9413      	str	r4, [sp, #76]	@ 0x4c
 80063ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80063f2:	f7fa fbd5 	bl	8000ba0 <__aeabi_d2iz>
 80063f6:	4605      	mov	r5, r0
 80063f8:	f7fa f8b8 	bl	800056c <__aeabi_i2d>
 80063fc:	4602      	mov	r2, r0
 80063fe:	460b      	mov	r3, r1
 8006400:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006404:	f7f9 ff64 	bl	80002d0 <__aeabi_dsub>
 8006408:	4602      	mov	r2, r0
 800640a:	460b      	mov	r3, r1
 800640c:	3530      	adds	r5, #48	@ 0x30
 800640e:	f806 5b01 	strb.w	r5, [r6], #1
 8006412:	42a6      	cmp	r6, r4
 8006414:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006418:	f04f 0200 	mov.w	r2, #0
 800641c:	d124      	bne.n	8006468 <_dtoa_r+0x660>
 800641e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006422:	4b39      	ldr	r3, [pc, #228]	@ (8006508 <_dtoa_r+0x700>)
 8006424:	f7f9 ff56 	bl	80002d4 <__adddf3>
 8006428:	4602      	mov	r2, r0
 800642a:	460b      	mov	r3, r1
 800642c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006430:	f7fa fb96 	bl	8000b60 <__aeabi_dcmpgt>
 8006434:	2800      	cmp	r0, #0
 8006436:	d145      	bne.n	80064c4 <_dtoa_r+0x6bc>
 8006438:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800643c:	2000      	movs	r0, #0
 800643e:	4932      	ldr	r1, [pc, #200]	@ (8006508 <_dtoa_r+0x700>)
 8006440:	f7f9 ff46 	bl	80002d0 <__aeabi_dsub>
 8006444:	4602      	mov	r2, r0
 8006446:	460b      	mov	r3, r1
 8006448:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800644c:	f7fa fb6a 	bl	8000b24 <__aeabi_dcmplt>
 8006450:	2800      	cmp	r0, #0
 8006452:	f43f aef6 	beq.w	8006242 <_dtoa_r+0x43a>
 8006456:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8006458:	1e73      	subs	r3, r6, #1
 800645a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800645c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006460:	2b30      	cmp	r3, #48	@ 0x30
 8006462:	d0f8      	beq.n	8006456 <_dtoa_r+0x64e>
 8006464:	9f04      	ldr	r7, [sp, #16]
 8006466:	e73f      	b.n	80062e8 <_dtoa_r+0x4e0>
 8006468:	4b29      	ldr	r3, [pc, #164]	@ (8006510 <_dtoa_r+0x708>)
 800646a:	f7fa f8e9 	bl	8000640 <__aeabi_dmul>
 800646e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006472:	e7bc      	b.n	80063ee <_dtoa_r+0x5e6>
 8006474:	d10c      	bne.n	8006490 <_dtoa_r+0x688>
 8006476:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800647a:	2200      	movs	r2, #0
 800647c:	4b25      	ldr	r3, [pc, #148]	@ (8006514 <_dtoa_r+0x70c>)
 800647e:	f7fa f8df 	bl	8000640 <__aeabi_dmul>
 8006482:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006486:	f7fa fb61 	bl	8000b4c <__aeabi_dcmpge>
 800648a:	2800      	cmp	r0, #0
 800648c:	f000 815b 	beq.w	8006746 <_dtoa_r+0x93e>
 8006490:	2400      	movs	r4, #0
 8006492:	4625      	mov	r5, r4
 8006494:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006496:	4656      	mov	r6, sl
 8006498:	43db      	mvns	r3, r3
 800649a:	9304      	str	r3, [sp, #16]
 800649c:	2700      	movs	r7, #0
 800649e:	4621      	mov	r1, r4
 80064a0:	4658      	mov	r0, fp
 80064a2:	f000 fbb7 	bl	8006c14 <_Bfree>
 80064a6:	2d00      	cmp	r5, #0
 80064a8:	d0dc      	beq.n	8006464 <_dtoa_r+0x65c>
 80064aa:	b12f      	cbz	r7, 80064b8 <_dtoa_r+0x6b0>
 80064ac:	42af      	cmp	r7, r5
 80064ae:	d003      	beq.n	80064b8 <_dtoa_r+0x6b0>
 80064b0:	4639      	mov	r1, r7
 80064b2:	4658      	mov	r0, fp
 80064b4:	f000 fbae 	bl	8006c14 <_Bfree>
 80064b8:	4629      	mov	r1, r5
 80064ba:	4658      	mov	r0, fp
 80064bc:	f000 fbaa 	bl	8006c14 <_Bfree>
 80064c0:	e7d0      	b.n	8006464 <_dtoa_r+0x65c>
 80064c2:	9704      	str	r7, [sp, #16]
 80064c4:	4633      	mov	r3, r6
 80064c6:	461e      	mov	r6, r3
 80064c8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80064cc:	2a39      	cmp	r2, #57	@ 0x39
 80064ce:	d107      	bne.n	80064e0 <_dtoa_r+0x6d8>
 80064d0:	459a      	cmp	sl, r3
 80064d2:	d1f8      	bne.n	80064c6 <_dtoa_r+0x6be>
 80064d4:	9a04      	ldr	r2, [sp, #16]
 80064d6:	3201      	adds	r2, #1
 80064d8:	9204      	str	r2, [sp, #16]
 80064da:	2230      	movs	r2, #48	@ 0x30
 80064dc:	f88a 2000 	strb.w	r2, [sl]
 80064e0:	781a      	ldrb	r2, [r3, #0]
 80064e2:	3201      	adds	r2, #1
 80064e4:	701a      	strb	r2, [r3, #0]
 80064e6:	e7bd      	b.n	8006464 <_dtoa_r+0x65c>
 80064e8:	2200      	movs	r2, #0
 80064ea:	4b09      	ldr	r3, [pc, #36]	@ (8006510 <_dtoa_r+0x708>)
 80064ec:	f7fa f8a8 	bl	8000640 <__aeabi_dmul>
 80064f0:	2200      	movs	r2, #0
 80064f2:	2300      	movs	r3, #0
 80064f4:	4604      	mov	r4, r0
 80064f6:	460d      	mov	r5, r1
 80064f8:	f7fa fb0a 	bl	8000b10 <__aeabi_dcmpeq>
 80064fc:	2800      	cmp	r0, #0
 80064fe:	f43f aebc 	beq.w	800627a <_dtoa_r+0x472>
 8006502:	e6f1      	b.n	80062e8 <_dtoa_r+0x4e0>
 8006504:	08009590 	.word	0x08009590
 8006508:	3fe00000 	.word	0x3fe00000
 800650c:	3ff00000 	.word	0x3ff00000
 8006510:	40240000 	.word	0x40240000
 8006514:	40140000 	.word	0x40140000
 8006518:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800651a:	2a00      	cmp	r2, #0
 800651c:	f000 80db 	beq.w	80066d6 <_dtoa_r+0x8ce>
 8006520:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8006522:	2a01      	cmp	r2, #1
 8006524:	f300 80bf 	bgt.w	80066a6 <_dtoa_r+0x89e>
 8006528:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800652a:	2a00      	cmp	r2, #0
 800652c:	f000 80b7 	beq.w	800669e <_dtoa_r+0x896>
 8006530:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8006534:	4646      	mov	r6, r8
 8006536:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006538:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800653a:	2101      	movs	r1, #1
 800653c:	441a      	add	r2, r3
 800653e:	4658      	mov	r0, fp
 8006540:	4498      	add	r8, r3
 8006542:	9209      	str	r2, [sp, #36]	@ 0x24
 8006544:	f000 fc64 	bl	8006e10 <__i2b>
 8006548:	4605      	mov	r5, r0
 800654a:	b15e      	cbz	r6, 8006564 <_dtoa_r+0x75c>
 800654c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800654e:	2b00      	cmp	r3, #0
 8006550:	dd08      	ble.n	8006564 <_dtoa_r+0x75c>
 8006552:	42b3      	cmp	r3, r6
 8006554:	bfa8      	it	ge
 8006556:	4633      	movge	r3, r6
 8006558:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800655a:	eba8 0803 	sub.w	r8, r8, r3
 800655e:	1af6      	subs	r6, r6, r3
 8006560:	1ad3      	subs	r3, r2, r3
 8006562:	9309      	str	r3, [sp, #36]	@ 0x24
 8006564:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006566:	b1f3      	cbz	r3, 80065a6 <_dtoa_r+0x79e>
 8006568:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800656a:	2b00      	cmp	r3, #0
 800656c:	f000 80b7 	beq.w	80066de <_dtoa_r+0x8d6>
 8006570:	b18c      	cbz	r4, 8006596 <_dtoa_r+0x78e>
 8006572:	4629      	mov	r1, r5
 8006574:	4622      	mov	r2, r4
 8006576:	4658      	mov	r0, fp
 8006578:	f000 fd08 	bl	8006f8c <__pow5mult>
 800657c:	464a      	mov	r2, r9
 800657e:	4601      	mov	r1, r0
 8006580:	4605      	mov	r5, r0
 8006582:	4658      	mov	r0, fp
 8006584:	f000 fc5a 	bl	8006e3c <__multiply>
 8006588:	4649      	mov	r1, r9
 800658a:	9004      	str	r0, [sp, #16]
 800658c:	4658      	mov	r0, fp
 800658e:	f000 fb41 	bl	8006c14 <_Bfree>
 8006592:	9b04      	ldr	r3, [sp, #16]
 8006594:	4699      	mov	r9, r3
 8006596:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006598:	1b1a      	subs	r2, r3, r4
 800659a:	d004      	beq.n	80065a6 <_dtoa_r+0x79e>
 800659c:	4649      	mov	r1, r9
 800659e:	4658      	mov	r0, fp
 80065a0:	f000 fcf4 	bl	8006f8c <__pow5mult>
 80065a4:	4681      	mov	r9, r0
 80065a6:	2101      	movs	r1, #1
 80065a8:	4658      	mov	r0, fp
 80065aa:	f000 fc31 	bl	8006e10 <__i2b>
 80065ae:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80065b0:	4604      	mov	r4, r0
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	f000 81c9 	beq.w	800694a <_dtoa_r+0xb42>
 80065b8:	461a      	mov	r2, r3
 80065ba:	4601      	mov	r1, r0
 80065bc:	4658      	mov	r0, fp
 80065be:	f000 fce5 	bl	8006f8c <__pow5mult>
 80065c2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80065c4:	4604      	mov	r4, r0
 80065c6:	2b01      	cmp	r3, #1
 80065c8:	f300 808f 	bgt.w	80066ea <_dtoa_r+0x8e2>
 80065cc:	9b02      	ldr	r3, [sp, #8]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	f040 8087 	bne.w	80066e2 <_dtoa_r+0x8da>
 80065d4:	9b03      	ldr	r3, [sp, #12]
 80065d6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80065da:	2b00      	cmp	r3, #0
 80065dc:	f040 8083 	bne.w	80066e6 <_dtoa_r+0x8de>
 80065e0:	9b03      	ldr	r3, [sp, #12]
 80065e2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80065e6:	0d1b      	lsrs	r3, r3, #20
 80065e8:	051b      	lsls	r3, r3, #20
 80065ea:	b12b      	cbz	r3, 80065f8 <_dtoa_r+0x7f0>
 80065ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80065ee:	f108 0801 	add.w	r8, r8, #1
 80065f2:	3301      	adds	r3, #1
 80065f4:	9309      	str	r3, [sp, #36]	@ 0x24
 80065f6:	2301      	movs	r3, #1
 80065f8:	930a      	str	r3, [sp, #40]	@ 0x28
 80065fa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	f000 81aa 	beq.w	8006956 <_dtoa_r+0xb4e>
 8006602:	6923      	ldr	r3, [r4, #16]
 8006604:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006608:	6918      	ldr	r0, [r3, #16]
 800660a:	f000 fbb5 	bl	8006d78 <__hi0bits>
 800660e:	f1c0 0020 	rsb	r0, r0, #32
 8006612:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006614:	4418      	add	r0, r3
 8006616:	f010 001f 	ands.w	r0, r0, #31
 800661a:	d071      	beq.n	8006700 <_dtoa_r+0x8f8>
 800661c:	f1c0 0320 	rsb	r3, r0, #32
 8006620:	2b04      	cmp	r3, #4
 8006622:	dd65      	ble.n	80066f0 <_dtoa_r+0x8e8>
 8006624:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006626:	f1c0 001c 	rsb	r0, r0, #28
 800662a:	4403      	add	r3, r0
 800662c:	4480      	add	r8, r0
 800662e:	4406      	add	r6, r0
 8006630:	9309      	str	r3, [sp, #36]	@ 0x24
 8006632:	f1b8 0f00 	cmp.w	r8, #0
 8006636:	dd05      	ble.n	8006644 <_dtoa_r+0x83c>
 8006638:	4649      	mov	r1, r9
 800663a:	4642      	mov	r2, r8
 800663c:	4658      	mov	r0, fp
 800663e:	f000 fcff 	bl	8007040 <__lshift>
 8006642:	4681      	mov	r9, r0
 8006644:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006646:	2b00      	cmp	r3, #0
 8006648:	dd05      	ble.n	8006656 <_dtoa_r+0x84e>
 800664a:	4621      	mov	r1, r4
 800664c:	461a      	mov	r2, r3
 800664e:	4658      	mov	r0, fp
 8006650:	f000 fcf6 	bl	8007040 <__lshift>
 8006654:	4604      	mov	r4, r0
 8006656:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006658:	2b00      	cmp	r3, #0
 800665a:	d053      	beq.n	8006704 <_dtoa_r+0x8fc>
 800665c:	4621      	mov	r1, r4
 800665e:	4648      	mov	r0, r9
 8006660:	f000 fd5a 	bl	8007118 <__mcmp>
 8006664:	2800      	cmp	r0, #0
 8006666:	da4d      	bge.n	8006704 <_dtoa_r+0x8fc>
 8006668:	1e7b      	subs	r3, r7, #1
 800666a:	4649      	mov	r1, r9
 800666c:	9304      	str	r3, [sp, #16]
 800666e:	220a      	movs	r2, #10
 8006670:	2300      	movs	r3, #0
 8006672:	4658      	mov	r0, fp
 8006674:	f000 faf0 	bl	8006c58 <__multadd>
 8006678:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800667a:	4681      	mov	r9, r0
 800667c:	2b00      	cmp	r3, #0
 800667e:	f000 816c 	beq.w	800695a <_dtoa_r+0xb52>
 8006682:	2300      	movs	r3, #0
 8006684:	4629      	mov	r1, r5
 8006686:	220a      	movs	r2, #10
 8006688:	4658      	mov	r0, fp
 800668a:	f000 fae5 	bl	8006c58 <__multadd>
 800668e:	9b08      	ldr	r3, [sp, #32]
 8006690:	4605      	mov	r5, r0
 8006692:	2b00      	cmp	r3, #0
 8006694:	dc61      	bgt.n	800675a <_dtoa_r+0x952>
 8006696:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006698:	2b02      	cmp	r3, #2
 800669a:	dc3b      	bgt.n	8006714 <_dtoa_r+0x90c>
 800669c:	e05d      	b.n	800675a <_dtoa_r+0x952>
 800669e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80066a0:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80066a4:	e746      	b.n	8006534 <_dtoa_r+0x72c>
 80066a6:	9b07      	ldr	r3, [sp, #28]
 80066a8:	1e5c      	subs	r4, r3, #1
 80066aa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80066ac:	42a3      	cmp	r3, r4
 80066ae:	bfbf      	itttt	lt
 80066b0:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80066b2:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 80066b4:	1ae3      	sublt	r3, r4, r3
 80066b6:	18d2      	addlt	r2, r2, r3
 80066b8:	bfa8      	it	ge
 80066ba:	1b1c      	subge	r4, r3, r4
 80066bc:	9b07      	ldr	r3, [sp, #28]
 80066be:	bfbe      	ittt	lt
 80066c0:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80066c2:	920e      	strlt	r2, [sp, #56]	@ 0x38
 80066c4:	2400      	movlt	r4, #0
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	bfb5      	itete	lt
 80066ca:	eba8 0603 	sublt.w	r6, r8, r3
 80066ce:	4646      	movge	r6, r8
 80066d0:	2300      	movlt	r3, #0
 80066d2:	9b07      	ldrge	r3, [sp, #28]
 80066d4:	e730      	b.n	8006538 <_dtoa_r+0x730>
 80066d6:	4646      	mov	r6, r8
 80066d8:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80066da:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80066dc:	e735      	b.n	800654a <_dtoa_r+0x742>
 80066de:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80066e0:	e75c      	b.n	800659c <_dtoa_r+0x794>
 80066e2:	2300      	movs	r3, #0
 80066e4:	e788      	b.n	80065f8 <_dtoa_r+0x7f0>
 80066e6:	9b02      	ldr	r3, [sp, #8]
 80066e8:	e786      	b.n	80065f8 <_dtoa_r+0x7f0>
 80066ea:	2300      	movs	r3, #0
 80066ec:	930a      	str	r3, [sp, #40]	@ 0x28
 80066ee:	e788      	b.n	8006602 <_dtoa_r+0x7fa>
 80066f0:	d09f      	beq.n	8006632 <_dtoa_r+0x82a>
 80066f2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80066f4:	331c      	adds	r3, #28
 80066f6:	441a      	add	r2, r3
 80066f8:	4498      	add	r8, r3
 80066fa:	441e      	add	r6, r3
 80066fc:	9209      	str	r2, [sp, #36]	@ 0x24
 80066fe:	e798      	b.n	8006632 <_dtoa_r+0x82a>
 8006700:	4603      	mov	r3, r0
 8006702:	e7f6      	b.n	80066f2 <_dtoa_r+0x8ea>
 8006704:	9b07      	ldr	r3, [sp, #28]
 8006706:	9704      	str	r7, [sp, #16]
 8006708:	2b00      	cmp	r3, #0
 800670a:	dc20      	bgt.n	800674e <_dtoa_r+0x946>
 800670c:	9308      	str	r3, [sp, #32]
 800670e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006710:	2b02      	cmp	r3, #2
 8006712:	dd1e      	ble.n	8006752 <_dtoa_r+0x94a>
 8006714:	9b08      	ldr	r3, [sp, #32]
 8006716:	2b00      	cmp	r3, #0
 8006718:	f47f aebc 	bne.w	8006494 <_dtoa_r+0x68c>
 800671c:	4621      	mov	r1, r4
 800671e:	2205      	movs	r2, #5
 8006720:	4658      	mov	r0, fp
 8006722:	f000 fa99 	bl	8006c58 <__multadd>
 8006726:	4601      	mov	r1, r0
 8006728:	4604      	mov	r4, r0
 800672a:	4648      	mov	r0, r9
 800672c:	f000 fcf4 	bl	8007118 <__mcmp>
 8006730:	2800      	cmp	r0, #0
 8006732:	f77f aeaf 	ble.w	8006494 <_dtoa_r+0x68c>
 8006736:	2331      	movs	r3, #49	@ 0x31
 8006738:	4656      	mov	r6, sl
 800673a:	f806 3b01 	strb.w	r3, [r6], #1
 800673e:	9b04      	ldr	r3, [sp, #16]
 8006740:	3301      	adds	r3, #1
 8006742:	9304      	str	r3, [sp, #16]
 8006744:	e6aa      	b.n	800649c <_dtoa_r+0x694>
 8006746:	9c07      	ldr	r4, [sp, #28]
 8006748:	9704      	str	r7, [sp, #16]
 800674a:	4625      	mov	r5, r4
 800674c:	e7f3      	b.n	8006736 <_dtoa_r+0x92e>
 800674e:	9b07      	ldr	r3, [sp, #28]
 8006750:	9308      	str	r3, [sp, #32]
 8006752:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006754:	2b00      	cmp	r3, #0
 8006756:	f000 8104 	beq.w	8006962 <_dtoa_r+0xb5a>
 800675a:	2e00      	cmp	r6, #0
 800675c:	dd05      	ble.n	800676a <_dtoa_r+0x962>
 800675e:	4629      	mov	r1, r5
 8006760:	4632      	mov	r2, r6
 8006762:	4658      	mov	r0, fp
 8006764:	f000 fc6c 	bl	8007040 <__lshift>
 8006768:	4605      	mov	r5, r0
 800676a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800676c:	2b00      	cmp	r3, #0
 800676e:	d05a      	beq.n	8006826 <_dtoa_r+0xa1e>
 8006770:	4658      	mov	r0, fp
 8006772:	6869      	ldr	r1, [r5, #4]
 8006774:	f000 fa0e 	bl	8006b94 <_Balloc>
 8006778:	4606      	mov	r6, r0
 800677a:	b928      	cbnz	r0, 8006788 <_dtoa_r+0x980>
 800677c:	4602      	mov	r2, r0
 800677e:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8006782:	4b83      	ldr	r3, [pc, #524]	@ (8006990 <_dtoa_r+0xb88>)
 8006784:	f7ff bb54 	b.w	8005e30 <_dtoa_r+0x28>
 8006788:	692a      	ldr	r2, [r5, #16]
 800678a:	f105 010c 	add.w	r1, r5, #12
 800678e:	3202      	adds	r2, #2
 8006790:	0092      	lsls	r2, r2, #2
 8006792:	300c      	adds	r0, #12
 8006794:	f001 ff5e 	bl	8008654 <memcpy>
 8006798:	2201      	movs	r2, #1
 800679a:	4631      	mov	r1, r6
 800679c:	4658      	mov	r0, fp
 800679e:	f000 fc4f 	bl	8007040 <__lshift>
 80067a2:	462f      	mov	r7, r5
 80067a4:	4605      	mov	r5, r0
 80067a6:	f10a 0301 	add.w	r3, sl, #1
 80067aa:	9307      	str	r3, [sp, #28]
 80067ac:	9b08      	ldr	r3, [sp, #32]
 80067ae:	4453      	add	r3, sl
 80067b0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80067b2:	9b02      	ldr	r3, [sp, #8]
 80067b4:	f003 0301 	and.w	r3, r3, #1
 80067b8:	930a      	str	r3, [sp, #40]	@ 0x28
 80067ba:	9b07      	ldr	r3, [sp, #28]
 80067bc:	4621      	mov	r1, r4
 80067be:	3b01      	subs	r3, #1
 80067c0:	4648      	mov	r0, r9
 80067c2:	9302      	str	r3, [sp, #8]
 80067c4:	f7ff fa96 	bl	8005cf4 <quorem>
 80067c8:	4639      	mov	r1, r7
 80067ca:	9008      	str	r0, [sp, #32]
 80067cc:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80067d0:	4648      	mov	r0, r9
 80067d2:	f000 fca1 	bl	8007118 <__mcmp>
 80067d6:	462a      	mov	r2, r5
 80067d8:	9009      	str	r0, [sp, #36]	@ 0x24
 80067da:	4621      	mov	r1, r4
 80067dc:	4658      	mov	r0, fp
 80067de:	f000 fcb7 	bl	8007150 <__mdiff>
 80067e2:	68c2      	ldr	r2, [r0, #12]
 80067e4:	4606      	mov	r6, r0
 80067e6:	bb02      	cbnz	r2, 800682a <_dtoa_r+0xa22>
 80067e8:	4601      	mov	r1, r0
 80067ea:	4648      	mov	r0, r9
 80067ec:	f000 fc94 	bl	8007118 <__mcmp>
 80067f0:	4602      	mov	r2, r0
 80067f2:	4631      	mov	r1, r6
 80067f4:	4658      	mov	r0, fp
 80067f6:	920c      	str	r2, [sp, #48]	@ 0x30
 80067f8:	f000 fa0c 	bl	8006c14 <_Bfree>
 80067fc:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80067fe:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8006800:	9e07      	ldr	r6, [sp, #28]
 8006802:	ea43 0102 	orr.w	r1, r3, r2
 8006806:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006808:	4319      	orrs	r1, r3
 800680a:	d110      	bne.n	800682e <_dtoa_r+0xa26>
 800680c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006810:	d029      	beq.n	8006866 <_dtoa_r+0xa5e>
 8006812:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006814:	2b00      	cmp	r3, #0
 8006816:	dd02      	ble.n	800681e <_dtoa_r+0xa16>
 8006818:	9b08      	ldr	r3, [sp, #32]
 800681a:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800681e:	9b02      	ldr	r3, [sp, #8]
 8006820:	f883 8000 	strb.w	r8, [r3]
 8006824:	e63b      	b.n	800649e <_dtoa_r+0x696>
 8006826:	4628      	mov	r0, r5
 8006828:	e7bb      	b.n	80067a2 <_dtoa_r+0x99a>
 800682a:	2201      	movs	r2, #1
 800682c:	e7e1      	b.n	80067f2 <_dtoa_r+0x9ea>
 800682e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006830:	2b00      	cmp	r3, #0
 8006832:	db04      	blt.n	800683e <_dtoa_r+0xa36>
 8006834:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8006836:	430b      	orrs	r3, r1
 8006838:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800683a:	430b      	orrs	r3, r1
 800683c:	d120      	bne.n	8006880 <_dtoa_r+0xa78>
 800683e:	2a00      	cmp	r2, #0
 8006840:	dded      	ble.n	800681e <_dtoa_r+0xa16>
 8006842:	4649      	mov	r1, r9
 8006844:	2201      	movs	r2, #1
 8006846:	4658      	mov	r0, fp
 8006848:	f000 fbfa 	bl	8007040 <__lshift>
 800684c:	4621      	mov	r1, r4
 800684e:	4681      	mov	r9, r0
 8006850:	f000 fc62 	bl	8007118 <__mcmp>
 8006854:	2800      	cmp	r0, #0
 8006856:	dc03      	bgt.n	8006860 <_dtoa_r+0xa58>
 8006858:	d1e1      	bne.n	800681e <_dtoa_r+0xa16>
 800685a:	f018 0f01 	tst.w	r8, #1
 800685e:	d0de      	beq.n	800681e <_dtoa_r+0xa16>
 8006860:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006864:	d1d8      	bne.n	8006818 <_dtoa_r+0xa10>
 8006866:	2339      	movs	r3, #57	@ 0x39
 8006868:	9a02      	ldr	r2, [sp, #8]
 800686a:	7013      	strb	r3, [r2, #0]
 800686c:	4633      	mov	r3, r6
 800686e:	461e      	mov	r6, r3
 8006870:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8006874:	3b01      	subs	r3, #1
 8006876:	2a39      	cmp	r2, #57	@ 0x39
 8006878:	d052      	beq.n	8006920 <_dtoa_r+0xb18>
 800687a:	3201      	adds	r2, #1
 800687c:	701a      	strb	r2, [r3, #0]
 800687e:	e60e      	b.n	800649e <_dtoa_r+0x696>
 8006880:	2a00      	cmp	r2, #0
 8006882:	dd07      	ble.n	8006894 <_dtoa_r+0xa8c>
 8006884:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006888:	d0ed      	beq.n	8006866 <_dtoa_r+0xa5e>
 800688a:	9a02      	ldr	r2, [sp, #8]
 800688c:	f108 0301 	add.w	r3, r8, #1
 8006890:	7013      	strb	r3, [r2, #0]
 8006892:	e604      	b.n	800649e <_dtoa_r+0x696>
 8006894:	9b07      	ldr	r3, [sp, #28]
 8006896:	9a07      	ldr	r2, [sp, #28]
 8006898:	f803 8c01 	strb.w	r8, [r3, #-1]
 800689c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800689e:	4293      	cmp	r3, r2
 80068a0:	d028      	beq.n	80068f4 <_dtoa_r+0xaec>
 80068a2:	4649      	mov	r1, r9
 80068a4:	2300      	movs	r3, #0
 80068a6:	220a      	movs	r2, #10
 80068a8:	4658      	mov	r0, fp
 80068aa:	f000 f9d5 	bl	8006c58 <__multadd>
 80068ae:	42af      	cmp	r7, r5
 80068b0:	4681      	mov	r9, r0
 80068b2:	f04f 0300 	mov.w	r3, #0
 80068b6:	f04f 020a 	mov.w	r2, #10
 80068ba:	4639      	mov	r1, r7
 80068bc:	4658      	mov	r0, fp
 80068be:	d107      	bne.n	80068d0 <_dtoa_r+0xac8>
 80068c0:	f000 f9ca 	bl	8006c58 <__multadd>
 80068c4:	4607      	mov	r7, r0
 80068c6:	4605      	mov	r5, r0
 80068c8:	9b07      	ldr	r3, [sp, #28]
 80068ca:	3301      	adds	r3, #1
 80068cc:	9307      	str	r3, [sp, #28]
 80068ce:	e774      	b.n	80067ba <_dtoa_r+0x9b2>
 80068d0:	f000 f9c2 	bl	8006c58 <__multadd>
 80068d4:	4629      	mov	r1, r5
 80068d6:	4607      	mov	r7, r0
 80068d8:	2300      	movs	r3, #0
 80068da:	220a      	movs	r2, #10
 80068dc:	4658      	mov	r0, fp
 80068de:	f000 f9bb 	bl	8006c58 <__multadd>
 80068e2:	4605      	mov	r5, r0
 80068e4:	e7f0      	b.n	80068c8 <_dtoa_r+0xac0>
 80068e6:	9b08      	ldr	r3, [sp, #32]
 80068e8:	2700      	movs	r7, #0
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	bfcc      	ite	gt
 80068ee:	461e      	movgt	r6, r3
 80068f0:	2601      	movle	r6, #1
 80068f2:	4456      	add	r6, sl
 80068f4:	4649      	mov	r1, r9
 80068f6:	2201      	movs	r2, #1
 80068f8:	4658      	mov	r0, fp
 80068fa:	f000 fba1 	bl	8007040 <__lshift>
 80068fe:	4621      	mov	r1, r4
 8006900:	4681      	mov	r9, r0
 8006902:	f000 fc09 	bl	8007118 <__mcmp>
 8006906:	2800      	cmp	r0, #0
 8006908:	dcb0      	bgt.n	800686c <_dtoa_r+0xa64>
 800690a:	d102      	bne.n	8006912 <_dtoa_r+0xb0a>
 800690c:	f018 0f01 	tst.w	r8, #1
 8006910:	d1ac      	bne.n	800686c <_dtoa_r+0xa64>
 8006912:	4633      	mov	r3, r6
 8006914:	461e      	mov	r6, r3
 8006916:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800691a:	2a30      	cmp	r2, #48	@ 0x30
 800691c:	d0fa      	beq.n	8006914 <_dtoa_r+0xb0c>
 800691e:	e5be      	b.n	800649e <_dtoa_r+0x696>
 8006920:	459a      	cmp	sl, r3
 8006922:	d1a4      	bne.n	800686e <_dtoa_r+0xa66>
 8006924:	9b04      	ldr	r3, [sp, #16]
 8006926:	3301      	adds	r3, #1
 8006928:	9304      	str	r3, [sp, #16]
 800692a:	2331      	movs	r3, #49	@ 0x31
 800692c:	f88a 3000 	strb.w	r3, [sl]
 8006930:	e5b5      	b.n	800649e <_dtoa_r+0x696>
 8006932:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006934:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8006994 <_dtoa_r+0xb8c>
 8006938:	b11b      	cbz	r3, 8006942 <_dtoa_r+0xb3a>
 800693a:	f10a 0308 	add.w	r3, sl, #8
 800693e:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8006940:	6013      	str	r3, [r2, #0]
 8006942:	4650      	mov	r0, sl
 8006944:	b017      	add	sp, #92	@ 0x5c
 8006946:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800694a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800694c:	2b01      	cmp	r3, #1
 800694e:	f77f ae3d 	ble.w	80065cc <_dtoa_r+0x7c4>
 8006952:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006954:	930a      	str	r3, [sp, #40]	@ 0x28
 8006956:	2001      	movs	r0, #1
 8006958:	e65b      	b.n	8006612 <_dtoa_r+0x80a>
 800695a:	9b08      	ldr	r3, [sp, #32]
 800695c:	2b00      	cmp	r3, #0
 800695e:	f77f aed6 	ble.w	800670e <_dtoa_r+0x906>
 8006962:	4656      	mov	r6, sl
 8006964:	4621      	mov	r1, r4
 8006966:	4648      	mov	r0, r9
 8006968:	f7ff f9c4 	bl	8005cf4 <quorem>
 800696c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006970:	9b08      	ldr	r3, [sp, #32]
 8006972:	f806 8b01 	strb.w	r8, [r6], #1
 8006976:	eba6 020a 	sub.w	r2, r6, sl
 800697a:	4293      	cmp	r3, r2
 800697c:	ddb3      	ble.n	80068e6 <_dtoa_r+0xade>
 800697e:	4649      	mov	r1, r9
 8006980:	2300      	movs	r3, #0
 8006982:	220a      	movs	r2, #10
 8006984:	4658      	mov	r0, fp
 8006986:	f000 f967 	bl	8006c58 <__multadd>
 800698a:	4681      	mov	r9, r0
 800698c:	e7ea      	b.n	8006964 <_dtoa_r+0xb5c>
 800698e:	bf00      	nop
 8006990:	080094eb 	.word	0x080094eb
 8006994:	0800946f 	.word	0x0800946f

08006998 <_free_r>:
 8006998:	b538      	push	{r3, r4, r5, lr}
 800699a:	4605      	mov	r5, r0
 800699c:	2900      	cmp	r1, #0
 800699e:	d040      	beq.n	8006a22 <_free_r+0x8a>
 80069a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80069a4:	1f0c      	subs	r4, r1, #4
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	bfb8      	it	lt
 80069aa:	18e4      	addlt	r4, r4, r3
 80069ac:	f000 f8e6 	bl	8006b7c <__malloc_lock>
 80069b0:	4a1c      	ldr	r2, [pc, #112]	@ (8006a24 <_free_r+0x8c>)
 80069b2:	6813      	ldr	r3, [r2, #0]
 80069b4:	b933      	cbnz	r3, 80069c4 <_free_r+0x2c>
 80069b6:	6063      	str	r3, [r4, #4]
 80069b8:	6014      	str	r4, [r2, #0]
 80069ba:	4628      	mov	r0, r5
 80069bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80069c0:	f000 b8e2 	b.w	8006b88 <__malloc_unlock>
 80069c4:	42a3      	cmp	r3, r4
 80069c6:	d908      	bls.n	80069da <_free_r+0x42>
 80069c8:	6820      	ldr	r0, [r4, #0]
 80069ca:	1821      	adds	r1, r4, r0
 80069cc:	428b      	cmp	r3, r1
 80069ce:	bf01      	itttt	eq
 80069d0:	6819      	ldreq	r1, [r3, #0]
 80069d2:	685b      	ldreq	r3, [r3, #4]
 80069d4:	1809      	addeq	r1, r1, r0
 80069d6:	6021      	streq	r1, [r4, #0]
 80069d8:	e7ed      	b.n	80069b6 <_free_r+0x1e>
 80069da:	461a      	mov	r2, r3
 80069dc:	685b      	ldr	r3, [r3, #4]
 80069de:	b10b      	cbz	r3, 80069e4 <_free_r+0x4c>
 80069e0:	42a3      	cmp	r3, r4
 80069e2:	d9fa      	bls.n	80069da <_free_r+0x42>
 80069e4:	6811      	ldr	r1, [r2, #0]
 80069e6:	1850      	adds	r0, r2, r1
 80069e8:	42a0      	cmp	r0, r4
 80069ea:	d10b      	bne.n	8006a04 <_free_r+0x6c>
 80069ec:	6820      	ldr	r0, [r4, #0]
 80069ee:	4401      	add	r1, r0
 80069f0:	1850      	adds	r0, r2, r1
 80069f2:	4283      	cmp	r3, r0
 80069f4:	6011      	str	r1, [r2, #0]
 80069f6:	d1e0      	bne.n	80069ba <_free_r+0x22>
 80069f8:	6818      	ldr	r0, [r3, #0]
 80069fa:	685b      	ldr	r3, [r3, #4]
 80069fc:	4408      	add	r0, r1
 80069fe:	6010      	str	r0, [r2, #0]
 8006a00:	6053      	str	r3, [r2, #4]
 8006a02:	e7da      	b.n	80069ba <_free_r+0x22>
 8006a04:	d902      	bls.n	8006a0c <_free_r+0x74>
 8006a06:	230c      	movs	r3, #12
 8006a08:	602b      	str	r3, [r5, #0]
 8006a0a:	e7d6      	b.n	80069ba <_free_r+0x22>
 8006a0c:	6820      	ldr	r0, [r4, #0]
 8006a0e:	1821      	adds	r1, r4, r0
 8006a10:	428b      	cmp	r3, r1
 8006a12:	bf01      	itttt	eq
 8006a14:	6819      	ldreq	r1, [r3, #0]
 8006a16:	685b      	ldreq	r3, [r3, #4]
 8006a18:	1809      	addeq	r1, r1, r0
 8006a1a:	6021      	streq	r1, [r4, #0]
 8006a1c:	6063      	str	r3, [r4, #4]
 8006a1e:	6054      	str	r4, [r2, #4]
 8006a20:	e7cb      	b.n	80069ba <_free_r+0x22>
 8006a22:	bd38      	pop	{r3, r4, r5, pc}
 8006a24:	20000408 	.word	0x20000408

08006a28 <malloc>:
 8006a28:	4b02      	ldr	r3, [pc, #8]	@ (8006a34 <malloc+0xc>)
 8006a2a:	4601      	mov	r1, r0
 8006a2c:	6818      	ldr	r0, [r3, #0]
 8006a2e:	f000 b825 	b.w	8006a7c <_malloc_r>
 8006a32:	bf00      	nop
 8006a34:	20000020 	.word	0x20000020

08006a38 <sbrk_aligned>:
 8006a38:	b570      	push	{r4, r5, r6, lr}
 8006a3a:	4e0f      	ldr	r6, [pc, #60]	@ (8006a78 <sbrk_aligned+0x40>)
 8006a3c:	460c      	mov	r4, r1
 8006a3e:	6831      	ldr	r1, [r6, #0]
 8006a40:	4605      	mov	r5, r0
 8006a42:	b911      	cbnz	r1, 8006a4a <sbrk_aligned+0x12>
 8006a44:	f001 fdf6 	bl	8008634 <_sbrk_r>
 8006a48:	6030      	str	r0, [r6, #0]
 8006a4a:	4621      	mov	r1, r4
 8006a4c:	4628      	mov	r0, r5
 8006a4e:	f001 fdf1 	bl	8008634 <_sbrk_r>
 8006a52:	1c43      	adds	r3, r0, #1
 8006a54:	d103      	bne.n	8006a5e <sbrk_aligned+0x26>
 8006a56:	f04f 34ff 	mov.w	r4, #4294967295
 8006a5a:	4620      	mov	r0, r4
 8006a5c:	bd70      	pop	{r4, r5, r6, pc}
 8006a5e:	1cc4      	adds	r4, r0, #3
 8006a60:	f024 0403 	bic.w	r4, r4, #3
 8006a64:	42a0      	cmp	r0, r4
 8006a66:	d0f8      	beq.n	8006a5a <sbrk_aligned+0x22>
 8006a68:	1a21      	subs	r1, r4, r0
 8006a6a:	4628      	mov	r0, r5
 8006a6c:	f001 fde2 	bl	8008634 <_sbrk_r>
 8006a70:	3001      	adds	r0, #1
 8006a72:	d1f2      	bne.n	8006a5a <sbrk_aligned+0x22>
 8006a74:	e7ef      	b.n	8006a56 <sbrk_aligned+0x1e>
 8006a76:	bf00      	nop
 8006a78:	20000404 	.word	0x20000404

08006a7c <_malloc_r>:
 8006a7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006a80:	1ccd      	adds	r5, r1, #3
 8006a82:	f025 0503 	bic.w	r5, r5, #3
 8006a86:	3508      	adds	r5, #8
 8006a88:	2d0c      	cmp	r5, #12
 8006a8a:	bf38      	it	cc
 8006a8c:	250c      	movcc	r5, #12
 8006a8e:	2d00      	cmp	r5, #0
 8006a90:	4606      	mov	r6, r0
 8006a92:	db01      	blt.n	8006a98 <_malloc_r+0x1c>
 8006a94:	42a9      	cmp	r1, r5
 8006a96:	d904      	bls.n	8006aa2 <_malloc_r+0x26>
 8006a98:	230c      	movs	r3, #12
 8006a9a:	6033      	str	r3, [r6, #0]
 8006a9c:	2000      	movs	r0, #0
 8006a9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006aa2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006b78 <_malloc_r+0xfc>
 8006aa6:	f000 f869 	bl	8006b7c <__malloc_lock>
 8006aaa:	f8d8 3000 	ldr.w	r3, [r8]
 8006aae:	461c      	mov	r4, r3
 8006ab0:	bb44      	cbnz	r4, 8006b04 <_malloc_r+0x88>
 8006ab2:	4629      	mov	r1, r5
 8006ab4:	4630      	mov	r0, r6
 8006ab6:	f7ff ffbf 	bl	8006a38 <sbrk_aligned>
 8006aba:	1c43      	adds	r3, r0, #1
 8006abc:	4604      	mov	r4, r0
 8006abe:	d158      	bne.n	8006b72 <_malloc_r+0xf6>
 8006ac0:	f8d8 4000 	ldr.w	r4, [r8]
 8006ac4:	4627      	mov	r7, r4
 8006ac6:	2f00      	cmp	r7, #0
 8006ac8:	d143      	bne.n	8006b52 <_malloc_r+0xd6>
 8006aca:	2c00      	cmp	r4, #0
 8006acc:	d04b      	beq.n	8006b66 <_malloc_r+0xea>
 8006ace:	6823      	ldr	r3, [r4, #0]
 8006ad0:	4639      	mov	r1, r7
 8006ad2:	4630      	mov	r0, r6
 8006ad4:	eb04 0903 	add.w	r9, r4, r3
 8006ad8:	f001 fdac 	bl	8008634 <_sbrk_r>
 8006adc:	4581      	cmp	r9, r0
 8006ade:	d142      	bne.n	8006b66 <_malloc_r+0xea>
 8006ae0:	6821      	ldr	r1, [r4, #0]
 8006ae2:	4630      	mov	r0, r6
 8006ae4:	1a6d      	subs	r5, r5, r1
 8006ae6:	4629      	mov	r1, r5
 8006ae8:	f7ff ffa6 	bl	8006a38 <sbrk_aligned>
 8006aec:	3001      	adds	r0, #1
 8006aee:	d03a      	beq.n	8006b66 <_malloc_r+0xea>
 8006af0:	6823      	ldr	r3, [r4, #0]
 8006af2:	442b      	add	r3, r5
 8006af4:	6023      	str	r3, [r4, #0]
 8006af6:	f8d8 3000 	ldr.w	r3, [r8]
 8006afa:	685a      	ldr	r2, [r3, #4]
 8006afc:	bb62      	cbnz	r2, 8006b58 <_malloc_r+0xdc>
 8006afe:	f8c8 7000 	str.w	r7, [r8]
 8006b02:	e00f      	b.n	8006b24 <_malloc_r+0xa8>
 8006b04:	6822      	ldr	r2, [r4, #0]
 8006b06:	1b52      	subs	r2, r2, r5
 8006b08:	d420      	bmi.n	8006b4c <_malloc_r+0xd0>
 8006b0a:	2a0b      	cmp	r2, #11
 8006b0c:	d917      	bls.n	8006b3e <_malloc_r+0xc2>
 8006b0e:	1961      	adds	r1, r4, r5
 8006b10:	42a3      	cmp	r3, r4
 8006b12:	6025      	str	r5, [r4, #0]
 8006b14:	bf18      	it	ne
 8006b16:	6059      	strne	r1, [r3, #4]
 8006b18:	6863      	ldr	r3, [r4, #4]
 8006b1a:	bf08      	it	eq
 8006b1c:	f8c8 1000 	streq.w	r1, [r8]
 8006b20:	5162      	str	r2, [r4, r5]
 8006b22:	604b      	str	r3, [r1, #4]
 8006b24:	4630      	mov	r0, r6
 8006b26:	f000 f82f 	bl	8006b88 <__malloc_unlock>
 8006b2a:	f104 000b 	add.w	r0, r4, #11
 8006b2e:	1d23      	adds	r3, r4, #4
 8006b30:	f020 0007 	bic.w	r0, r0, #7
 8006b34:	1ac2      	subs	r2, r0, r3
 8006b36:	bf1c      	itt	ne
 8006b38:	1a1b      	subne	r3, r3, r0
 8006b3a:	50a3      	strne	r3, [r4, r2]
 8006b3c:	e7af      	b.n	8006a9e <_malloc_r+0x22>
 8006b3e:	6862      	ldr	r2, [r4, #4]
 8006b40:	42a3      	cmp	r3, r4
 8006b42:	bf0c      	ite	eq
 8006b44:	f8c8 2000 	streq.w	r2, [r8]
 8006b48:	605a      	strne	r2, [r3, #4]
 8006b4a:	e7eb      	b.n	8006b24 <_malloc_r+0xa8>
 8006b4c:	4623      	mov	r3, r4
 8006b4e:	6864      	ldr	r4, [r4, #4]
 8006b50:	e7ae      	b.n	8006ab0 <_malloc_r+0x34>
 8006b52:	463c      	mov	r4, r7
 8006b54:	687f      	ldr	r7, [r7, #4]
 8006b56:	e7b6      	b.n	8006ac6 <_malloc_r+0x4a>
 8006b58:	461a      	mov	r2, r3
 8006b5a:	685b      	ldr	r3, [r3, #4]
 8006b5c:	42a3      	cmp	r3, r4
 8006b5e:	d1fb      	bne.n	8006b58 <_malloc_r+0xdc>
 8006b60:	2300      	movs	r3, #0
 8006b62:	6053      	str	r3, [r2, #4]
 8006b64:	e7de      	b.n	8006b24 <_malloc_r+0xa8>
 8006b66:	230c      	movs	r3, #12
 8006b68:	4630      	mov	r0, r6
 8006b6a:	6033      	str	r3, [r6, #0]
 8006b6c:	f000 f80c 	bl	8006b88 <__malloc_unlock>
 8006b70:	e794      	b.n	8006a9c <_malloc_r+0x20>
 8006b72:	6005      	str	r5, [r0, #0]
 8006b74:	e7d6      	b.n	8006b24 <_malloc_r+0xa8>
 8006b76:	bf00      	nop
 8006b78:	20000408 	.word	0x20000408

08006b7c <__malloc_lock>:
 8006b7c:	4801      	ldr	r0, [pc, #4]	@ (8006b84 <__malloc_lock+0x8>)
 8006b7e:	f7ff b8a4 	b.w	8005cca <__retarget_lock_acquire_recursive>
 8006b82:	bf00      	nop
 8006b84:	20000400 	.word	0x20000400

08006b88 <__malloc_unlock>:
 8006b88:	4801      	ldr	r0, [pc, #4]	@ (8006b90 <__malloc_unlock+0x8>)
 8006b8a:	f7ff b89f 	b.w	8005ccc <__retarget_lock_release_recursive>
 8006b8e:	bf00      	nop
 8006b90:	20000400 	.word	0x20000400

08006b94 <_Balloc>:
 8006b94:	b570      	push	{r4, r5, r6, lr}
 8006b96:	69c6      	ldr	r6, [r0, #28]
 8006b98:	4604      	mov	r4, r0
 8006b9a:	460d      	mov	r5, r1
 8006b9c:	b976      	cbnz	r6, 8006bbc <_Balloc+0x28>
 8006b9e:	2010      	movs	r0, #16
 8006ba0:	f7ff ff42 	bl	8006a28 <malloc>
 8006ba4:	4602      	mov	r2, r0
 8006ba6:	61e0      	str	r0, [r4, #28]
 8006ba8:	b920      	cbnz	r0, 8006bb4 <_Balloc+0x20>
 8006baa:	216b      	movs	r1, #107	@ 0x6b
 8006bac:	4b17      	ldr	r3, [pc, #92]	@ (8006c0c <_Balloc+0x78>)
 8006bae:	4818      	ldr	r0, [pc, #96]	@ (8006c10 <_Balloc+0x7c>)
 8006bb0:	f001 fd64 	bl	800867c <__assert_func>
 8006bb4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006bb8:	6006      	str	r6, [r0, #0]
 8006bba:	60c6      	str	r6, [r0, #12]
 8006bbc:	69e6      	ldr	r6, [r4, #28]
 8006bbe:	68f3      	ldr	r3, [r6, #12]
 8006bc0:	b183      	cbz	r3, 8006be4 <_Balloc+0x50>
 8006bc2:	69e3      	ldr	r3, [r4, #28]
 8006bc4:	68db      	ldr	r3, [r3, #12]
 8006bc6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006bca:	b9b8      	cbnz	r0, 8006bfc <_Balloc+0x68>
 8006bcc:	2101      	movs	r1, #1
 8006bce:	fa01 f605 	lsl.w	r6, r1, r5
 8006bd2:	1d72      	adds	r2, r6, #5
 8006bd4:	4620      	mov	r0, r4
 8006bd6:	0092      	lsls	r2, r2, #2
 8006bd8:	f001 fd6e 	bl	80086b8 <_calloc_r>
 8006bdc:	b160      	cbz	r0, 8006bf8 <_Balloc+0x64>
 8006bde:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006be2:	e00e      	b.n	8006c02 <_Balloc+0x6e>
 8006be4:	2221      	movs	r2, #33	@ 0x21
 8006be6:	2104      	movs	r1, #4
 8006be8:	4620      	mov	r0, r4
 8006bea:	f001 fd65 	bl	80086b8 <_calloc_r>
 8006bee:	69e3      	ldr	r3, [r4, #28]
 8006bf0:	60f0      	str	r0, [r6, #12]
 8006bf2:	68db      	ldr	r3, [r3, #12]
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d1e4      	bne.n	8006bc2 <_Balloc+0x2e>
 8006bf8:	2000      	movs	r0, #0
 8006bfa:	bd70      	pop	{r4, r5, r6, pc}
 8006bfc:	6802      	ldr	r2, [r0, #0]
 8006bfe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006c02:	2300      	movs	r3, #0
 8006c04:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006c08:	e7f7      	b.n	8006bfa <_Balloc+0x66>
 8006c0a:	bf00      	nop
 8006c0c:	0800947c 	.word	0x0800947c
 8006c10:	080094fc 	.word	0x080094fc

08006c14 <_Bfree>:
 8006c14:	b570      	push	{r4, r5, r6, lr}
 8006c16:	69c6      	ldr	r6, [r0, #28]
 8006c18:	4605      	mov	r5, r0
 8006c1a:	460c      	mov	r4, r1
 8006c1c:	b976      	cbnz	r6, 8006c3c <_Bfree+0x28>
 8006c1e:	2010      	movs	r0, #16
 8006c20:	f7ff ff02 	bl	8006a28 <malloc>
 8006c24:	4602      	mov	r2, r0
 8006c26:	61e8      	str	r0, [r5, #28]
 8006c28:	b920      	cbnz	r0, 8006c34 <_Bfree+0x20>
 8006c2a:	218f      	movs	r1, #143	@ 0x8f
 8006c2c:	4b08      	ldr	r3, [pc, #32]	@ (8006c50 <_Bfree+0x3c>)
 8006c2e:	4809      	ldr	r0, [pc, #36]	@ (8006c54 <_Bfree+0x40>)
 8006c30:	f001 fd24 	bl	800867c <__assert_func>
 8006c34:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006c38:	6006      	str	r6, [r0, #0]
 8006c3a:	60c6      	str	r6, [r0, #12]
 8006c3c:	b13c      	cbz	r4, 8006c4e <_Bfree+0x3a>
 8006c3e:	69eb      	ldr	r3, [r5, #28]
 8006c40:	6862      	ldr	r2, [r4, #4]
 8006c42:	68db      	ldr	r3, [r3, #12]
 8006c44:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006c48:	6021      	str	r1, [r4, #0]
 8006c4a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006c4e:	bd70      	pop	{r4, r5, r6, pc}
 8006c50:	0800947c 	.word	0x0800947c
 8006c54:	080094fc 	.word	0x080094fc

08006c58 <__multadd>:
 8006c58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c5c:	4607      	mov	r7, r0
 8006c5e:	460c      	mov	r4, r1
 8006c60:	461e      	mov	r6, r3
 8006c62:	2000      	movs	r0, #0
 8006c64:	690d      	ldr	r5, [r1, #16]
 8006c66:	f101 0c14 	add.w	ip, r1, #20
 8006c6a:	f8dc 3000 	ldr.w	r3, [ip]
 8006c6e:	3001      	adds	r0, #1
 8006c70:	b299      	uxth	r1, r3
 8006c72:	fb02 6101 	mla	r1, r2, r1, r6
 8006c76:	0c1e      	lsrs	r6, r3, #16
 8006c78:	0c0b      	lsrs	r3, r1, #16
 8006c7a:	fb02 3306 	mla	r3, r2, r6, r3
 8006c7e:	b289      	uxth	r1, r1
 8006c80:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006c84:	4285      	cmp	r5, r0
 8006c86:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006c8a:	f84c 1b04 	str.w	r1, [ip], #4
 8006c8e:	dcec      	bgt.n	8006c6a <__multadd+0x12>
 8006c90:	b30e      	cbz	r6, 8006cd6 <__multadd+0x7e>
 8006c92:	68a3      	ldr	r3, [r4, #8]
 8006c94:	42ab      	cmp	r3, r5
 8006c96:	dc19      	bgt.n	8006ccc <__multadd+0x74>
 8006c98:	6861      	ldr	r1, [r4, #4]
 8006c9a:	4638      	mov	r0, r7
 8006c9c:	3101      	adds	r1, #1
 8006c9e:	f7ff ff79 	bl	8006b94 <_Balloc>
 8006ca2:	4680      	mov	r8, r0
 8006ca4:	b928      	cbnz	r0, 8006cb2 <__multadd+0x5a>
 8006ca6:	4602      	mov	r2, r0
 8006ca8:	21ba      	movs	r1, #186	@ 0xba
 8006caa:	4b0c      	ldr	r3, [pc, #48]	@ (8006cdc <__multadd+0x84>)
 8006cac:	480c      	ldr	r0, [pc, #48]	@ (8006ce0 <__multadd+0x88>)
 8006cae:	f001 fce5 	bl	800867c <__assert_func>
 8006cb2:	6922      	ldr	r2, [r4, #16]
 8006cb4:	f104 010c 	add.w	r1, r4, #12
 8006cb8:	3202      	adds	r2, #2
 8006cba:	0092      	lsls	r2, r2, #2
 8006cbc:	300c      	adds	r0, #12
 8006cbe:	f001 fcc9 	bl	8008654 <memcpy>
 8006cc2:	4621      	mov	r1, r4
 8006cc4:	4638      	mov	r0, r7
 8006cc6:	f7ff ffa5 	bl	8006c14 <_Bfree>
 8006cca:	4644      	mov	r4, r8
 8006ccc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006cd0:	3501      	adds	r5, #1
 8006cd2:	615e      	str	r6, [r3, #20]
 8006cd4:	6125      	str	r5, [r4, #16]
 8006cd6:	4620      	mov	r0, r4
 8006cd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006cdc:	080094eb 	.word	0x080094eb
 8006ce0:	080094fc 	.word	0x080094fc

08006ce4 <__s2b>:
 8006ce4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006ce8:	4615      	mov	r5, r2
 8006cea:	2209      	movs	r2, #9
 8006cec:	461f      	mov	r7, r3
 8006cee:	3308      	adds	r3, #8
 8006cf0:	460c      	mov	r4, r1
 8006cf2:	fb93 f3f2 	sdiv	r3, r3, r2
 8006cf6:	4606      	mov	r6, r0
 8006cf8:	2201      	movs	r2, #1
 8006cfa:	2100      	movs	r1, #0
 8006cfc:	429a      	cmp	r2, r3
 8006cfe:	db09      	blt.n	8006d14 <__s2b+0x30>
 8006d00:	4630      	mov	r0, r6
 8006d02:	f7ff ff47 	bl	8006b94 <_Balloc>
 8006d06:	b940      	cbnz	r0, 8006d1a <__s2b+0x36>
 8006d08:	4602      	mov	r2, r0
 8006d0a:	21d3      	movs	r1, #211	@ 0xd3
 8006d0c:	4b18      	ldr	r3, [pc, #96]	@ (8006d70 <__s2b+0x8c>)
 8006d0e:	4819      	ldr	r0, [pc, #100]	@ (8006d74 <__s2b+0x90>)
 8006d10:	f001 fcb4 	bl	800867c <__assert_func>
 8006d14:	0052      	lsls	r2, r2, #1
 8006d16:	3101      	adds	r1, #1
 8006d18:	e7f0      	b.n	8006cfc <__s2b+0x18>
 8006d1a:	9b08      	ldr	r3, [sp, #32]
 8006d1c:	2d09      	cmp	r5, #9
 8006d1e:	6143      	str	r3, [r0, #20]
 8006d20:	f04f 0301 	mov.w	r3, #1
 8006d24:	6103      	str	r3, [r0, #16]
 8006d26:	dd16      	ble.n	8006d56 <__s2b+0x72>
 8006d28:	f104 0909 	add.w	r9, r4, #9
 8006d2c:	46c8      	mov	r8, r9
 8006d2e:	442c      	add	r4, r5
 8006d30:	f818 3b01 	ldrb.w	r3, [r8], #1
 8006d34:	4601      	mov	r1, r0
 8006d36:	220a      	movs	r2, #10
 8006d38:	4630      	mov	r0, r6
 8006d3a:	3b30      	subs	r3, #48	@ 0x30
 8006d3c:	f7ff ff8c 	bl	8006c58 <__multadd>
 8006d40:	45a0      	cmp	r8, r4
 8006d42:	d1f5      	bne.n	8006d30 <__s2b+0x4c>
 8006d44:	f1a5 0408 	sub.w	r4, r5, #8
 8006d48:	444c      	add	r4, r9
 8006d4a:	1b2d      	subs	r5, r5, r4
 8006d4c:	1963      	adds	r3, r4, r5
 8006d4e:	42bb      	cmp	r3, r7
 8006d50:	db04      	blt.n	8006d5c <__s2b+0x78>
 8006d52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006d56:	2509      	movs	r5, #9
 8006d58:	340a      	adds	r4, #10
 8006d5a:	e7f6      	b.n	8006d4a <__s2b+0x66>
 8006d5c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006d60:	4601      	mov	r1, r0
 8006d62:	220a      	movs	r2, #10
 8006d64:	4630      	mov	r0, r6
 8006d66:	3b30      	subs	r3, #48	@ 0x30
 8006d68:	f7ff ff76 	bl	8006c58 <__multadd>
 8006d6c:	e7ee      	b.n	8006d4c <__s2b+0x68>
 8006d6e:	bf00      	nop
 8006d70:	080094eb 	.word	0x080094eb
 8006d74:	080094fc 	.word	0x080094fc

08006d78 <__hi0bits>:
 8006d78:	4603      	mov	r3, r0
 8006d7a:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8006d7e:	bf3a      	itte	cc
 8006d80:	0403      	lslcc	r3, r0, #16
 8006d82:	2010      	movcc	r0, #16
 8006d84:	2000      	movcs	r0, #0
 8006d86:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006d8a:	bf3c      	itt	cc
 8006d8c:	021b      	lslcc	r3, r3, #8
 8006d8e:	3008      	addcc	r0, #8
 8006d90:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006d94:	bf3c      	itt	cc
 8006d96:	011b      	lslcc	r3, r3, #4
 8006d98:	3004      	addcc	r0, #4
 8006d9a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006d9e:	bf3c      	itt	cc
 8006da0:	009b      	lslcc	r3, r3, #2
 8006da2:	3002      	addcc	r0, #2
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	db05      	blt.n	8006db4 <__hi0bits+0x3c>
 8006da8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8006dac:	f100 0001 	add.w	r0, r0, #1
 8006db0:	bf08      	it	eq
 8006db2:	2020      	moveq	r0, #32
 8006db4:	4770      	bx	lr

08006db6 <__lo0bits>:
 8006db6:	6803      	ldr	r3, [r0, #0]
 8006db8:	4602      	mov	r2, r0
 8006dba:	f013 0007 	ands.w	r0, r3, #7
 8006dbe:	d00b      	beq.n	8006dd8 <__lo0bits+0x22>
 8006dc0:	07d9      	lsls	r1, r3, #31
 8006dc2:	d421      	bmi.n	8006e08 <__lo0bits+0x52>
 8006dc4:	0798      	lsls	r0, r3, #30
 8006dc6:	bf49      	itett	mi
 8006dc8:	085b      	lsrmi	r3, r3, #1
 8006dca:	089b      	lsrpl	r3, r3, #2
 8006dcc:	2001      	movmi	r0, #1
 8006dce:	6013      	strmi	r3, [r2, #0]
 8006dd0:	bf5c      	itt	pl
 8006dd2:	2002      	movpl	r0, #2
 8006dd4:	6013      	strpl	r3, [r2, #0]
 8006dd6:	4770      	bx	lr
 8006dd8:	b299      	uxth	r1, r3
 8006dda:	b909      	cbnz	r1, 8006de0 <__lo0bits+0x2a>
 8006ddc:	2010      	movs	r0, #16
 8006dde:	0c1b      	lsrs	r3, r3, #16
 8006de0:	b2d9      	uxtb	r1, r3
 8006de2:	b909      	cbnz	r1, 8006de8 <__lo0bits+0x32>
 8006de4:	3008      	adds	r0, #8
 8006de6:	0a1b      	lsrs	r3, r3, #8
 8006de8:	0719      	lsls	r1, r3, #28
 8006dea:	bf04      	itt	eq
 8006dec:	091b      	lsreq	r3, r3, #4
 8006dee:	3004      	addeq	r0, #4
 8006df0:	0799      	lsls	r1, r3, #30
 8006df2:	bf04      	itt	eq
 8006df4:	089b      	lsreq	r3, r3, #2
 8006df6:	3002      	addeq	r0, #2
 8006df8:	07d9      	lsls	r1, r3, #31
 8006dfa:	d403      	bmi.n	8006e04 <__lo0bits+0x4e>
 8006dfc:	085b      	lsrs	r3, r3, #1
 8006dfe:	f100 0001 	add.w	r0, r0, #1
 8006e02:	d003      	beq.n	8006e0c <__lo0bits+0x56>
 8006e04:	6013      	str	r3, [r2, #0]
 8006e06:	4770      	bx	lr
 8006e08:	2000      	movs	r0, #0
 8006e0a:	4770      	bx	lr
 8006e0c:	2020      	movs	r0, #32
 8006e0e:	4770      	bx	lr

08006e10 <__i2b>:
 8006e10:	b510      	push	{r4, lr}
 8006e12:	460c      	mov	r4, r1
 8006e14:	2101      	movs	r1, #1
 8006e16:	f7ff febd 	bl	8006b94 <_Balloc>
 8006e1a:	4602      	mov	r2, r0
 8006e1c:	b928      	cbnz	r0, 8006e2a <__i2b+0x1a>
 8006e1e:	f240 1145 	movw	r1, #325	@ 0x145
 8006e22:	4b04      	ldr	r3, [pc, #16]	@ (8006e34 <__i2b+0x24>)
 8006e24:	4804      	ldr	r0, [pc, #16]	@ (8006e38 <__i2b+0x28>)
 8006e26:	f001 fc29 	bl	800867c <__assert_func>
 8006e2a:	2301      	movs	r3, #1
 8006e2c:	6144      	str	r4, [r0, #20]
 8006e2e:	6103      	str	r3, [r0, #16]
 8006e30:	bd10      	pop	{r4, pc}
 8006e32:	bf00      	nop
 8006e34:	080094eb 	.word	0x080094eb
 8006e38:	080094fc 	.word	0x080094fc

08006e3c <__multiply>:
 8006e3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e40:	4614      	mov	r4, r2
 8006e42:	690a      	ldr	r2, [r1, #16]
 8006e44:	6923      	ldr	r3, [r4, #16]
 8006e46:	460f      	mov	r7, r1
 8006e48:	429a      	cmp	r2, r3
 8006e4a:	bfa2      	ittt	ge
 8006e4c:	4623      	movge	r3, r4
 8006e4e:	460c      	movge	r4, r1
 8006e50:	461f      	movge	r7, r3
 8006e52:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8006e56:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8006e5a:	68a3      	ldr	r3, [r4, #8]
 8006e5c:	6861      	ldr	r1, [r4, #4]
 8006e5e:	eb0a 0609 	add.w	r6, sl, r9
 8006e62:	42b3      	cmp	r3, r6
 8006e64:	b085      	sub	sp, #20
 8006e66:	bfb8      	it	lt
 8006e68:	3101      	addlt	r1, #1
 8006e6a:	f7ff fe93 	bl	8006b94 <_Balloc>
 8006e6e:	b930      	cbnz	r0, 8006e7e <__multiply+0x42>
 8006e70:	4602      	mov	r2, r0
 8006e72:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8006e76:	4b43      	ldr	r3, [pc, #268]	@ (8006f84 <__multiply+0x148>)
 8006e78:	4843      	ldr	r0, [pc, #268]	@ (8006f88 <__multiply+0x14c>)
 8006e7a:	f001 fbff 	bl	800867c <__assert_func>
 8006e7e:	f100 0514 	add.w	r5, r0, #20
 8006e82:	462b      	mov	r3, r5
 8006e84:	2200      	movs	r2, #0
 8006e86:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006e8a:	4543      	cmp	r3, r8
 8006e8c:	d321      	bcc.n	8006ed2 <__multiply+0x96>
 8006e8e:	f107 0114 	add.w	r1, r7, #20
 8006e92:	f104 0214 	add.w	r2, r4, #20
 8006e96:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8006e9a:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8006e9e:	9302      	str	r3, [sp, #8]
 8006ea0:	1b13      	subs	r3, r2, r4
 8006ea2:	3b15      	subs	r3, #21
 8006ea4:	f023 0303 	bic.w	r3, r3, #3
 8006ea8:	3304      	adds	r3, #4
 8006eaa:	f104 0715 	add.w	r7, r4, #21
 8006eae:	42ba      	cmp	r2, r7
 8006eb0:	bf38      	it	cc
 8006eb2:	2304      	movcc	r3, #4
 8006eb4:	9301      	str	r3, [sp, #4]
 8006eb6:	9b02      	ldr	r3, [sp, #8]
 8006eb8:	9103      	str	r1, [sp, #12]
 8006eba:	428b      	cmp	r3, r1
 8006ebc:	d80c      	bhi.n	8006ed8 <__multiply+0x9c>
 8006ebe:	2e00      	cmp	r6, #0
 8006ec0:	dd03      	ble.n	8006eca <__multiply+0x8e>
 8006ec2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d05a      	beq.n	8006f80 <__multiply+0x144>
 8006eca:	6106      	str	r6, [r0, #16]
 8006ecc:	b005      	add	sp, #20
 8006ece:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ed2:	f843 2b04 	str.w	r2, [r3], #4
 8006ed6:	e7d8      	b.n	8006e8a <__multiply+0x4e>
 8006ed8:	f8b1 a000 	ldrh.w	sl, [r1]
 8006edc:	f1ba 0f00 	cmp.w	sl, #0
 8006ee0:	d023      	beq.n	8006f2a <__multiply+0xee>
 8006ee2:	46a9      	mov	r9, r5
 8006ee4:	f04f 0c00 	mov.w	ip, #0
 8006ee8:	f104 0e14 	add.w	lr, r4, #20
 8006eec:	f85e 7b04 	ldr.w	r7, [lr], #4
 8006ef0:	f8d9 3000 	ldr.w	r3, [r9]
 8006ef4:	fa1f fb87 	uxth.w	fp, r7
 8006ef8:	b29b      	uxth	r3, r3
 8006efa:	fb0a 330b 	mla	r3, sl, fp, r3
 8006efe:	4463      	add	r3, ip
 8006f00:	f8d9 c000 	ldr.w	ip, [r9]
 8006f04:	0c3f      	lsrs	r7, r7, #16
 8006f06:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8006f0a:	fb0a c707 	mla	r7, sl, r7, ip
 8006f0e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8006f12:	b29b      	uxth	r3, r3
 8006f14:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006f18:	4572      	cmp	r2, lr
 8006f1a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8006f1e:	f849 3b04 	str.w	r3, [r9], #4
 8006f22:	d8e3      	bhi.n	8006eec <__multiply+0xb0>
 8006f24:	9b01      	ldr	r3, [sp, #4]
 8006f26:	f845 c003 	str.w	ip, [r5, r3]
 8006f2a:	9b03      	ldr	r3, [sp, #12]
 8006f2c:	3104      	adds	r1, #4
 8006f2e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8006f32:	f1b9 0f00 	cmp.w	r9, #0
 8006f36:	d021      	beq.n	8006f7c <__multiply+0x140>
 8006f38:	46ae      	mov	lr, r5
 8006f3a:	f04f 0a00 	mov.w	sl, #0
 8006f3e:	682b      	ldr	r3, [r5, #0]
 8006f40:	f104 0c14 	add.w	ip, r4, #20
 8006f44:	f8bc b000 	ldrh.w	fp, [ip]
 8006f48:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8006f4c:	b29b      	uxth	r3, r3
 8006f4e:	fb09 770b 	mla	r7, r9, fp, r7
 8006f52:	4457      	add	r7, sl
 8006f54:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006f58:	f84e 3b04 	str.w	r3, [lr], #4
 8006f5c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006f60:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006f64:	f8be 3000 	ldrh.w	r3, [lr]
 8006f68:	4562      	cmp	r2, ip
 8006f6a:	fb09 330a 	mla	r3, r9, sl, r3
 8006f6e:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8006f72:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006f76:	d8e5      	bhi.n	8006f44 <__multiply+0x108>
 8006f78:	9f01      	ldr	r7, [sp, #4]
 8006f7a:	51eb      	str	r3, [r5, r7]
 8006f7c:	3504      	adds	r5, #4
 8006f7e:	e79a      	b.n	8006eb6 <__multiply+0x7a>
 8006f80:	3e01      	subs	r6, #1
 8006f82:	e79c      	b.n	8006ebe <__multiply+0x82>
 8006f84:	080094eb 	.word	0x080094eb
 8006f88:	080094fc 	.word	0x080094fc

08006f8c <__pow5mult>:
 8006f8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006f90:	4615      	mov	r5, r2
 8006f92:	f012 0203 	ands.w	r2, r2, #3
 8006f96:	4607      	mov	r7, r0
 8006f98:	460e      	mov	r6, r1
 8006f9a:	d007      	beq.n	8006fac <__pow5mult+0x20>
 8006f9c:	4c25      	ldr	r4, [pc, #148]	@ (8007034 <__pow5mult+0xa8>)
 8006f9e:	3a01      	subs	r2, #1
 8006fa0:	2300      	movs	r3, #0
 8006fa2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006fa6:	f7ff fe57 	bl	8006c58 <__multadd>
 8006faa:	4606      	mov	r6, r0
 8006fac:	10ad      	asrs	r5, r5, #2
 8006fae:	d03d      	beq.n	800702c <__pow5mult+0xa0>
 8006fb0:	69fc      	ldr	r4, [r7, #28]
 8006fb2:	b97c      	cbnz	r4, 8006fd4 <__pow5mult+0x48>
 8006fb4:	2010      	movs	r0, #16
 8006fb6:	f7ff fd37 	bl	8006a28 <malloc>
 8006fba:	4602      	mov	r2, r0
 8006fbc:	61f8      	str	r0, [r7, #28]
 8006fbe:	b928      	cbnz	r0, 8006fcc <__pow5mult+0x40>
 8006fc0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8006fc4:	4b1c      	ldr	r3, [pc, #112]	@ (8007038 <__pow5mult+0xac>)
 8006fc6:	481d      	ldr	r0, [pc, #116]	@ (800703c <__pow5mult+0xb0>)
 8006fc8:	f001 fb58 	bl	800867c <__assert_func>
 8006fcc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006fd0:	6004      	str	r4, [r0, #0]
 8006fd2:	60c4      	str	r4, [r0, #12]
 8006fd4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8006fd8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006fdc:	b94c      	cbnz	r4, 8006ff2 <__pow5mult+0x66>
 8006fde:	f240 2171 	movw	r1, #625	@ 0x271
 8006fe2:	4638      	mov	r0, r7
 8006fe4:	f7ff ff14 	bl	8006e10 <__i2b>
 8006fe8:	2300      	movs	r3, #0
 8006fea:	4604      	mov	r4, r0
 8006fec:	f8c8 0008 	str.w	r0, [r8, #8]
 8006ff0:	6003      	str	r3, [r0, #0]
 8006ff2:	f04f 0900 	mov.w	r9, #0
 8006ff6:	07eb      	lsls	r3, r5, #31
 8006ff8:	d50a      	bpl.n	8007010 <__pow5mult+0x84>
 8006ffa:	4631      	mov	r1, r6
 8006ffc:	4622      	mov	r2, r4
 8006ffe:	4638      	mov	r0, r7
 8007000:	f7ff ff1c 	bl	8006e3c <__multiply>
 8007004:	4680      	mov	r8, r0
 8007006:	4631      	mov	r1, r6
 8007008:	4638      	mov	r0, r7
 800700a:	f7ff fe03 	bl	8006c14 <_Bfree>
 800700e:	4646      	mov	r6, r8
 8007010:	106d      	asrs	r5, r5, #1
 8007012:	d00b      	beq.n	800702c <__pow5mult+0xa0>
 8007014:	6820      	ldr	r0, [r4, #0]
 8007016:	b938      	cbnz	r0, 8007028 <__pow5mult+0x9c>
 8007018:	4622      	mov	r2, r4
 800701a:	4621      	mov	r1, r4
 800701c:	4638      	mov	r0, r7
 800701e:	f7ff ff0d 	bl	8006e3c <__multiply>
 8007022:	6020      	str	r0, [r4, #0]
 8007024:	f8c0 9000 	str.w	r9, [r0]
 8007028:	4604      	mov	r4, r0
 800702a:	e7e4      	b.n	8006ff6 <__pow5mult+0x6a>
 800702c:	4630      	mov	r0, r6
 800702e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007032:	bf00      	nop
 8007034:	08009558 	.word	0x08009558
 8007038:	0800947c 	.word	0x0800947c
 800703c:	080094fc 	.word	0x080094fc

08007040 <__lshift>:
 8007040:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007044:	460c      	mov	r4, r1
 8007046:	4607      	mov	r7, r0
 8007048:	4691      	mov	r9, r2
 800704a:	6923      	ldr	r3, [r4, #16]
 800704c:	6849      	ldr	r1, [r1, #4]
 800704e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007052:	68a3      	ldr	r3, [r4, #8]
 8007054:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007058:	f108 0601 	add.w	r6, r8, #1
 800705c:	42b3      	cmp	r3, r6
 800705e:	db0b      	blt.n	8007078 <__lshift+0x38>
 8007060:	4638      	mov	r0, r7
 8007062:	f7ff fd97 	bl	8006b94 <_Balloc>
 8007066:	4605      	mov	r5, r0
 8007068:	b948      	cbnz	r0, 800707e <__lshift+0x3e>
 800706a:	4602      	mov	r2, r0
 800706c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8007070:	4b27      	ldr	r3, [pc, #156]	@ (8007110 <__lshift+0xd0>)
 8007072:	4828      	ldr	r0, [pc, #160]	@ (8007114 <__lshift+0xd4>)
 8007074:	f001 fb02 	bl	800867c <__assert_func>
 8007078:	3101      	adds	r1, #1
 800707a:	005b      	lsls	r3, r3, #1
 800707c:	e7ee      	b.n	800705c <__lshift+0x1c>
 800707e:	2300      	movs	r3, #0
 8007080:	f100 0114 	add.w	r1, r0, #20
 8007084:	f100 0210 	add.w	r2, r0, #16
 8007088:	4618      	mov	r0, r3
 800708a:	4553      	cmp	r3, sl
 800708c:	db33      	blt.n	80070f6 <__lshift+0xb6>
 800708e:	6920      	ldr	r0, [r4, #16]
 8007090:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007094:	f104 0314 	add.w	r3, r4, #20
 8007098:	f019 091f 	ands.w	r9, r9, #31
 800709c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80070a0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80070a4:	d02b      	beq.n	80070fe <__lshift+0xbe>
 80070a6:	468a      	mov	sl, r1
 80070a8:	2200      	movs	r2, #0
 80070aa:	f1c9 0e20 	rsb	lr, r9, #32
 80070ae:	6818      	ldr	r0, [r3, #0]
 80070b0:	fa00 f009 	lsl.w	r0, r0, r9
 80070b4:	4310      	orrs	r0, r2
 80070b6:	f84a 0b04 	str.w	r0, [sl], #4
 80070ba:	f853 2b04 	ldr.w	r2, [r3], #4
 80070be:	459c      	cmp	ip, r3
 80070c0:	fa22 f20e 	lsr.w	r2, r2, lr
 80070c4:	d8f3      	bhi.n	80070ae <__lshift+0x6e>
 80070c6:	ebac 0304 	sub.w	r3, ip, r4
 80070ca:	3b15      	subs	r3, #21
 80070cc:	f023 0303 	bic.w	r3, r3, #3
 80070d0:	3304      	adds	r3, #4
 80070d2:	f104 0015 	add.w	r0, r4, #21
 80070d6:	4584      	cmp	ip, r0
 80070d8:	bf38      	it	cc
 80070da:	2304      	movcc	r3, #4
 80070dc:	50ca      	str	r2, [r1, r3]
 80070de:	b10a      	cbz	r2, 80070e4 <__lshift+0xa4>
 80070e0:	f108 0602 	add.w	r6, r8, #2
 80070e4:	3e01      	subs	r6, #1
 80070e6:	4638      	mov	r0, r7
 80070e8:	4621      	mov	r1, r4
 80070ea:	612e      	str	r6, [r5, #16]
 80070ec:	f7ff fd92 	bl	8006c14 <_Bfree>
 80070f0:	4628      	mov	r0, r5
 80070f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80070f6:	f842 0f04 	str.w	r0, [r2, #4]!
 80070fa:	3301      	adds	r3, #1
 80070fc:	e7c5      	b.n	800708a <__lshift+0x4a>
 80070fe:	3904      	subs	r1, #4
 8007100:	f853 2b04 	ldr.w	r2, [r3], #4
 8007104:	459c      	cmp	ip, r3
 8007106:	f841 2f04 	str.w	r2, [r1, #4]!
 800710a:	d8f9      	bhi.n	8007100 <__lshift+0xc0>
 800710c:	e7ea      	b.n	80070e4 <__lshift+0xa4>
 800710e:	bf00      	nop
 8007110:	080094eb 	.word	0x080094eb
 8007114:	080094fc 	.word	0x080094fc

08007118 <__mcmp>:
 8007118:	4603      	mov	r3, r0
 800711a:	690a      	ldr	r2, [r1, #16]
 800711c:	6900      	ldr	r0, [r0, #16]
 800711e:	b530      	push	{r4, r5, lr}
 8007120:	1a80      	subs	r0, r0, r2
 8007122:	d10e      	bne.n	8007142 <__mcmp+0x2a>
 8007124:	3314      	adds	r3, #20
 8007126:	3114      	adds	r1, #20
 8007128:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800712c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007130:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007134:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007138:	4295      	cmp	r5, r2
 800713a:	d003      	beq.n	8007144 <__mcmp+0x2c>
 800713c:	d205      	bcs.n	800714a <__mcmp+0x32>
 800713e:	f04f 30ff 	mov.w	r0, #4294967295
 8007142:	bd30      	pop	{r4, r5, pc}
 8007144:	42a3      	cmp	r3, r4
 8007146:	d3f3      	bcc.n	8007130 <__mcmp+0x18>
 8007148:	e7fb      	b.n	8007142 <__mcmp+0x2a>
 800714a:	2001      	movs	r0, #1
 800714c:	e7f9      	b.n	8007142 <__mcmp+0x2a>
	...

08007150 <__mdiff>:
 8007150:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007154:	4689      	mov	r9, r1
 8007156:	4606      	mov	r6, r0
 8007158:	4611      	mov	r1, r2
 800715a:	4648      	mov	r0, r9
 800715c:	4614      	mov	r4, r2
 800715e:	f7ff ffdb 	bl	8007118 <__mcmp>
 8007162:	1e05      	subs	r5, r0, #0
 8007164:	d112      	bne.n	800718c <__mdiff+0x3c>
 8007166:	4629      	mov	r1, r5
 8007168:	4630      	mov	r0, r6
 800716a:	f7ff fd13 	bl	8006b94 <_Balloc>
 800716e:	4602      	mov	r2, r0
 8007170:	b928      	cbnz	r0, 800717e <__mdiff+0x2e>
 8007172:	f240 2137 	movw	r1, #567	@ 0x237
 8007176:	4b3e      	ldr	r3, [pc, #248]	@ (8007270 <__mdiff+0x120>)
 8007178:	483e      	ldr	r0, [pc, #248]	@ (8007274 <__mdiff+0x124>)
 800717a:	f001 fa7f 	bl	800867c <__assert_func>
 800717e:	2301      	movs	r3, #1
 8007180:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007184:	4610      	mov	r0, r2
 8007186:	b003      	add	sp, #12
 8007188:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800718c:	bfbc      	itt	lt
 800718e:	464b      	movlt	r3, r9
 8007190:	46a1      	movlt	r9, r4
 8007192:	4630      	mov	r0, r6
 8007194:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007198:	bfba      	itte	lt
 800719a:	461c      	movlt	r4, r3
 800719c:	2501      	movlt	r5, #1
 800719e:	2500      	movge	r5, #0
 80071a0:	f7ff fcf8 	bl	8006b94 <_Balloc>
 80071a4:	4602      	mov	r2, r0
 80071a6:	b918      	cbnz	r0, 80071b0 <__mdiff+0x60>
 80071a8:	f240 2145 	movw	r1, #581	@ 0x245
 80071ac:	4b30      	ldr	r3, [pc, #192]	@ (8007270 <__mdiff+0x120>)
 80071ae:	e7e3      	b.n	8007178 <__mdiff+0x28>
 80071b0:	f100 0b14 	add.w	fp, r0, #20
 80071b4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80071b8:	f109 0310 	add.w	r3, r9, #16
 80071bc:	60c5      	str	r5, [r0, #12]
 80071be:	f04f 0c00 	mov.w	ip, #0
 80071c2:	f109 0514 	add.w	r5, r9, #20
 80071c6:	46d9      	mov	r9, fp
 80071c8:	6926      	ldr	r6, [r4, #16]
 80071ca:	f104 0e14 	add.w	lr, r4, #20
 80071ce:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80071d2:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80071d6:	9301      	str	r3, [sp, #4]
 80071d8:	9b01      	ldr	r3, [sp, #4]
 80071da:	f85e 0b04 	ldr.w	r0, [lr], #4
 80071de:	f853 af04 	ldr.w	sl, [r3, #4]!
 80071e2:	b281      	uxth	r1, r0
 80071e4:	9301      	str	r3, [sp, #4]
 80071e6:	fa1f f38a 	uxth.w	r3, sl
 80071ea:	1a5b      	subs	r3, r3, r1
 80071ec:	0c00      	lsrs	r0, r0, #16
 80071ee:	4463      	add	r3, ip
 80071f0:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80071f4:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80071f8:	b29b      	uxth	r3, r3
 80071fa:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80071fe:	4576      	cmp	r6, lr
 8007200:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007204:	f849 3b04 	str.w	r3, [r9], #4
 8007208:	d8e6      	bhi.n	80071d8 <__mdiff+0x88>
 800720a:	1b33      	subs	r3, r6, r4
 800720c:	3b15      	subs	r3, #21
 800720e:	f023 0303 	bic.w	r3, r3, #3
 8007212:	3415      	adds	r4, #21
 8007214:	3304      	adds	r3, #4
 8007216:	42a6      	cmp	r6, r4
 8007218:	bf38      	it	cc
 800721a:	2304      	movcc	r3, #4
 800721c:	441d      	add	r5, r3
 800721e:	445b      	add	r3, fp
 8007220:	461e      	mov	r6, r3
 8007222:	462c      	mov	r4, r5
 8007224:	4544      	cmp	r4, r8
 8007226:	d30e      	bcc.n	8007246 <__mdiff+0xf6>
 8007228:	f108 0103 	add.w	r1, r8, #3
 800722c:	1b49      	subs	r1, r1, r5
 800722e:	f021 0103 	bic.w	r1, r1, #3
 8007232:	3d03      	subs	r5, #3
 8007234:	45a8      	cmp	r8, r5
 8007236:	bf38      	it	cc
 8007238:	2100      	movcc	r1, #0
 800723a:	440b      	add	r3, r1
 800723c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007240:	b199      	cbz	r1, 800726a <__mdiff+0x11a>
 8007242:	6117      	str	r7, [r2, #16]
 8007244:	e79e      	b.n	8007184 <__mdiff+0x34>
 8007246:	46e6      	mov	lr, ip
 8007248:	f854 1b04 	ldr.w	r1, [r4], #4
 800724c:	fa1f fc81 	uxth.w	ip, r1
 8007250:	44f4      	add	ip, lr
 8007252:	0c08      	lsrs	r0, r1, #16
 8007254:	4471      	add	r1, lr
 8007256:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800725a:	b289      	uxth	r1, r1
 800725c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007260:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007264:	f846 1b04 	str.w	r1, [r6], #4
 8007268:	e7dc      	b.n	8007224 <__mdiff+0xd4>
 800726a:	3f01      	subs	r7, #1
 800726c:	e7e6      	b.n	800723c <__mdiff+0xec>
 800726e:	bf00      	nop
 8007270:	080094eb 	.word	0x080094eb
 8007274:	080094fc 	.word	0x080094fc

08007278 <__ulp>:
 8007278:	4b0e      	ldr	r3, [pc, #56]	@ (80072b4 <__ulp+0x3c>)
 800727a:	400b      	ands	r3, r1
 800727c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8007280:	2b00      	cmp	r3, #0
 8007282:	dc08      	bgt.n	8007296 <__ulp+0x1e>
 8007284:	425b      	negs	r3, r3
 8007286:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800728a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800728e:	da04      	bge.n	800729a <__ulp+0x22>
 8007290:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8007294:	4113      	asrs	r3, r2
 8007296:	2200      	movs	r2, #0
 8007298:	e008      	b.n	80072ac <__ulp+0x34>
 800729a:	f1a2 0314 	sub.w	r3, r2, #20
 800729e:	2b1e      	cmp	r3, #30
 80072a0:	bfd6      	itet	le
 80072a2:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 80072a6:	2201      	movgt	r2, #1
 80072a8:	40da      	lsrle	r2, r3
 80072aa:	2300      	movs	r3, #0
 80072ac:	4619      	mov	r1, r3
 80072ae:	4610      	mov	r0, r2
 80072b0:	4770      	bx	lr
 80072b2:	bf00      	nop
 80072b4:	7ff00000 	.word	0x7ff00000

080072b8 <__b2d>:
 80072b8:	6902      	ldr	r2, [r0, #16]
 80072ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072bc:	f100 0614 	add.w	r6, r0, #20
 80072c0:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 80072c4:	f852 4c04 	ldr.w	r4, [r2, #-4]
 80072c8:	4f1e      	ldr	r7, [pc, #120]	@ (8007344 <__b2d+0x8c>)
 80072ca:	4620      	mov	r0, r4
 80072cc:	f7ff fd54 	bl	8006d78 <__hi0bits>
 80072d0:	4603      	mov	r3, r0
 80072d2:	f1c0 0020 	rsb	r0, r0, #32
 80072d6:	2b0a      	cmp	r3, #10
 80072d8:	f1a2 0504 	sub.w	r5, r2, #4
 80072dc:	6008      	str	r0, [r1, #0]
 80072de:	dc12      	bgt.n	8007306 <__b2d+0x4e>
 80072e0:	42ae      	cmp	r6, r5
 80072e2:	bf2c      	ite	cs
 80072e4:	2200      	movcs	r2, #0
 80072e6:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 80072ea:	f1c3 0c0b 	rsb	ip, r3, #11
 80072ee:	3315      	adds	r3, #21
 80072f0:	fa24 fe0c 	lsr.w	lr, r4, ip
 80072f4:	fa04 f303 	lsl.w	r3, r4, r3
 80072f8:	fa22 f20c 	lsr.w	r2, r2, ip
 80072fc:	ea4e 0107 	orr.w	r1, lr, r7
 8007300:	431a      	orrs	r2, r3
 8007302:	4610      	mov	r0, r2
 8007304:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007306:	42ae      	cmp	r6, r5
 8007308:	bf36      	itet	cc
 800730a:	f1a2 0508 	subcc.w	r5, r2, #8
 800730e:	2200      	movcs	r2, #0
 8007310:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8007314:	3b0b      	subs	r3, #11
 8007316:	d012      	beq.n	800733e <__b2d+0x86>
 8007318:	f1c3 0720 	rsb	r7, r3, #32
 800731c:	fa22 f107 	lsr.w	r1, r2, r7
 8007320:	409c      	lsls	r4, r3
 8007322:	430c      	orrs	r4, r1
 8007324:	42b5      	cmp	r5, r6
 8007326:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 800732a:	bf94      	ite	ls
 800732c:	2400      	movls	r4, #0
 800732e:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 8007332:	409a      	lsls	r2, r3
 8007334:	40fc      	lsrs	r4, r7
 8007336:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800733a:	4322      	orrs	r2, r4
 800733c:	e7e1      	b.n	8007302 <__b2d+0x4a>
 800733e:	ea44 0107 	orr.w	r1, r4, r7
 8007342:	e7de      	b.n	8007302 <__b2d+0x4a>
 8007344:	3ff00000 	.word	0x3ff00000

08007348 <__d2b>:
 8007348:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 800734c:	2101      	movs	r1, #1
 800734e:	4690      	mov	r8, r2
 8007350:	4699      	mov	r9, r3
 8007352:	9e08      	ldr	r6, [sp, #32]
 8007354:	f7ff fc1e 	bl	8006b94 <_Balloc>
 8007358:	4604      	mov	r4, r0
 800735a:	b930      	cbnz	r0, 800736a <__d2b+0x22>
 800735c:	4602      	mov	r2, r0
 800735e:	f240 310f 	movw	r1, #783	@ 0x30f
 8007362:	4b23      	ldr	r3, [pc, #140]	@ (80073f0 <__d2b+0xa8>)
 8007364:	4823      	ldr	r0, [pc, #140]	@ (80073f4 <__d2b+0xac>)
 8007366:	f001 f989 	bl	800867c <__assert_func>
 800736a:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800736e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007372:	b10d      	cbz	r5, 8007378 <__d2b+0x30>
 8007374:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007378:	9301      	str	r3, [sp, #4]
 800737a:	f1b8 0300 	subs.w	r3, r8, #0
 800737e:	d024      	beq.n	80073ca <__d2b+0x82>
 8007380:	4668      	mov	r0, sp
 8007382:	9300      	str	r3, [sp, #0]
 8007384:	f7ff fd17 	bl	8006db6 <__lo0bits>
 8007388:	e9dd 1200 	ldrd	r1, r2, [sp]
 800738c:	b1d8      	cbz	r0, 80073c6 <__d2b+0x7e>
 800738e:	f1c0 0320 	rsb	r3, r0, #32
 8007392:	fa02 f303 	lsl.w	r3, r2, r3
 8007396:	430b      	orrs	r3, r1
 8007398:	40c2      	lsrs	r2, r0
 800739a:	6163      	str	r3, [r4, #20]
 800739c:	9201      	str	r2, [sp, #4]
 800739e:	9b01      	ldr	r3, [sp, #4]
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	bf0c      	ite	eq
 80073a4:	2201      	moveq	r2, #1
 80073a6:	2202      	movne	r2, #2
 80073a8:	61a3      	str	r3, [r4, #24]
 80073aa:	6122      	str	r2, [r4, #16]
 80073ac:	b1ad      	cbz	r5, 80073da <__d2b+0x92>
 80073ae:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80073b2:	4405      	add	r5, r0
 80073b4:	6035      	str	r5, [r6, #0]
 80073b6:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80073ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80073bc:	6018      	str	r0, [r3, #0]
 80073be:	4620      	mov	r0, r4
 80073c0:	b002      	add	sp, #8
 80073c2:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 80073c6:	6161      	str	r1, [r4, #20]
 80073c8:	e7e9      	b.n	800739e <__d2b+0x56>
 80073ca:	a801      	add	r0, sp, #4
 80073cc:	f7ff fcf3 	bl	8006db6 <__lo0bits>
 80073d0:	9b01      	ldr	r3, [sp, #4]
 80073d2:	2201      	movs	r2, #1
 80073d4:	6163      	str	r3, [r4, #20]
 80073d6:	3020      	adds	r0, #32
 80073d8:	e7e7      	b.n	80073aa <__d2b+0x62>
 80073da:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80073de:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80073e2:	6030      	str	r0, [r6, #0]
 80073e4:	6918      	ldr	r0, [r3, #16]
 80073e6:	f7ff fcc7 	bl	8006d78 <__hi0bits>
 80073ea:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80073ee:	e7e4      	b.n	80073ba <__d2b+0x72>
 80073f0:	080094eb 	.word	0x080094eb
 80073f4:	080094fc 	.word	0x080094fc

080073f8 <__ratio>:
 80073f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073fc:	b085      	sub	sp, #20
 80073fe:	e9cd 1000 	strd	r1, r0, [sp]
 8007402:	a902      	add	r1, sp, #8
 8007404:	f7ff ff58 	bl	80072b8 <__b2d>
 8007408:	468b      	mov	fp, r1
 800740a:	4606      	mov	r6, r0
 800740c:	460f      	mov	r7, r1
 800740e:	9800      	ldr	r0, [sp, #0]
 8007410:	a903      	add	r1, sp, #12
 8007412:	f7ff ff51 	bl	80072b8 <__b2d>
 8007416:	460d      	mov	r5, r1
 8007418:	9b01      	ldr	r3, [sp, #4]
 800741a:	4689      	mov	r9, r1
 800741c:	6919      	ldr	r1, [r3, #16]
 800741e:	9b00      	ldr	r3, [sp, #0]
 8007420:	4604      	mov	r4, r0
 8007422:	691b      	ldr	r3, [r3, #16]
 8007424:	4630      	mov	r0, r6
 8007426:	1ac9      	subs	r1, r1, r3
 8007428:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800742c:	1a9b      	subs	r3, r3, r2
 800742e:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8007432:	2b00      	cmp	r3, #0
 8007434:	bfcd      	iteet	gt
 8007436:	463a      	movgt	r2, r7
 8007438:	462a      	movle	r2, r5
 800743a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800743e:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8007442:	bfd8      	it	le
 8007444:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8007448:	464b      	mov	r3, r9
 800744a:	4622      	mov	r2, r4
 800744c:	4659      	mov	r1, fp
 800744e:	f7f9 fa21 	bl	8000894 <__aeabi_ddiv>
 8007452:	b005      	add	sp, #20
 8007454:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007458 <__copybits>:
 8007458:	3901      	subs	r1, #1
 800745a:	b570      	push	{r4, r5, r6, lr}
 800745c:	1149      	asrs	r1, r1, #5
 800745e:	6914      	ldr	r4, [r2, #16]
 8007460:	3101      	adds	r1, #1
 8007462:	f102 0314 	add.w	r3, r2, #20
 8007466:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800746a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800746e:	1f05      	subs	r5, r0, #4
 8007470:	42a3      	cmp	r3, r4
 8007472:	d30c      	bcc.n	800748e <__copybits+0x36>
 8007474:	1aa3      	subs	r3, r4, r2
 8007476:	3b11      	subs	r3, #17
 8007478:	f023 0303 	bic.w	r3, r3, #3
 800747c:	3211      	adds	r2, #17
 800747e:	42a2      	cmp	r2, r4
 8007480:	bf88      	it	hi
 8007482:	2300      	movhi	r3, #0
 8007484:	4418      	add	r0, r3
 8007486:	2300      	movs	r3, #0
 8007488:	4288      	cmp	r0, r1
 800748a:	d305      	bcc.n	8007498 <__copybits+0x40>
 800748c:	bd70      	pop	{r4, r5, r6, pc}
 800748e:	f853 6b04 	ldr.w	r6, [r3], #4
 8007492:	f845 6f04 	str.w	r6, [r5, #4]!
 8007496:	e7eb      	b.n	8007470 <__copybits+0x18>
 8007498:	f840 3b04 	str.w	r3, [r0], #4
 800749c:	e7f4      	b.n	8007488 <__copybits+0x30>

0800749e <__any_on>:
 800749e:	f100 0214 	add.w	r2, r0, #20
 80074a2:	6900      	ldr	r0, [r0, #16]
 80074a4:	114b      	asrs	r3, r1, #5
 80074a6:	4298      	cmp	r0, r3
 80074a8:	b510      	push	{r4, lr}
 80074aa:	db11      	blt.n	80074d0 <__any_on+0x32>
 80074ac:	dd0a      	ble.n	80074c4 <__any_on+0x26>
 80074ae:	f011 011f 	ands.w	r1, r1, #31
 80074b2:	d007      	beq.n	80074c4 <__any_on+0x26>
 80074b4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80074b8:	fa24 f001 	lsr.w	r0, r4, r1
 80074bc:	fa00 f101 	lsl.w	r1, r0, r1
 80074c0:	428c      	cmp	r4, r1
 80074c2:	d10b      	bne.n	80074dc <__any_on+0x3e>
 80074c4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80074c8:	4293      	cmp	r3, r2
 80074ca:	d803      	bhi.n	80074d4 <__any_on+0x36>
 80074cc:	2000      	movs	r0, #0
 80074ce:	bd10      	pop	{r4, pc}
 80074d0:	4603      	mov	r3, r0
 80074d2:	e7f7      	b.n	80074c4 <__any_on+0x26>
 80074d4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80074d8:	2900      	cmp	r1, #0
 80074da:	d0f5      	beq.n	80074c8 <__any_on+0x2a>
 80074dc:	2001      	movs	r0, #1
 80074de:	e7f6      	b.n	80074ce <__any_on+0x30>

080074e0 <sulp>:
 80074e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80074e4:	460f      	mov	r7, r1
 80074e6:	4690      	mov	r8, r2
 80074e8:	f7ff fec6 	bl	8007278 <__ulp>
 80074ec:	4604      	mov	r4, r0
 80074ee:	460d      	mov	r5, r1
 80074f0:	f1b8 0f00 	cmp.w	r8, #0
 80074f4:	d011      	beq.n	800751a <sulp+0x3a>
 80074f6:	f3c7 530a 	ubfx	r3, r7, #20, #11
 80074fa:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80074fe:	2b00      	cmp	r3, #0
 8007500:	dd0b      	ble.n	800751a <sulp+0x3a>
 8007502:	2400      	movs	r4, #0
 8007504:	051b      	lsls	r3, r3, #20
 8007506:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800750a:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800750e:	4622      	mov	r2, r4
 8007510:	462b      	mov	r3, r5
 8007512:	f7f9 f895 	bl	8000640 <__aeabi_dmul>
 8007516:	4604      	mov	r4, r0
 8007518:	460d      	mov	r5, r1
 800751a:	4620      	mov	r0, r4
 800751c:	4629      	mov	r1, r5
 800751e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007522:	0000      	movs	r0, r0
 8007524:	0000      	movs	r0, r0
	...

08007528 <_strtod_l>:
 8007528:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800752c:	b09f      	sub	sp, #124	@ 0x7c
 800752e:	9217      	str	r2, [sp, #92]	@ 0x5c
 8007530:	2200      	movs	r2, #0
 8007532:	460c      	mov	r4, r1
 8007534:	921a      	str	r2, [sp, #104]	@ 0x68
 8007536:	f04f 0a00 	mov.w	sl, #0
 800753a:	f04f 0b00 	mov.w	fp, #0
 800753e:	460a      	mov	r2, r1
 8007540:	9005      	str	r0, [sp, #20]
 8007542:	9219      	str	r2, [sp, #100]	@ 0x64
 8007544:	7811      	ldrb	r1, [r2, #0]
 8007546:	292b      	cmp	r1, #43	@ 0x2b
 8007548:	d048      	beq.n	80075dc <_strtod_l+0xb4>
 800754a:	d836      	bhi.n	80075ba <_strtod_l+0x92>
 800754c:	290d      	cmp	r1, #13
 800754e:	d830      	bhi.n	80075b2 <_strtod_l+0x8a>
 8007550:	2908      	cmp	r1, #8
 8007552:	d830      	bhi.n	80075b6 <_strtod_l+0x8e>
 8007554:	2900      	cmp	r1, #0
 8007556:	d039      	beq.n	80075cc <_strtod_l+0xa4>
 8007558:	2200      	movs	r2, #0
 800755a:	920b      	str	r2, [sp, #44]	@ 0x2c
 800755c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800755e:	782a      	ldrb	r2, [r5, #0]
 8007560:	2a30      	cmp	r2, #48	@ 0x30
 8007562:	f040 80b1 	bne.w	80076c8 <_strtod_l+0x1a0>
 8007566:	786a      	ldrb	r2, [r5, #1]
 8007568:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800756c:	2a58      	cmp	r2, #88	@ 0x58
 800756e:	d16c      	bne.n	800764a <_strtod_l+0x122>
 8007570:	9302      	str	r3, [sp, #8]
 8007572:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007574:	4a8e      	ldr	r2, [pc, #568]	@ (80077b0 <_strtod_l+0x288>)
 8007576:	9301      	str	r3, [sp, #4]
 8007578:	ab1a      	add	r3, sp, #104	@ 0x68
 800757a:	9300      	str	r3, [sp, #0]
 800757c:	9805      	ldr	r0, [sp, #20]
 800757e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8007580:	a919      	add	r1, sp, #100	@ 0x64
 8007582:	f001 f915 	bl	80087b0 <__gethex>
 8007586:	f010 060f 	ands.w	r6, r0, #15
 800758a:	4604      	mov	r4, r0
 800758c:	d005      	beq.n	800759a <_strtod_l+0x72>
 800758e:	2e06      	cmp	r6, #6
 8007590:	d126      	bne.n	80075e0 <_strtod_l+0xb8>
 8007592:	2300      	movs	r3, #0
 8007594:	3501      	adds	r5, #1
 8007596:	9519      	str	r5, [sp, #100]	@ 0x64
 8007598:	930b      	str	r3, [sp, #44]	@ 0x2c
 800759a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800759c:	2b00      	cmp	r3, #0
 800759e:	f040 8584 	bne.w	80080aa <_strtod_l+0xb82>
 80075a2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80075a4:	b1bb      	cbz	r3, 80075d6 <_strtod_l+0xae>
 80075a6:	4650      	mov	r0, sl
 80075a8:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 80075ac:	b01f      	add	sp, #124	@ 0x7c
 80075ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075b2:	2920      	cmp	r1, #32
 80075b4:	d1d0      	bne.n	8007558 <_strtod_l+0x30>
 80075b6:	3201      	adds	r2, #1
 80075b8:	e7c3      	b.n	8007542 <_strtod_l+0x1a>
 80075ba:	292d      	cmp	r1, #45	@ 0x2d
 80075bc:	d1cc      	bne.n	8007558 <_strtod_l+0x30>
 80075be:	2101      	movs	r1, #1
 80075c0:	910b      	str	r1, [sp, #44]	@ 0x2c
 80075c2:	1c51      	adds	r1, r2, #1
 80075c4:	9119      	str	r1, [sp, #100]	@ 0x64
 80075c6:	7852      	ldrb	r2, [r2, #1]
 80075c8:	2a00      	cmp	r2, #0
 80075ca:	d1c7      	bne.n	800755c <_strtod_l+0x34>
 80075cc:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80075ce:	9419      	str	r4, [sp, #100]	@ 0x64
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	f040 8568 	bne.w	80080a6 <_strtod_l+0xb7e>
 80075d6:	4650      	mov	r0, sl
 80075d8:	4659      	mov	r1, fp
 80075da:	e7e7      	b.n	80075ac <_strtod_l+0x84>
 80075dc:	2100      	movs	r1, #0
 80075de:	e7ef      	b.n	80075c0 <_strtod_l+0x98>
 80075e0:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80075e2:	b13a      	cbz	r2, 80075f4 <_strtod_l+0xcc>
 80075e4:	2135      	movs	r1, #53	@ 0x35
 80075e6:	a81c      	add	r0, sp, #112	@ 0x70
 80075e8:	f7ff ff36 	bl	8007458 <__copybits>
 80075ec:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80075ee:	9805      	ldr	r0, [sp, #20]
 80075f0:	f7ff fb10 	bl	8006c14 <_Bfree>
 80075f4:	3e01      	subs	r6, #1
 80075f6:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80075f8:	2e04      	cmp	r6, #4
 80075fa:	d806      	bhi.n	800760a <_strtod_l+0xe2>
 80075fc:	e8df f006 	tbb	[pc, r6]
 8007600:	201d0314 	.word	0x201d0314
 8007604:	14          	.byte	0x14
 8007605:	00          	.byte	0x00
 8007606:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800760a:	05e1      	lsls	r1, r4, #23
 800760c:	bf48      	it	mi
 800760e:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8007612:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007616:	0d1b      	lsrs	r3, r3, #20
 8007618:	051b      	lsls	r3, r3, #20
 800761a:	2b00      	cmp	r3, #0
 800761c:	d1bd      	bne.n	800759a <_strtod_l+0x72>
 800761e:	f7fe fb29 	bl	8005c74 <__errno>
 8007622:	2322      	movs	r3, #34	@ 0x22
 8007624:	6003      	str	r3, [r0, #0]
 8007626:	e7b8      	b.n	800759a <_strtod_l+0x72>
 8007628:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800762c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8007630:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8007634:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8007638:	e7e7      	b.n	800760a <_strtod_l+0xe2>
 800763a:	f8df b178 	ldr.w	fp, [pc, #376]	@ 80077b4 <_strtod_l+0x28c>
 800763e:	e7e4      	b.n	800760a <_strtod_l+0xe2>
 8007640:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8007644:	f04f 3aff 	mov.w	sl, #4294967295
 8007648:	e7df      	b.n	800760a <_strtod_l+0xe2>
 800764a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800764c:	1c5a      	adds	r2, r3, #1
 800764e:	9219      	str	r2, [sp, #100]	@ 0x64
 8007650:	785b      	ldrb	r3, [r3, #1]
 8007652:	2b30      	cmp	r3, #48	@ 0x30
 8007654:	d0f9      	beq.n	800764a <_strtod_l+0x122>
 8007656:	2b00      	cmp	r3, #0
 8007658:	d09f      	beq.n	800759a <_strtod_l+0x72>
 800765a:	2301      	movs	r3, #1
 800765c:	9309      	str	r3, [sp, #36]	@ 0x24
 800765e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007660:	220a      	movs	r2, #10
 8007662:	930c      	str	r3, [sp, #48]	@ 0x30
 8007664:	2300      	movs	r3, #0
 8007666:	461f      	mov	r7, r3
 8007668:	9308      	str	r3, [sp, #32]
 800766a:	930a      	str	r3, [sp, #40]	@ 0x28
 800766c:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800766e:	7805      	ldrb	r5, [r0, #0]
 8007670:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8007674:	b2d9      	uxtb	r1, r3
 8007676:	2909      	cmp	r1, #9
 8007678:	d928      	bls.n	80076cc <_strtod_l+0x1a4>
 800767a:	2201      	movs	r2, #1
 800767c:	494e      	ldr	r1, [pc, #312]	@ (80077b8 <_strtod_l+0x290>)
 800767e:	f000 ffc7 	bl	8008610 <strncmp>
 8007682:	2800      	cmp	r0, #0
 8007684:	d032      	beq.n	80076ec <_strtod_l+0x1c4>
 8007686:	2000      	movs	r0, #0
 8007688:	462a      	mov	r2, r5
 800768a:	4681      	mov	r9, r0
 800768c:	463d      	mov	r5, r7
 800768e:	4603      	mov	r3, r0
 8007690:	2a65      	cmp	r2, #101	@ 0x65
 8007692:	d001      	beq.n	8007698 <_strtod_l+0x170>
 8007694:	2a45      	cmp	r2, #69	@ 0x45
 8007696:	d114      	bne.n	80076c2 <_strtod_l+0x19a>
 8007698:	b91d      	cbnz	r5, 80076a2 <_strtod_l+0x17a>
 800769a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800769c:	4302      	orrs	r2, r0
 800769e:	d095      	beq.n	80075cc <_strtod_l+0xa4>
 80076a0:	2500      	movs	r5, #0
 80076a2:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 80076a4:	1c62      	adds	r2, r4, #1
 80076a6:	9219      	str	r2, [sp, #100]	@ 0x64
 80076a8:	7862      	ldrb	r2, [r4, #1]
 80076aa:	2a2b      	cmp	r2, #43	@ 0x2b
 80076ac:	d077      	beq.n	800779e <_strtod_l+0x276>
 80076ae:	2a2d      	cmp	r2, #45	@ 0x2d
 80076b0:	d07b      	beq.n	80077aa <_strtod_l+0x282>
 80076b2:	f04f 0c00 	mov.w	ip, #0
 80076b6:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 80076ba:	2909      	cmp	r1, #9
 80076bc:	f240 8082 	bls.w	80077c4 <_strtod_l+0x29c>
 80076c0:	9419      	str	r4, [sp, #100]	@ 0x64
 80076c2:	f04f 0800 	mov.w	r8, #0
 80076c6:	e0a2      	b.n	800780e <_strtod_l+0x2e6>
 80076c8:	2300      	movs	r3, #0
 80076ca:	e7c7      	b.n	800765c <_strtod_l+0x134>
 80076cc:	2f08      	cmp	r7, #8
 80076ce:	bfd5      	itete	le
 80076d0:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 80076d2:	9908      	ldrgt	r1, [sp, #32]
 80076d4:	fb02 3301 	mlale	r3, r2, r1, r3
 80076d8:	fb02 3301 	mlagt	r3, r2, r1, r3
 80076dc:	f100 0001 	add.w	r0, r0, #1
 80076e0:	bfd4      	ite	le
 80076e2:	930a      	strle	r3, [sp, #40]	@ 0x28
 80076e4:	9308      	strgt	r3, [sp, #32]
 80076e6:	3701      	adds	r7, #1
 80076e8:	9019      	str	r0, [sp, #100]	@ 0x64
 80076ea:	e7bf      	b.n	800766c <_strtod_l+0x144>
 80076ec:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80076ee:	1c5a      	adds	r2, r3, #1
 80076f0:	9219      	str	r2, [sp, #100]	@ 0x64
 80076f2:	785a      	ldrb	r2, [r3, #1]
 80076f4:	b37f      	cbz	r7, 8007756 <_strtod_l+0x22e>
 80076f6:	4681      	mov	r9, r0
 80076f8:	463d      	mov	r5, r7
 80076fa:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 80076fe:	2b09      	cmp	r3, #9
 8007700:	d912      	bls.n	8007728 <_strtod_l+0x200>
 8007702:	2301      	movs	r3, #1
 8007704:	e7c4      	b.n	8007690 <_strtod_l+0x168>
 8007706:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007708:	3001      	adds	r0, #1
 800770a:	1c5a      	adds	r2, r3, #1
 800770c:	9219      	str	r2, [sp, #100]	@ 0x64
 800770e:	785a      	ldrb	r2, [r3, #1]
 8007710:	2a30      	cmp	r2, #48	@ 0x30
 8007712:	d0f8      	beq.n	8007706 <_strtod_l+0x1de>
 8007714:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8007718:	2b08      	cmp	r3, #8
 800771a:	f200 84cb 	bhi.w	80080b4 <_strtod_l+0xb8c>
 800771e:	4681      	mov	r9, r0
 8007720:	2000      	movs	r0, #0
 8007722:	4605      	mov	r5, r0
 8007724:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007726:	930c      	str	r3, [sp, #48]	@ 0x30
 8007728:	3a30      	subs	r2, #48	@ 0x30
 800772a:	f100 0301 	add.w	r3, r0, #1
 800772e:	d02a      	beq.n	8007786 <_strtod_l+0x25e>
 8007730:	4499      	add	r9, r3
 8007732:	210a      	movs	r1, #10
 8007734:	462b      	mov	r3, r5
 8007736:	eb00 0c05 	add.w	ip, r0, r5
 800773a:	4563      	cmp	r3, ip
 800773c:	d10d      	bne.n	800775a <_strtod_l+0x232>
 800773e:	1c69      	adds	r1, r5, #1
 8007740:	4401      	add	r1, r0
 8007742:	4428      	add	r0, r5
 8007744:	2808      	cmp	r0, #8
 8007746:	dc16      	bgt.n	8007776 <_strtod_l+0x24e>
 8007748:	230a      	movs	r3, #10
 800774a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800774c:	fb03 2300 	mla	r3, r3, r0, r2
 8007750:	930a      	str	r3, [sp, #40]	@ 0x28
 8007752:	2300      	movs	r3, #0
 8007754:	e018      	b.n	8007788 <_strtod_l+0x260>
 8007756:	4638      	mov	r0, r7
 8007758:	e7da      	b.n	8007710 <_strtod_l+0x1e8>
 800775a:	2b08      	cmp	r3, #8
 800775c:	f103 0301 	add.w	r3, r3, #1
 8007760:	dc03      	bgt.n	800776a <_strtod_l+0x242>
 8007762:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8007764:	434e      	muls	r6, r1
 8007766:	960a      	str	r6, [sp, #40]	@ 0x28
 8007768:	e7e7      	b.n	800773a <_strtod_l+0x212>
 800776a:	2b10      	cmp	r3, #16
 800776c:	bfde      	ittt	le
 800776e:	9e08      	ldrle	r6, [sp, #32]
 8007770:	434e      	mulle	r6, r1
 8007772:	9608      	strle	r6, [sp, #32]
 8007774:	e7e1      	b.n	800773a <_strtod_l+0x212>
 8007776:	280f      	cmp	r0, #15
 8007778:	dceb      	bgt.n	8007752 <_strtod_l+0x22a>
 800777a:	230a      	movs	r3, #10
 800777c:	9808      	ldr	r0, [sp, #32]
 800777e:	fb03 2300 	mla	r3, r3, r0, r2
 8007782:	9308      	str	r3, [sp, #32]
 8007784:	e7e5      	b.n	8007752 <_strtod_l+0x22a>
 8007786:	4629      	mov	r1, r5
 8007788:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800778a:	460d      	mov	r5, r1
 800778c:	1c50      	adds	r0, r2, #1
 800778e:	9019      	str	r0, [sp, #100]	@ 0x64
 8007790:	7852      	ldrb	r2, [r2, #1]
 8007792:	4618      	mov	r0, r3
 8007794:	e7b1      	b.n	80076fa <_strtod_l+0x1d2>
 8007796:	f04f 0900 	mov.w	r9, #0
 800779a:	2301      	movs	r3, #1
 800779c:	e77d      	b.n	800769a <_strtod_l+0x172>
 800779e:	f04f 0c00 	mov.w	ip, #0
 80077a2:	1ca2      	adds	r2, r4, #2
 80077a4:	9219      	str	r2, [sp, #100]	@ 0x64
 80077a6:	78a2      	ldrb	r2, [r4, #2]
 80077a8:	e785      	b.n	80076b6 <_strtod_l+0x18e>
 80077aa:	f04f 0c01 	mov.w	ip, #1
 80077ae:	e7f8      	b.n	80077a2 <_strtod_l+0x27a>
 80077b0:	08009670 	.word	0x08009670
 80077b4:	7ff00000 	.word	0x7ff00000
 80077b8:	08009658 	.word	0x08009658
 80077bc:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80077be:	1c51      	adds	r1, r2, #1
 80077c0:	9119      	str	r1, [sp, #100]	@ 0x64
 80077c2:	7852      	ldrb	r2, [r2, #1]
 80077c4:	2a30      	cmp	r2, #48	@ 0x30
 80077c6:	d0f9      	beq.n	80077bc <_strtod_l+0x294>
 80077c8:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 80077cc:	2908      	cmp	r1, #8
 80077ce:	f63f af78 	bhi.w	80076c2 <_strtod_l+0x19a>
 80077d2:	f04f 080a 	mov.w	r8, #10
 80077d6:	3a30      	subs	r2, #48	@ 0x30
 80077d8:	920e      	str	r2, [sp, #56]	@ 0x38
 80077da:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80077dc:	920f      	str	r2, [sp, #60]	@ 0x3c
 80077de:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80077e0:	1c56      	adds	r6, r2, #1
 80077e2:	9619      	str	r6, [sp, #100]	@ 0x64
 80077e4:	7852      	ldrb	r2, [r2, #1]
 80077e6:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 80077ea:	f1be 0f09 	cmp.w	lr, #9
 80077ee:	d939      	bls.n	8007864 <_strtod_l+0x33c>
 80077f0:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80077f2:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 80077f6:	1a76      	subs	r6, r6, r1
 80077f8:	2e08      	cmp	r6, #8
 80077fa:	dc03      	bgt.n	8007804 <_strtod_l+0x2dc>
 80077fc:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80077fe:	4588      	cmp	r8, r1
 8007800:	bfa8      	it	ge
 8007802:	4688      	movge	r8, r1
 8007804:	f1bc 0f00 	cmp.w	ip, #0
 8007808:	d001      	beq.n	800780e <_strtod_l+0x2e6>
 800780a:	f1c8 0800 	rsb	r8, r8, #0
 800780e:	2d00      	cmp	r5, #0
 8007810:	d14e      	bne.n	80078b0 <_strtod_l+0x388>
 8007812:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007814:	4308      	orrs	r0, r1
 8007816:	f47f aec0 	bne.w	800759a <_strtod_l+0x72>
 800781a:	2b00      	cmp	r3, #0
 800781c:	f47f aed6 	bne.w	80075cc <_strtod_l+0xa4>
 8007820:	2a69      	cmp	r2, #105	@ 0x69
 8007822:	d028      	beq.n	8007876 <_strtod_l+0x34e>
 8007824:	dc25      	bgt.n	8007872 <_strtod_l+0x34a>
 8007826:	2a49      	cmp	r2, #73	@ 0x49
 8007828:	d025      	beq.n	8007876 <_strtod_l+0x34e>
 800782a:	2a4e      	cmp	r2, #78	@ 0x4e
 800782c:	f47f aece 	bne.w	80075cc <_strtod_l+0xa4>
 8007830:	499a      	ldr	r1, [pc, #616]	@ (8007a9c <_strtod_l+0x574>)
 8007832:	a819      	add	r0, sp, #100	@ 0x64
 8007834:	f001 f9de 	bl	8008bf4 <__match>
 8007838:	2800      	cmp	r0, #0
 800783a:	f43f aec7 	beq.w	80075cc <_strtod_l+0xa4>
 800783e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007840:	781b      	ldrb	r3, [r3, #0]
 8007842:	2b28      	cmp	r3, #40	@ 0x28
 8007844:	d12e      	bne.n	80078a4 <_strtod_l+0x37c>
 8007846:	4996      	ldr	r1, [pc, #600]	@ (8007aa0 <_strtod_l+0x578>)
 8007848:	aa1c      	add	r2, sp, #112	@ 0x70
 800784a:	a819      	add	r0, sp, #100	@ 0x64
 800784c:	f001 f9e6 	bl	8008c1c <__hexnan>
 8007850:	2805      	cmp	r0, #5
 8007852:	d127      	bne.n	80078a4 <_strtod_l+0x37c>
 8007854:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8007856:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800785a:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800785e:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8007862:	e69a      	b.n	800759a <_strtod_l+0x72>
 8007864:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8007866:	fb08 2101 	mla	r1, r8, r1, r2
 800786a:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800786e:	920e      	str	r2, [sp, #56]	@ 0x38
 8007870:	e7b5      	b.n	80077de <_strtod_l+0x2b6>
 8007872:	2a6e      	cmp	r2, #110	@ 0x6e
 8007874:	e7da      	b.n	800782c <_strtod_l+0x304>
 8007876:	498b      	ldr	r1, [pc, #556]	@ (8007aa4 <_strtod_l+0x57c>)
 8007878:	a819      	add	r0, sp, #100	@ 0x64
 800787a:	f001 f9bb 	bl	8008bf4 <__match>
 800787e:	2800      	cmp	r0, #0
 8007880:	f43f aea4 	beq.w	80075cc <_strtod_l+0xa4>
 8007884:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007886:	4988      	ldr	r1, [pc, #544]	@ (8007aa8 <_strtod_l+0x580>)
 8007888:	3b01      	subs	r3, #1
 800788a:	a819      	add	r0, sp, #100	@ 0x64
 800788c:	9319      	str	r3, [sp, #100]	@ 0x64
 800788e:	f001 f9b1 	bl	8008bf4 <__match>
 8007892:	b910      	cbnz	r0, 800789a <_strtod_l+0x372>
 8007894:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007896:	3301      	adds	r3, #1
 8007898:	9319      	str	r3, [sp, #100]	@ 0x64
 800789a:	f04f 0a00 	mov.w	sl, #0
 800789e:	f8df b20c 	ldr.w	fp, [pc, #524]	@ 8007aac <_strtod_l+0x584>
 80078a2:	e67a      	b.n	800759a <_strtod_l+0x72>
 80078a4:	4882      	ldr	r0, [pc, #520]	@ (8007ab0 <_strtod_l+0x588>)
 80078a6:	f000 fee3 	bl	8008670 <nan>
 80078aa:	4682      	mov	sl, r0
 80078ac:	468b      	mov	fp, r1
 80078ae:	e674      	b.n	800759a <_strtod_l+0x72>
 80078b0:	eba8 0309 	sub.w	r3, r8, r9
 80078b4:	2f00      	cmp	r7, #0
 80078b6:	bf08      	it	eq
 80078b8:	462f      	moveq	r7, r5
 80078ba:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80078bc:	2d10      	cmp	r5, #16
 80078be:	462c      	mov	r4, r5
 80078c0:	9309      	str	r3, [sp, #36]	@ 0x24
 80078c2:	bfa8      	it	ge
 80078c4:	2410      	movge	r4, #16
 80078c6:	f7f8 fe41 	bl	800054c <__aeabi_ui2d>
 80078ca:	2d09      	cmp	r5, #9
 80078cc:	4682      	mov	sl, r0
 80078ce:	468b      	mov	fp, r1
 80078d0:	dc11      	bgt.n	80078f6 <_strtod_l+0x3ce>
 80078d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	f43f ae60 	beq.w	800759a <_strtod_l+0x72>
 80078da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80078dc:	dd76      	ble.n	80079cc <_strtod_l+0x4a4>
 80078de:	2b16      	cmp	r3, #22
 80078e0:	dc5d      	bgt.n	800799e <_strtod_l+0x476>
 80078e2:	4974      	ldr	r1, [pc, #464]	@ (8007ab4 <_strtod_l+0x58c>)
 80078e4:	4652      	mov	r2, sl
 80078e6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80078ea:	465b      	mov	r3, fp
 80078ec:	e9d1 0100 	ldrd	r0, r1, [r1]
 80078f0:	f7f8 fea6 	bl	8000640 <__aeabi_dmul>
 80078f4:	e7d9      	b.n	80078aa <_strtod_l+0x382>
 80078f6:	4b6f      	ldr	r3, [pc, #444]	@ (8007ab4 <_strtod_l+0x58c>)
 80078f8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80078fc:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8007900:	f7f8 fe9e 	bl	8000640 <__aeabi_dmul>
 8007904:	4682      	mov	sl, r0
 8007906:	9808      	ldr	r0, [sp, #32]
 8007908:	468b      	mov	fp, r1
 800790a:	f7f8 fe1f 	bl	800054c <__aeabi_ui2d>
 800790e:	4602      	mov	r2, r0
 8007910:	460b      	mov	r3, r1
 8007912:	4650      	mov	r0, sl
 8007914:	4659      	mov	r1, fp
 8007916:	f7f8 fcdd 	bl	80002d4 <__adddf3>
 800791a:	2d0f      	cmp	r5, #15
 800791c:	4682      	mov	sl, r0
 800791e:	468b      	mov	fp, r1
 8007920:	ddd7      	ble.n	80078d2 <_strtod_l+0x3aa>
 8007922:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007924:	1b2c      	subs	r4, r5, r4
 8007926:	441c      	add	r4, r3
 8007928:	2c00      	cmp	r4, #0
 800792a:	f340 8096 	ble.w	8007a5a <_strtod_l+0x532>
 800792e:	f014 030f 	ands.w	r3, r4, #15
 8007932:	d00a      	beq.n	800794a <_strtod_l+0x422>
 8007934:	495f      	ldr	r1, [pc, #380]	@ (8007ab4 <_strtod_l+0x58c>)
 8007936:	4652      	mov	r2, sl
 8007938:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800793c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007940:	465b      	mov	r3, fp
 8007942:	f7f8 fe7d 	bl	8000640 <__aeabi_dmul>
 8007946:	4682      	mov	sl, r0
 8007948:	468b      	mov	fp, r1
 800794a:	f034 040f 	bics.w	r4, r4, #15
 800794e:	d073      	beq.n	8007a38 <_strtod_l+0x510>
 8007950:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8007954:	dd48      	ble.n	80079e8 <_strtod_l+0x4c0>
 8007956:	2400      	movs	r4, #0
 8007958:	46a0      	mov	r8, r4
 800795a:	46a1      	mov	r9, r4
 800795c:	940a      	str	r4, [sp, #40]	@ 0x28
 800795e:	2322      	movs	r3, #34	@ 0x22
 8007960:	f04f 0a00 	mov.w	sl, #0
 8007964:	9a05      	ldr	r2, [sp, #20]
 8007966:	f8df b144 	ldr.w	fp, [pc, #324]	@ 8007aac <_strtod_l+0x584>
 800796a:	6013      	str	r3, [r2, #0]
 800796c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800796e:	2b00      	cmp	r3, #0
 8007970:	f43f ae13 	beq.w	800759a <_strtod_l+0x72>
 8007974:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007976:	9805      	ldr	r0, [sp, #20]
 8007978:	f7ff f94c 	bl	8006c14 <_Bfree>
 800797c:	4649      	mov	r1, r9
 800797e:	9805      	ldr	r0, [sp, #20]
 8007980:	f7ff f948 	bl	8006c14 <_Bfree>
 8007984:	4641      	mov	r1, r8
 8007986:	9805      	ldr	r0, [sp, #20]
 8007988:	f7ff f944 	bl	8006c14 <_Bfree>
 800798c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800798e:	9805      	ldr	r0, [sp, #20]
 8007990:	f7ff f940 	bl	8006c14 <_Bfree>
 8007994:	4621      	mov	r1, r4
 8007996:	9805      	ldr	r0, [sp, #20]
 8007998:	f7ff f93c 	bl	8006c14 <_Bfree>
 800799c:	e5fd      	b.n	800759a <_strtod_l+0x72>
 800799e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80079a0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 80079a4:	4293      	cmp	r3, r2
 80079a6:	dbbc      	blt.n	8007922 <_strtod_l+0x3fa>
 80079a8:	4c42      	ldr	r4, [pc, #264]	@ (8007ab4 <_strtod_l+0x58c>)
 80079aa:	f1c5 050f 	rsb	r5, r5, #15
 80079ae:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80079b2:	4652      	mov	r2, sl
 80079b4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80079b8:	465b      	mov	r3, fp
 80079ba:	f7f8 fe41 	bl	8000640 <__aeabi_dmul>
 80079be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80079c0:	1b5d      	subs	r5, r3, r5
 80079c2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80079c6:	e9d4 2300 	ldrd	r2, r3, [r4]
 80079ca:	e791      	b.n	80078f0 <_strtod_l+0x3c8>
 80079cc:	3316      	adds	r3, #22
 80079ce:	dba8      	blt.n	8007922 <_strtod_l+0x3fa>
 80079d0:	4b38      	ldr	r3, [pc, #224]	@ (8007ab4 <_strtod_l+0x58c>)
 80079d2:	eba9 0808 	sub.w	r8, r9, r8
 80079d6:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 80079da:	4650      	mov	r0, sl
 80079dc:	e9d8 2300 	ldrd	r2, r3, [r8]
 80079e0:	4659      	mov	r1, fp
 80079e2:	f7f8 ff57 	bl	8000894 <__aeabi_ddiv>
 80079e6:	e760      	b.n	80078aa <_strtod_l+0x382>
 80079e8:	4b33      	ldr	r3, [pc, #204]	@ (8007ab8 <_strtod_l+0x590>)
 80079ea:	4650      	mov	r0, sl
 80079ec:	9308      	str	r3, [sp, #32]
 80079ee:	2300      	movs	r3, #0
 80079f0:	4659      	mov	r1, fp
 80079f2:	461e      	mov	r6, r3
 80079f4:	1124      	asrs	r4, r4, #4
 80079f6:	2c01      	cmp	r4, #1
 80079f8:	dc21      	bgt.n	8007a3e <_strtod_l+0x516>
 80079fa:	b10b      	cbz	r3, 8007a00 <_strtod_l+0x4d8>
 80079fc:	4682      	mov	sl, r0
 80079fe:	468b      	mov	fp, r1
 8007a00:	492d      	ldr	r1, [pc, #180]	@ (8007ab8 <_strtod_l+0x590>)
 8007a02:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8007a06:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8007a0a:	4652      	mov	r2, sl
 8007a0c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007a10:	465b      	mov	r3, fp
 8007a12:	f7f8 fe15 	bl	8000640 <__aeabi_dmul>
 8007a16:	4b25      	ldr	r3, [pc, #148]	@ (8007aac <_strtod_l+0x584>)
 8007a18:	460a      	mov	r2, r1
 8007a1a:	400b      	ands	r3, r1
 8007a1c:	4927      	ldr	r1, [pc, #156]	@ (8007abc <_strtod_l+0x594>)
 8007a1e:	4682      	mov	sl, r0
 8007a20:	428b      	cmp	r3, r1
 8007a22:	d898      	bhi.n	8007956 <_strtod_l+0x42e>
 8007a24:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8007a28:	428b      	cmp	r3, r1
 8007a2a:	bf86      	itte	hi
 8007a2c:	f04f 3aff 	movhi.w	sl, #4294967295
 8007a30:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 8007ac0 <_strtod_l+0x598>
 8007a34:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8007a38:	2300      	movs	r3, #0
 8007a3a:	9308      	str	r3, [sp, #32]
 8007a3c:	e07a      	b.n	8007b34 <_strtod_l+0x60c>
 8007a3e:	07e2      	lsls	r2, r4, #31
 8007a40:	d505      	bpl.n	8007a4e <_strtod_l+0x526>
 8007a42:	9b08      	ldr	r3, [sp, #32]
 8007a44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a48:	f7f8 fdfa 	bl	8000640 <__aeabi_dmul>
 8007a4c:	2301      	movs	r3, #1
 8007a4e:	9a08      	ldr	r2, [sp, #32]
 8007a50:	3601      	adds	r6, #1
 8007a52:	3208      	adds	r2, #8
 8007a54:	1064      	asrs	r4, r4, #1
 8007a56:	9208      	str	r2, [sp, #32]
 8007a58:	e7cd      	b.n	80079f6 <_strtod_l+0x4ce>
 8007a5a:	d0ed      	beq.n	8007a38 <_strtod_l+0x510>
 8007a5c:	4264      	negs	r4, r4
 8007a5e:	f014 020f 	ands.w	r2, r4, #15
 8007a62:	d00a      	beq.n	8007a7a <_strtod_l+0x552>
 8007a64:	4b13      	ldr	r3, [pc, #76]	@ (8007ab4 <_strtod_l+0x58c>)
 8007a66:	4650      	mov	r0, sl
 8007a68:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007a6c:	4659      	mov	r1, fp
 8007a6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a72:	f7f8 ff0f 	bl	8000894 <__aeabi_ddiv>
 8007a76:	4682      	mov	sl, r0
 8007a78:	468b      	mov	fp, r1
 8007a7a:	1124      	asrs	r4, r4, #4
 8007a7c:	d0dc      	beq.n	8007a38 <_strtod_l+0x510>
 8007a7e:	2c1f      	cmp	r4, #31
 8007a80:	dd20      	ble.n	8007ac4 <_strtod_l+0x59c>
 8007a82:	2400      	movs	r4, #0
 8007a84:	46a0      	mov	r8, r4
 8007a86:	46a1      	mov	r9, r4
 8007a88:	940a      	str	r4, [sp, #40]	@ 0x28
 8007a8a:	2322      	movs	r3, #34	@ 0x22
 8007a8c:	9a05      	ldr	r2, [sp, #20]
 8007a8e:	f04f 0a00 	mov.w	sl, #0
 8007a92:	f04f 0b00 	mov.w	fp, #0
 8007a96:	6013      	str	r3, [r2, #0]
 8007a98:	e768      	b.n	800796c <_strtod_l+0x444>
 8007a9a:	bf00      	nop
 8007a9c:	08009443 	.word	0x08009443
 8007aa0:	0800965c 	.word	0x0800965c
 8007aa4:	0800943b 	.word	0x0800943b
 8007aa8:	08009472 	.word	0x08009472
 8007aac:	7ff00000 	.word	0x7ff00000
 8007ab0:	08009805 	.word	0x08009805
 8007ab4:	08009590 	.word	0x08009590
 8007ab8:	08009568 	.word	0x08009568
 8007abc:	7ca00000 	.word	0x7ca00000
 8007ac0:	7fefffff 	.word	0x7fefffff
 8007ac4:	f014 0310 	ands.w	r3, r4, #16
 8007ac8:	bf18      	it	ne
 8007aca:	236a      	movne	r3, #106	@ 0x6a
 8007acc:	4650      	mov	r0, sl
 8007ace:	9308      	str	r3, [sp, #32]
 8007ad0:	4659      	mov	r1, fp
 8007ad2:	2300      	movs	r3, #0
 8007ad4:	4ea9      	ldr	r6, [pc, #676]	@ (8007d7c <_strtod_l+0x854>)
 8007ad6:	07e2      	lsls	r2, r4, #31
 8007ad8:	d504      	bpl.n	8007ae4 <_strtod_l+0x5bc>
 8007ada:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007ade:	f7f8 fdaf 	bl	8000640 <__aeabi_dmul>
 8007ae2:	2301      	movs	r3, #1
 8007ae4:	1064      	asrs	r4, r4, #1
 8007ae6:	f106 0608 	add.w	r6, r6, #8
 8007aea:	d1f4      	bne.n	8007ad6 <_strtod_l+0x5ae>
 8007aec:	b10b      	cbz	r3, 8007af2 <_strtod_l+0x5ca>
 8007aee:	4682      	mov	sl, r0
 8007af0:	468b      	mov	fp, r1
 8007af2:	9b08      	ldr	r3, [sp, #32]
 8007af4:	b1b3      	cbz	r3, 8007b24 <_strtod_l+0x5fc>
 8007af6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8007afa:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	4659      	mov	r1, fp
 8007b02:	dd0f      	ble.n	8007b24 <_strtod_l+0x5fc>
 8007b04:	2b1f      	cmp	r3, #31
 8007b06:	dd57      	ble.n	8007bb8 <_strtod_l+0x690>
 8007b08:	2b34      	cmp	r3, #52	@ 0x34
 8007b0a:	bfd8      	it	le
 8007b0c:	f04f 33ff 	movle.w	r3, #4294967295
 8007b10:	f04f 0a00 	mov.w	sl, #0
 8007b14:	bfcf      	iteee	gt
 8007b16:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8007b1a:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8007b1e:	4093      	lslle	r3, r2
 8007b20:	ea03 0b01 	andle.w	fp, r3, r1
 8007b24:	2200      	movs	r2, #0
 8007b26:	2300      	movs	r3, #0
 8007b28:	4650      	mov	r0, sl
 8007b2a:	4659      	mov	r1, fp
 8007b2c:	f7f8 fff0 	bl	8000b10 <__aeabi_dcmpeq>
 8007b30:	2800      	cmp	r0, #0
 8007b32:	d1a6      	bne.n	8007a82 <_strtod_l+0x55a>
 8007b34:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007b36:	463a      	mov	r2, r7
 8007b38:	9300      	str	r3, [sp, #0]
 8007b3a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8007b3c:	462b      	mov	r3, r5
 8007b3e:	9805      	ldr	r0, [sp, #20]
 8007b40:	f7ff f8d0 	bl	8006ce4 <__s2b>
 8007b44:	900a      	str	r0, [sp, #40]	@ 0x28
 8007b46:	2800      	cmp	r0, #0
 8007b48:	f43f af05 	beq.w	8007956 <_strtod_l+0x42e>
 8007b4c:	2400      	movs	r4, #0
 8007b4e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007b50:	eba9 0308 	sub.w	r3, r9, r8
 8007b54:	2a00      	cmp	r2, #0
 8007b56:	bfa8      	it	ge
 8007b58:	2300      	movge	r3, #0
 8007b5a:	46a0      	mov	r8, r4
 8007b5c:	9312      	str	r3, [sp, #72]	@ 0x48
 8007b5e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8007b62:	9316      	str	r3, [sp, #88]	@ 0x58
 8007b64:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007b66:	9805      	ldr	r0, [sp, #20]
 8007b68:	6859      	ldr	r1, [r3, #4]
 8007b6a:	f7ff f813 	bl	8006b94 <_Balloc>
 8007b6e:	4681      	mov	r9, r0
 8007b70:	2800      	cmp	r0, #0
 8007b72:	f43f aef4 	beq.w	800795e <_strtod_l+0x436>
 8007b76:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007b78:	300c      	adds	r0, #12
 8007b7a:	691a      	ldr	r2, [r3, #16]
 8007b7c:	f103 010c 	add.w	r1, r3, #12
 8007b80:	3202      	adds	r2, #2
 8007b82:	0092      	lsls	r2, r2, #2
 8007b84:	f000 fd66 	bl	8008654 <memcpy>
 8007b88:	ab1c      	add	r3, sp, #112	@ 0x70
 8007b8a:	9301      	str	r3, [sp, #4]
 8007b8c:	ab1b      	add	r3, sp, #108	@ 0x6c
 8007b8e:	9300      	str	r3, [sp, #0]
 8007b90:	4652      	mov	r2, sl
 8007b92:	465b      	mov	r3, fp
 8007b94:	9805      	ldr	r0, [sp, #20]
 8007b96:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8007b9a:	f7ff fbd5 	bl	8007348 <__d2b>
 8007b9e:	901a      	str	r0, [sp, #104]	@ 0x68
 8007ba0:	2800      	cmp	r0, #0
 8007ba2:	f43f aedc 	beq.w	800795e <_strtod_l+0x436>
 8007ba6:	2101      	movs	r1, #1
 8007ba8:	9805      	ldr	r0, [sp, #20]
 8007baa:	f7ff f931 	bl	8006e10 <__i2b>
 8007bae:	4680      	mov	r8, r0
 8007bb0:	b948      	cbnz	r0, 8007bc6 <_strtod_l+0x69e>
 8007bb2:	f04f 0800 	mov.w	r8, #0
 8007bb6:	e6d2      	b.n	800795e <_strtod_l+0x436>
 8007bb8:	f04f 32ff 	mov.w	r2, #4294967295
 8007bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8007bc0:	ea03 0a0a 	and.w	sl, r3, sl
 8007bc4:	e7ae      	b.n	8007b24 <_strtod_l+0x5fc>
 8007bc6:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8007bc8:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8007bca:	2d00      	cmp	r5, #0
 8007bcc:	bfab      	itete	ge
 8007bce:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8007bd0:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8007bd2:	18ef      	addge	r7, r5, r3
 8007bd4:	1b5e      	sublt	r6, r3, r5
 8007bd6:	9b08      	ldr	r3, [sp, #32]
 8007bd8:	bfa8      	it	ge
 8007bda:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8007bdc:	eba5 0503 	sub.w	r5, r5, r3
 8007be0:	4415      	add	r5, r2
 8007be2:	4b67      	ldr	r3, [pc, #412]	@ (8007d80 <_strtod_l+0x858>)
 8007be4:	f105 35ff 	add.w	r5, r5, #4294967295
 8007be8:	bfb8      	it	lt
 8007bea:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8007bec:	429d      	cmp	r5, r3
 8007bee:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8007bf2:	da50      	bge.n	8007c96 <_strtod_l+0x76e>
 8007bf4:	1b5b      	subs	r3, r3, r5
 8007bf6:	2b1f      	cmp	r3, #31
 8007bf8:	f04f 0101 	mov.w	r1, #1
 8007bfc:	eba2 0203 	sub.w	r2, r2, r3
 8007c00:	dc3d      	bgt.n	8007c7e <_strtod_l+0x756>
 8007c02:	fa01 f303 	lsl.w	r3, r1, r3
 8007c06:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007c08:	2300      	movs	r3, #0
 8007c0a:	9310      	str	r3, [sp, #64]	@ 0x40
 8007c0c:	18bd      	adds	r5, r7, r2
 8007c0e:	9b08      	ldr	r3, [sp, #32]
 8007c10:	42af      	cmp	r7, r5
 8007c12:	4416      	add	r6, r2
 8007c14:	441e      	add	r6, r3
 8007c16:	463b      	mov	r3, r7
 8007c18:	bfa8      	it	ge
 8007c1a:	462b      	movge	r3, r5
 8007c1c:	42b3      	cmp	r3, r6
 8007c1e:	bfa8      	it	ge
 8007c20:	4633      	movge	r3, r6
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	bfc2      	ittt	gt
 8007c26:	1aed      	subgt	r5, r5, r3
 8007c28:	1af6      	subgt	r6, r6, r3
 8007c2a:	1aff      	subgt	r7, r7, r3
 8007c2c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	dd16      	ble.n	8007c60 <_strtod_l+0x738>
 8007c32:	4641      	mov	r1, r8
 8007c34:	461a      	mov	r2, r3
 8007c36:	9805      	ldr	r0, [sp, #20]
 8007c38:	f7ff f9a8 	bl	8006f8c <__pow5mult>
 8007c3c:	4680      	mov	r8, r0
 8007c3e:	2800      	cmp	r0, #0
 8007c40:	d0b7      	beq.n	8007bb2 <_strtod_l+0x68a>
 8007c42:	4601      	mov	r1, r0
 8007c44:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8007c46:	9805      	ldr	r0, [sp, #20]
 8007c48:	f7ff f8f8 	bl	8006e3c <__multiply>
 8007c4c:	900e      	str	r0, [sp, #56]	@ 0x38
 8007c4e:	2800      	cmp	r0, #0
 8007c50:	f43f ae85 	beq.w	800795e <_strtod_l+0x436>
 8007c54:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007c56:	9805      	ldr	r0, [sp, #20]
 8007c58:	f7fe ffdc 	bl	8006c14 <_Bfree>
 8007c5c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007c5e:	931a      	str	r3, [sp, #104]	@ 0x68
 8007c60:	2d00      	cmp	r5, #0
 8007c62:	dc1d      	bgt.n	8007ca0 <_strtod_l+0x778>
 8007c64:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	dd23      	ble.n	8007cb2 <_strtod_l+0x78a>
 8007c6a:	4649      	mov	r1, r9
 8007c6c:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8007c6e:	9805      	ldr	r0, [sp, #20]
 8007c70:	f7ff f98c 	bl	8006f8c <__pow5mult>
 8007c74:	4681      	mov	r9, r0
 8007c76:	b9e0      	cbnz	r0, 8007cb2 <_strtod_l+0x78a>
 8007c78:	f04f 0900 	mov.w	r9, #0
 8007c7c:	e66f      	b.n	800795e <_strtod_l+0x436>
 8007c7e:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8007c82:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8007c86:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8007c8a:	35e2      	adds	r5, #226	@ 0xe2
 8007c8c:	fa01 f305 	lsl.w	r3, r1, r5
 8007c90:	9310      	str	r3, [sp, #64]	@ 0x40
 8007c92:	9113      	str	r1, [sp, #76]	@ 0x4c
 8007c94:	e7ba      	b.n	8007c0c <_strtod_l+0x6e4>
 8007c96:	2300      	movs	r3, #0
 8007c98:	9310      	str	r3, [sp, #64]	@ 0x40
 8007c9a:	2301      	movs	r3, #1
 8007c9c:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007c9e:	e7b5      	b.n	8007c0c <_strtod_l+0x6e4>
 8007ca0:	462a      	mov	r2, r5
 8007ca2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007ca4:	9805      	ldr	r0, [sp, #20]
 8007ca6:	f7ff f9cb 	bl	8007040 <__lshift>
 8007caa:	901a      	str	r0, [sp, #104]	@ 0x68
 8007cac:	2800      	cmp	r0, #0
 8007cae:	d1d9      	bne.n	8007c64 <_strtod_l+0x73c>
 8007cb0:	e655      	b.n	800795e <_strtod_l+0x436>
 8007cb2:	2e00      	cmp	r6, #0
 8007cb4:	dd07      	ble.n	8007cc6 <_strtod_l+0x79e>
 8007cb6:	4649      	mov	r1, r9
 8007cb8:	4632      	mov	r2, r6
 8007cba:	9805      	ldr	r0, [sp, #20]
 8007cbc:	f7ff f9c0 	bl	8007040 <__lshift>
 8007cc0:	4681      	mov	r9, r0
 8007cc2:	2800      	cmp	r0, #0
 8007cc4:	d0d8      	beq.n	8007c78 <_strtod_l+0x750>
 8007cc6:	2f00      	cmp	r7, #0
 8007cc8:	dd08      	ble.n	8007cdc <_strtod_l+0x7b4>
 8007cca:	4641      	mov	r1, r8
 8007ccc:	463a      	mov	r2, r7
 8007cce:	9805      	ldr	r0, [sp, #20]
 8007cd0:	f7ff f9b6 	bl	8007040 <__lshift>
 8007cd4:	4680      	mov	r8, r0
 8007cd6:	2800      	cmp	r0, #0
 8007cd8:	f43f ae41 	beq.w	800795e <_strtod_l+0x436>
 8007cdc:	464a      	mov	r2, r9
 8007cde:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007ce0:	9805      	ldr	r0, [sp, #20]
 8007ce2:	f7ff fa35 	bl	8007150 <__mdiff>
 8007ce6:	4604      	mov	r4, r0
 8007ce8:	2800      	cmp	r0, #0
 8007cea:	f43f ae38 	beq.w	800795e <_strtod_l+0x436>
 8007cee:	68c3      	ldr	r3, [r0, #12]
 8007cf0:	4641      	mov	r1, r8
 8007cf2:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007cf4:	2300      	movs	r3, #0
 8007cf6:	60c3      	str	r3, [r0, #12]
 8007cf8:	f7ff fa0e 	bl	8007118 <__mcmp>
 8007cfc:	2800      	cmp	r0, #0
 8007cfe:	da45      	bge.n	8007d8c <_strtod_l+0x864>
 8007d00:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007d02:	ea53 030a 	orrs.w	r3, r3, sl
 8007d06:	d16b      	bne.n	8007de0 <_strtod_l+0x8b8>
 8007d08:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d167      	bne.n	8007de0 <_strtod_l+0x8b8>
 8007d10:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007d14:	0d1b      	lsrs	r3, r3, #20
 8007d16:	051b      	lsls	r3, r3, #20
 8007d18:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8007d1c:	d960      	bls.n	8007de0 <_strtod_l+0x8b8>
 8007d1e:	6963      	ldr	r3, [r4, #20]
 8007d20:	b913      	cbnz	r3, 8007d28 <_strtod_l+0x800>
 8007d22:	6923      	ldr	r3, [r4, #16]
 8007d24:	2b01      	cmp	r3, #1
 8007d26:	dd5b      	ble.n	8007de0 <_strtod_l+0x8b8>
 8007d28:	4621      	mov	r1, r4
 8007d2a:	2201      	movs	r2, #1
 8007d2c:	9805      	ldr	r0, [sp, #20]
 8007d2e:	f7ff f987 	bl	8007040 <__lshift>
 8007d32:	4641      	mov	r1, r8
 8007d34:	4604      	mov	r4, r0
 8007d36:	f7ff f9ef 	bl	8007118 <__mcmp>
 8007d3a:	2800      	cmp	r0, #0
 8007d3c:	dd50      	ble.n	8007de0 <_strtod_l+0x8b8>
 8007d3e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007d42:	9a08      	ldr	r2, [sp, #32]
 8007d44:	0d1b      	lsrs	r3, r3, #20
 8007d46:	051b      	lsls	r3, r3, #20
 8007d48:	2a00      	cmp	r2, #0
 8007d4a:	d06a      	beq.n	8007e22 <_strtod_l+0x8fa>
 8007d4c:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8007d50:	d867      	bhi.n	8007e22 <_strtod_l+0x8fa>
 8007d52:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8007d56:	f67f ae98 	bls.w	8007a8a <_strtod_l+0x562>
 8007d5a:	4650      	mov	r0, sl
 8007d5c:	4659      	mov	r1, fp
 8007d5e:	4b09      	ldr	r3, [pc, #36]	@ (8007d84 <_strtod_l+0x85c>)
 8007d60:	2200      	movs	r2, #0
 8007d62:	f7f8 fc6d 	bl	8000640 <__aeabi_dmul>
 8007d66:	4b08      	ldr	r3, [pc, #32]	@ (8007d88 <_strtod_l+0x860>)
 8007d68:	4682      	mov	sl, r0
 8007d6a:	400b      	ands	r3, r1
 8007d6c:	468b      	mov	fp, r1
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	f47f ae00 	bne.w	8007974 <_strtod_l+0x44c>
 8007d74:	2322      	movs	r3, #34	@ 0x22
 8007d76:	9a05      	ldr	r2, [sp, #20]
 8007d78:	6013      	str	r3, [r2, #0]
 8007d7a:	e5fb      	b.n	8007974 <_strtod_l+0x44c>
 8007d7c:	08009688 	.word	0x08009688
 8007d80:	fffffc02 	.word	0xfffffc02
 8007d84:	39500000 	.word	0x39500000
 8007d88:	7ff00000 	.word	0x7ff00000
 8007d8c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8007d90:	d165      	bne.n	8007e5e <_strtod_l+0x936>
 8007d92:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8007d94:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007d98:	b35a      	cbz	r2, 8007df2 <_strtod_l+0x8ca>
 8007d9a:	4a99      	ldr	r2, [pc, #612]	@ (8008000 <_strtod_l+0xad8>)
 8007d9c:	4293      	cmp	r3, r2
 8007d9e:	d12b      	bne.n	8007df8 <_strtod_l+0x8d0>
 8007da0:	9b08      	ldr	r3, [sp, #32]
 8007da2:	4651      	mov	r1, sl
 8007da4:	b303      	cbz	r3, 8007de8 <_strtod_l+0x8c0>
 8007da6:	465a      	mov	r2, fp
 8007da8:	4b96      	ldr	r3, [pc, #600]	@ (8008004 <_strtod_l+0xadc>)
 8007daa:	4013      	ands	r3, r2
 8007dac:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8007db0:	f04f 32ff 	mov.w	r2, #4294967295
 8007db4:	d81b      	bhi.n	8007dee <_strtod_l+0x8c6>
 8007db6:	0d1b      	lsrs	r3, r3, #20
 8007db8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8007dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8007dc0:	4299      	cmp	r1, r3
 8007dc2:	d119      	bne.n	8007df8 <_strtod_l+0x8d0>
 8007dc4:	4b90      	ldr	r3, [pc, #576]	@ (8008008 <_strtod_l+0xae0>)
 8007dc6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007dc8:	429a      	cmp	r2, r3
 8007dca:	d102      	bne.n	8007dd2 <_strtod_l+0x8aa>
 8007dcc:	3101      	adds	r1, #1
 8007dce:	f43f adc6 	beq.w	800795e <_strtod_l+0x436>
 8007dd2:	f04f 0a00 	mov.w	sl, #0
 8007dd6:	4b8b      	ldr	r3, [pc, #556]	@ (8008004 <_strtod_l+0xadc>)
 8007dd8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007dda:	401a      	ands	r2, r3
 8007ddc:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8007de0:	9b08      	ldr	r3, [sp, #32]
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d1b9      	bne.n	8007d5a <_strtod_l+0x832>
 8007de6:	e5c5      	b.n	8007974 <_strtod_l+0x44c>
 8007de8:	f04f 33ff 	mov.w	r3, #4294967295
 8007dec:	e7e8      	b.n	8007dc0 <_strtod_l+0x898>
 8007dee:	4613      	mov	r3, r2
 8007df0:	e7e6      	b.n	8007dc0 <_strtod_l+0x898>
 8007df2:	ea53 030a 	orrs.w	r3, r3, sl
 8007df6:	d0a2      	beq.n	8007d3e <_strtod_l+0x816>
 8007df8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007dfa:	b1db      	cbz	r3, 8007e34 <_strtod_l+0x90c>
 8007dfc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007dfe:	4213      	tst	r3, r2
 8007e00:	d0ee      	beq.n	8007de0 <_strtod_l+0x8b8>
 8007e02:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007e04:	4650      	mov	r0, sl
 8007e06:	4659      	mov	r1, fp
 8007e08:	9a08      	ldr	r2, [sp, #32]
 8007e0a:	b1bb      	cbz	r3, 8007e3c <_strtod_l+0x914>
 8007e0c:	f7ff fb68 	bl	80074e0 <sulp>
 8007e10:	4602      	mov	r2, r0
 8007e12:	460b      	mov	r3, r1
 8007e14:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007e18:	f7f8 fa5c 	bl	80002d4 <__adddf3>
 8007e1c:	4682      	mov	sl, r0
 8007e1e:	468b      	mov	fp, r1
 8007e20:	e7de      	b.n	8007de0 <_strtod_l+0x8b8>
 8007e22:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8007e26:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8007e2a:	f04f 3aff 	mov.w	sl, #4294967295
 8007e2e:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8007e32:	e7d5      	b.n	8007de0 <_strtod_l+0x8b8>
 8007e34:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007e36:	ea13 0f0a 	tst.w	r3, sl
 8007e3a:	e7e1      	b.n	8007e00 <_strtod_l+0x8d8>
 8007e3c:	f7ff fb50 	bl	80074e0 <sulp>
 8007e40:	4602      	mov	r2, r0
 8007e42:	460b      	mov	r3, r1
 8007e44:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007e48:	f7f8 fa42 	bl	80002d0 <__aeabi_dsub>
 8007e4c:	2200      	movs	r2, #0
 8007e4e:	2300      	movs	r3, #0
 8007e50:	4682      	mov	sl, r0
 8007e52:	468b      	mov	fp, r1
 8007e54:	f7f8 fe5c 	bl	8000b10 <__aeabi_dcmpeq>
 8007e58:	2800      	cmp	r0, #0
 8007e5a:	d0c1      	beq.n	8007de0 <_strtod_l+0x8b8>
 8007e5c:	e615      	b.n	8007a8a <_strtod_l+0x562>
 8007e5e:	4641      	mov	r1, r8
 8007e60:	4620      	mov	r0, r4
 8007e62:	f7ff fac9 	bl	80073f8 <__ratio>
 8007e66:	2200      	movs	r2, #0
 8007e68:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8007e6c:	4606      	mov	r6, r0
 8007e6e:	460f      	mov	r7, r1
 8007e70:	f7f8 fe62 	bl	8000b38 <__aeabi_dcmple>
 8007e74:	2800      	cmp	r0, #0
 8007e76:	d06d      	beq.n	8007f54 <_strtod_l+0xa2c>
 8007e78:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d178      	bne.n	8007f70 <_strtod_l+0xa48>
 8007e7e:	f1ba 0f00 	cmp.w	sl, #0
 8007e82:	d156      	bne.n	8007f32 <_strtod_l+0xa0a>
 8007e84:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007e86:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d158      	bne.n	8007f40 <_strtod_l+0xa18>
 8007e8e:	2200      	movs	r2, #0
 8007e90:	4630      	mov	r0, r6
 8007e92:	4639      	mov	r1, r7
 8007e94:	4b5d      	ldr	r3, [pc, #372]	@ (800800c <_strtod_l+0xae4>)
 8007e96:	f7f8 fe45 	bl	8000b24 <__aeabi_dcmplt>
 8007e9a:	2800      	cmp	r0, #0
 8007e9c:	d157      	bne.n	8007f4e <_strtod_l+0xa26>
 8007e9e:	4630      	mov	r0, r6
 8007ea0:	4639      	mov	r1, r7
 8007ea2:	2200      	movs	r2, #0
 8007ea4:	4b5a      	ldr	r3, [pc, #360]	@ (8008010 <_strtod_l+0xae8>)
 8007ea6:	f7f8 fbcb 	bl	8000640 <__aeabi_dmul>
 8007eaa:	4606      	mov	r6, r0
 8007eac:	460f      	mov	r7, r1
 8007eae:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8007eb2:	9606      	str	r6, [sp, #24]
 8007eb4:	9307      	str	r3, [sp, #28]
 8007eb6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007eba:	4d52      	ldr	r5, [pc, #328]	@ (8008004 <_strtod_l+0xadc>)
 8007ebc:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8007ec0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007ec2:	401d      	ands	r5, r3
 8007ec4:	4b53      	ldr	r3, [pc, #332]	@ (8008014 <_strtod_l+0xaec>)
 8007ec6:	429d      	cmp	r5, r3
 8007ec8:	f040 80aa 	bne.w	8008020 <_strtod_l+0xaf8>
 8007ecc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007ece:	4650      	mov	r0, sl
 8007ed0:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8007ed4:	4659      	mov	r1, fp
 8007ed6:	f7ff f9cf 	bl	8007278 <__ulp>
 8007eda:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007ede:	f7f8 fbaf 	bl	8000640 <__aeabi_dmul>
 8007ee2:	4652      	mov	r2, sl
 8007ee4:	465b      	mov	r3, fp
 8007ee6:	f7f8 f9f5 	bl	80002d4 <__adddf3>
 8007eea:	460b      	mov	r3, r1
 8007eec:	4945      	ldr	r1, [pc, #276]	@ (8008004 <_strtod_l+0xadc>)
 8007eee:	4a4a      	ldr	r2, [pc, #296]	@ (8008018 <_strtod_l+0xaf0>)
 8007ef0:	4019      	ands	r1, r3
 8007ef2:	4291      	cmp	r1, r2
 8007ef4:	4682      	mov	sl, r0
 8007ef6:	d942      	bls.n	8007f7e <_strtod_l+0xa56>
 8007ef8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007efa:	4b43      	ldr	r3, [pc, #268]	@ (8008008 <_strtod_l+0xae0>)
 8007efc:	429a      	cmp	r2, r3
 8007efe:	d103      	bne.n	8007f08 <_strtod_l+0x9e0>
 8007f00:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007f02:	3301      	adds	r3, #1
 8007f04:	f43f ad2b 	beq.w	800795e <_strtod_l+0x436>
 8007f08:	f04f 3aff 	mov.w	sl, #4294967295
 8007f0c:	f8df b0f8 	ldr.w	fp, [pc, #248]	@ 8008008 <_strtod_l+0xae0>
 8007f10:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007f12:	9805      	ldr	r0, [sp, #20]
 8007f14:	f7fe fe7e 	bl	8006c14 <_Bfree>
 8007f18:	4649      	mov	r1, r9
 8007f1a:	9805      	ldr	r0, [sp, #20]
 8007f1c:	f7fe fe7a 	bl	8006c14 <_Bfree>
 8007f20:	4641      	mov	r1, r8
 8007f22:	9805      	ldr	r0, [sp, #20]
 8007f24:	f7fe fe76 	bl	8006c14 <_Bfree>
 8007f28:	4621      	mov	r1, r4
 8007f2a:	9805      	ldr	r0, [sp, #20]
 8007f2c:	f7fe fe72 	bl	8006c14 <_Bfree>
 8007f30:	e618      	b.n	8007b64 <_strtod_l+0x63c>
 8007f32:	f1ba 0f01 	cmp.w	sl, #1
 8007f36:	d103      	bne.n	8007f40 <_strtod_l+0xa18>
 8007f38:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	f43f ada5 	beq.w	8007a8a <_strtod_l+0x562>
 8007f40:	2200      	movs	r2, #0
 8007f42:	4b36      	ldr	r3, [pc, #216]	@ (800801c <_strtod_l+0xaf4>)
 8007f44:	2600      	movs	r6, #0
 8007f46:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007f4a:	4f30      	ldr	r7, [pc, #192]	@ (800800c <_strtod_l+0xae4>)
 8007f4c:	e7b3      	b.n	8007eb6 <_strtod_l+0x98e>
 8007f4e:	2600      	movs	r6, #0
 8007f50:	4f2f      	ldr	r7, [pc, #188]	@ (8008010 <_strtod_l+0xae8>)
 8007f52:	e7ac      	b.n	8007eae <_strtod_l+0x986>
 8007f54:	4630      	mov	r0, r6
 8007f56:	4639      	mov	r1, r7
 8007f58:	4b2d      	ldr	r3, [pc, #180]	@ (8008010 <_strtod_l+0xae8>)
 8007f5a:	2200      	movs	r2, #0
 8007f5c:	f7f8 fb70 	bl	8000640 <__aeabi_dmul>
 8007f60:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007f62:	4606      	mov	r6, r0
 8007f64:	460f      	mov	r7, r1
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d0a1      	beq.n	8007eae <_strtod_l+0x986>
 8007f6a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8007f6e:	e7a2      	b.n	8007eb6 <_strtod_l+0x98e>
 8007f70:	2200      	movs	r2, #0
 8007f72:	4b26      	ldr	r3, [pc, #152]	@ (800800c <_strtod_l+0xae4>)
 8007f74:	4616      	mov	r6, r2
 8007f76:	461f      	mov	r7, r3
 8007f78:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007f7c:	e79b      	b.n	8007eb6 <_strtod_l+0x98e>
 8007f7e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8007f82:	9b08      	ldr	r3, [sp, #32]
 8007f84:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d1c1      	bne.n	8007f10 <_strtod_l+0x9e8>
 8007f8c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007f90:	0d1b      	lsrs	r3, r3, #20
 8007f92:	051b      	lsls	r3, r3, #20
 8007f94:	429d      	cmp	r5, r3
 8007f96:	d1bb      	bne.n	8007f10 <_strtod_l+0x9e8>
 8007f98:	4630      	mov	r0, r6
 8007f9a:	4639      	mov	r1, r7
 8007f9c:	f7f8 ff0e 	bl	8000dbc <__aeabi_d2lz>
 8007fa0:	f7f8 fb20 	bl	80005e4 <__aeabi_l2d>
 8007fa4:	4602      	mov	r2, r0
 8007fa6:	460b      	mov	r3, r1
 8007fa8:	4630      	mov	r0, r6
 8007faa:	4639      	mov	r1, r7
 8007fac:	f7f8 f990 	bl	80002d0 <__aeabi_dsub>
 8007fb0:	460b      	mov	r3, r1
 8007fb2:	4602      	mov	r2, r0
 8007fb4:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8007fb8:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8007fbc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007fbe:	ea46 060a 	orr.w	r6, r6, sl
 8007fc2:	431e      	orrs	r6, r3
 8007fc4:	d069      	beq.n	800809a <_strtod_l+0xb72>
 8007fc6:	a30a      	add	r3, pc, #40	@ (adr r3, 8007ff0 <_strtod_l+0xac8>)
 8007fc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fcc:	f7f8 fdaa 	bl	8000b24 <__aeabi_dcmplt>
 8007fd0:	2800      	cmp	r0, #0
 8007fd2:	f47f accf 	bne.w	8007974 <_strtod_l+0x44c>
 8007fd6:	a308      	add	r3, pc, #32	@ (adr r3, 8007ff8 <_strtod_l+0xad0>)
 8007fd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fdc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007fe0:	f7f8 fdbe 	bl	8000b60 <__aeabi_dcmpgt>
 8007fe4:	2800      	cmp	r0, #0
 8007fe6:	d093      	beq.n	8007f10 <_strtod_l+0x9e8>
 8007fe8:	e4c4      	b.n	8007974 <_strtod_l+0x44c>
 8007fea:	bf00      	nop
 8007fec:	f3af 8000 	nop.w
 8007ff0:	94a03595 	.word	0x94a03595
 8007ff4:	3fdfffff 	.word	0x3fdfffff
 8007ff8:	35afe535 	.word	0x35afe535
 8007ffc:	3fe00000 	.word	0x3fe00000
 8008000:	000fffff 	.word	0x000fffff
 8008004:	7ff00000 	.word	0x7ff00000
 8008008:	7fefffff 	.word	0x7fefffff
 800800c:	3ff00000 	.word	0x3ff00000
 8008010:	3fe00000 	.word	0x3fe00000
 8008014:	7fe00000 	.word	0x7fe00000
 8008018:	7c9fffff 	.word	0x7c9fffff
 800801c:	bff00000 	.word	0xbff00000
 8008020:	9b08      	ldr	r3, [sp, #32]
 8008022:	b323      	cbz	r3, 800806e <_strtod_l+0xb46>
 8008024:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8008028:	d821      	bhi.n	800806e <_strtod_l+0xb46>
 800802a:	a327      	add	r3, pc, #156	@ (adr r3, 80080c8 <_strtod_l+0xba0>)
 800802c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008030:	4630      	mov	r0, r6
 8008032:	4639      	mov	r1, r7
 8008034:	f7f8 fd80 	bl	8000b38 <__aeabi_dcmple>
 8008038:	b1a0      	cbz	r0, 8008064 <_strtod_l+0xb3c>
 800803a:	4639      	mov	r1, r7
 800803c:	4630      	mov	r0, r6
 800803e:	f7f8 fdd7 	bl	8000bf0 <__aeabi_d2uiz>
 8008042:	2801      	cmp	r0, #1
 8008044:	bf38      	it	cc
 8008046:	2001      	movcc	r0, #1
 8008048:	f7f8 fa80 	bl	800054c <__aeabi_ui2d>
 800804c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800804e:	4606      	mov	r6, r0
 8008050:	460f      	mov	r7, r1
 8008052:	b9fb      	cbnz	r3, 8008094 <_strtod_l+0xb6c>
 8008054:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008058:	9014      	str	r0, [sp, #80]	@ 0x50
 800805a:	9315      	str	r3, [sp, #84]	@ 0x54
 800805c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8008060:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8008064:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008066:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800806a:	1b5b      	subs	r3, r3, r5
 800806c:	9311      	str	r3, [sp, #68]	@ 0x44
 800806e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008072:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8008076:	f7ff f8ff 	bl	8007278 <__ulp>
 800807a:	4602      	mov	r2, r0
 800807c:	460b      	mov	r3, r1
 800807e:	4650      	mov	r0, sl
 8008080:	4659      	mov	r1, fp
 8008082:	f7f8 fadd 	bl	8000640 <__aeabi_dmul>
 8008086:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800808a:	f7f8 f923 	bl	80002d4 <__adddf3>
 800808e:	4682      	mov	sl, r0
 8008090:	468b      	mov	fp, r1
 8008092:	e776      	b.n	8007f82 <_strtod_l+0xa5a>
 8008094:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8008098:	e7e0      	b.n	800805c <_strtod_l+0xb34>
 800809a:	a30d      	add	r3, pc, #52	@ (adr r3, 80080d0 <_strtod_l+0xba8>)
 800809c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080a0:	f7f8 fd40 	bl	8000b24 <__aeabi_dcmplt>
 80080a4:	e79e      	b.n	8007fe4 <_strtod_l+0xabc>
 80080a6:	2300      	movs	r3, #0
 80080a8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80080aa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80080ac:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 80080ae:	6013      	str	r3, [r2, #0]
 80080b0:	f7ff ba77 	b.w	80075a2 <_strtod_l+0x7a>
 80080b4:	2a65      	cmp	r2, #101	@ 0x65
 80080b6:	f43f ab6e 	beq.w	8007796 <_strtod_l+0x26e>
 80080ba:	2a45      	cmp	r2, #69	@ 0x45
 80080bc:	f43f ab6b 	beq.w	8007796 <_strtod_l+0x26e>
 80080c0:	2301      	movs	r3, #1
 80080c2:	f7ff bba6 	b.w	8007812 <_strtod_l+0x2ea>
 80080c6:	bf00      	nop
 80080c8:	ffc00000 	.word	0xffc00000
 80080cc:	41dfffff 	.word	0x41dfffff
 80080d0:	94a03595 	.word	0x94a03595
 80080d4:	3fcfffff 	.word	0x3fcfffff

080080d8 <_strtod_r>:
 80080d8:	4b01      	ldr	r3, [pc, #4]	@ (80080e0 <_strtod_r+0x8>)
 80080da:	f7ff ba25 	b.w	8007528 <_strtod_l>
 80080de:	bf00      	nop
 80080e0:	20000070 	.word	0x20000070

080080e4 <_strtol_l.constprop.0>:
 80080e4:	2b24      	cmp	r3, #36	@ 0x24
 80080e6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80080ea:	4686      	mov	lr, r0
 80080ec:	4690      	mov	r8, r2
 80080ee:	d801      	bhi.n	80080f4 <_strtol_l.constprop.0+0x10>
 80080f0:	2b01      	cmp	r3, #1
 80080f2:	d106      	bne.n	8008102 <_strtol_l.constprop.0+0x1e>
 80080f4:	f7fd fdbe 	bl	8005c74 <__errno>
 80080f8:	2316      	movs	r3, #22
 80080fa:	6003      	str	r3, [r0, #0]
 80080fc:	2000      	movs	r0, #0
 80080fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008102:	460d      	mov	r5, r1
 8008104:	4833      	ldr	r0, [pc, #204]	@ (80081d4 <_strtol_l.constprop.0+0xf0>)
 8008106:	462a      	mov	r2, r5
 8008108:	f815 4b01 	ldrb.w	r4, [r5], #1
 800810c:	5d06      	ldrb	r6, [r0, r4]
 800810e:	f016 0608 	ands.w	r6, r6, #8
 8008112:	d1f8      	bne.n	8008106 <_strtol_l.constprop.0+0x22>
 8008114:	2c2d      	cmp	r4, #45	@ 0x2d
 8008116:	d12d      	bne.n	8008174 <_strtol_l.constprop.0+0x90>
 8008118:	2601      	movs	r6, #1
 800811a:	782c      	ldrb	r4, [r5, #0]
 800811c:	1c95      	adds	r5, r2, #2
 800811e:	f033 0210 	bics.w	r2, r3, #16
 8008122:	d109      	bne.n	8008138 <_strtol_l.constprop.0+0x54>
 8008124:	2c30      	cmp	r4, #48	@ 0x30
 8008126:	d12a      	bne.n	800817e <_strtol_l.constprop.0+0x9a>
 8008128:	782a      	ldrb	r2, [r5, #0]
 800812a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800812e:	2a58      	cmp	r2, #88	@ 0x58
 8008130:	d125      	bne.n	800817e <_strtol_l.constprop.0+0x9a>
 8008132:	2310      	movs	r3, #16
 8008134:	786c      	ldrb	r4, [r5, #1]
 8008136:	3502      	adds	r5, #2
 8008138:	2200      	movs	r2, #0
 800813a:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800813e:	f10c 3cff 	add.w	ip, ip, #4294967295
 8008142:	fbbc f9f3 	udiv	r9, ip, r3
 8008146:	4610      	mov	r0, r2
 8008148:	fb03 ca19 	mls	sl, r3, r9, ip
 800814c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8008150:	2f09      	cmp	r7, #9
 8008152:	d81b      	bhi.n	800818c <_strtol_l.constprop.0+0xa8>
 8008154:	463c      	mov	r4, r7
 8008156:	42a3      	cmp	r3, r4
 8008158:	dd27      	ble.n	80081aa <_strtol_l.constprop.0+0xc6>
 800815a:	1c57      	adds	r7, r2, #1
 800815c:	d007      	beq.n	800816e <_strtol_l.constprop.0+0x8a>
 800815e:	4581      	cmp	r9, r0
 8008160:	d320      	bcc.n	80081a4 <_strtol_l.constprop.0+0xc0>
 8008162:	d101      	bne.n	8008168 <_strtol_l.constprop.0+0x84>
 8008164:	45a2      	cmp	sl, r4
 8008166:	db1d      	blt.n	80081a4 <_strtol_l.constprop.0+0xc0>
 8008168:	2201      	movs	r2, #1
 800816a:	fb00 4003 	mla	r0, r0, r3, r4
 800816e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008172:	e7eb      	b.n	800814c <_strtol_l.constprop.0+0x68>
 8008174:	2c2b      	cmp	r4, #43	@ 0x2b
 8008176:	bf04      	itt	eq
 8008178:	782c      	ldrbeq	r4, [r5, #0]
 800817a:	1c95      	addeq	r5, r2, #2
 800817c:	e7cf      	b.n	800811e <_strtol_l.constprop.0+0x3a>
 800817e:	2b00      	cmp	r3, #0
 8008180:	d1da      	bne.n	8008138 <_strtol_l.constprop.0+0x54>
 8008182:	2c30      	cmp	r4, #48	@ 0x30
 8008184:	bf0c      	ite	eq
 8008186:	2308      	moveq	r3, #8
 8008188:	230a      	movne	r3, #10
 800818a:	e7d5      	b.n	8008138 <_strtol_l.constprop.0+0x54>
 800818c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8008190:	2f19      	cmp	r7, #25
 8008192:	d801      	bhi.n	8008198 <_strtol_l.constprop.0+0xb4>
 8008194:	3c37      	subs	r4, #55	@ 0x37
 8008196:	e7de      	b.n	8008156 <_strtol_l.constprop.0+0x72>
 8008198:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800819c:	2f19      	cmp	r7, #25
 800819e:	d804      	bhi.n	80081aa <_strtol_l.constprop.0+0xc6>
 80081a0:	3c57      	subs	r4, #87	@ 0x57
 80081a2:	e7d8      	b.n	8008156 <_strtol_l.constprop.0+0x72>
 80081a4:	f04f 32ff 	mov.w	r2, #4294967295
 80081a8:	e7e1      	b.n	800816e <_strtol_l.constprop.0+0x8a>
 80081aa:	1c53      	adds	r3, r2, #1
 80081ac:	d108      	bne.n	80081c0 <_strtol_l.constprop.0+0xdc>
 80081ae:	2322      	movs	r3, #34	@ 0x22
 80081b0:	4660      	mov	r0, ip
 80081b2:	f8ce 3000 	str.w	r3, [lr]
 80081b6:	f1b8 0f00 	cmp.w	r8, #0
 80081ba:	d0a0      	beq.n	80080fe <_strtol_l.constprop.0+0x1a>
 80081bc:	1e69      	subs	r1, r5, #1
 80081be:	e006      	b.n	80081ce <_strtol_l.constprop.0+0xea>
 80081c0:	b106      	cbz	r6, 80081c4 <_strtol_l.constprop.0+0xe0>
 80081c2:	4240      	negs	r0, r0
 80081c4:	f1b8 0f00 	cmp.w	r8, #0
 80081c8:	d099      	beq.n	80080fe <_strtol_l.constprop.0+0x1a>
 80081ca:	2a00      	cmp	r2, #0
 80081cc:	d1f6      	bne.n	80081bc <_strtol_l.constprop.0+0xd8>
 80081ce:	f8c8 1000 	str.w	r1, [r8]
 80081d2:	e794      	b.n	80080fe <_strtol_l.constprop.0+0x1a>
 80081d4:	080096b1 	.word	0x080096b1

080081d8 <_strtol_r>:
 80081d8:	f7ff bf84 	b.w	80080e4 <_strtol_l.constprop.0>

080081dc <__ssputs_r>:
 80081dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80081e0:	461f      	mov	r7, r3
 80081e2:	688e      	ldr	r6, [r1, #8]
 80081e4:	4682      	mov	sl, r0
 80081e6:	42be      	cmp	r6, r7
 80081e8:	460c      	mov	r4, r1
 80081ea:	4690      	mov	r8, r2
 80081ec:	680b      	ldr	r3, [r1, #0]
 80081ee:	d82d      	bhi.n	800824c <__ssputs_r+0x70>
 80081f0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80081f4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80081f8:	d026      	beq.n	8008248 <__ssputs_r+0x6c>
 80081fa:	6965      	ldr	r5, [r4, #20]
 80081fc:	6909      	ldr	r1, [r1, #16]
 80081fe:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008202:	eba3 0901 	sub.w	r9, r3, r1
 8008206:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800820a:	1c7b      	adds	r3, r7, #1
 800820c:	444b      	add	r3, r9
 800820e:	106d      	asrs	r5, r5, #1
 8008210:	429d      	cmp	r5, r3
 8008212:	bf38      	it	cc
 8008214:	461d      	movcc	r5, r3
 8008216:	0553      	lsls	r3, r2, #21
 8008218:	d527      	bpl.n	800826a <__ssputs_r+0x8e>
 800821a:	4629      	mov	r1, r5
 800821c:	f7fe fc2e 	bl	8006a7c <_malloc_r>
 8008220:	4606      	mov	r6, r0
 8008222:	b360      	cbz	r0, 800827e <__ssputs_r+0xa2>
 8008224:	464a      	mov	r2, r9
 8008226:	6921      	ldr	r1, [r4, #16]
 8008228:	f000 fa14 	bl	8008654 <memcpy>
 800822c:	89a3      	ldrh	r3, [r4, #12]
 800822e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008232:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008236:	81a3      	strh	r3, [r4, #12]
 8008238:	6126      	str	r6, [r4, #16]
 800823a:	444e      	add	r6, r9
 800823c:	6026      	str	r6, [r4, #0]
 800823e:	463e      	mov	r6, r7
 8008240:	6165      	str	r5, [r4, #20]
 8008242:	eba5 0509 	sub.w	r5, r5, r9
 8008246:	60a5      	str	r5, [r4, #8]
 8008248:	42be      	cmp	r6, r7
 800824a:	d900      	bls.n	800824e <__ssputs_r+0x72>
 800824c:	463e      	mov	r6, r7
 800824e:	4632      	mov	r2, r6
 8008250:	4641      	mov	r1, r8
 8008252:	6820      	ldr	r0, [r4, #0]
 8008254:	f000 f9c2 	bl	80085dc <memmove>
 8008258:	2000      	movs	r0, #0
 800825a:	68a3      	ldr	r3, [r4, #8]
 800825c:	1b9b      	subs	r3, r3, r6
 800825e:	60a3      	str	r3, [r4, #8]
 8008260:	6823      	ldr	r3, [r4, #0]
 8008262:	4433      	add	r3, r6
 8008264:	6023      	str	r3, [r4, #0]
 8008266:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800826a:	462a      	mov	r2, r5
 800826c:	f000 fd83 	bl	8008d76 <_realloc_r>
 8008270:	4606      	mov	r6, r0
 8008272:	2800      	cmp	r0, #0
 8008274:	d1e0      	bne.n	8008238 <__ssputs_r+0x5c>
 8008276:	4650      	mov	r0, sl
 8008278:	6921      	ldr	r1, [r4, #16]
 800827a:	f7fe fb8d 	bl	8006998 <_free_r>
 800827e:	230c      	movs	r3, #12
 8008280:	f8ca 3000 	str.w	r3, [sl]
 8008284:	89a3      	ldrh	r3, [r4, #12]
 8008286:	f04f 30ff 	mov.w	r0, #4294967295
 800828a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800828e:	81a3      	strh	r3, [r4, #12]
 8008290:	e7e9      	b.n	8008266 <__ssputs_r+0x8a>
	...

08008294 <_svfiprintf_r>:
 8008294:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008298:	4698      	mov	r8, r3
 800829a:	898b      	ldrh	r3, [r1, #12]
 800829c:	4607      	mov	r7, r0
 800829e:	061b      	lsls	r3, r3, #24
 80082a0:	460d      	mov	r5, r1
 80082a2:	4614      	mov	r4, r2
 80082a4:	b09d      	sub	sp, #116	@ 0x74
 80082a6:	d510      	bpl.n	80082ca <_svfiprintf_r+0x36>
 80082a8:	690b      	ldr	r3, [r1, #16]
 80082aa:	b973      	cbnz	r3, 80082ca <_svfiprintf_r+0x36>
 80082ac:	2140      	movs	r1, #64	@ 0x40
 80082ae:	f7fe fbe5 	bl	8006a7c <_malloc_r>
 80082b2:	6028      	str	r0, [r5, #0]
 80082b4:	6128      	str	r0, [r5, #16]
 80082b6:	b930      	cbnz	r0, 80082c6 <_svfiprintf_r+0x32>
 80082b8:	230c      	movs	r3, #12
 80082ba:	603b      	str	r3, [r7, #0]
 80082bc:	f04f 30ff 	mov.w	r0, #4294967295
 80082c0:	b01d      	add	sp, #116	@ 0x74
 80082c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082c6:	2340      	movs	r3, #64	@ 0x40
 80082c8:	616b      	str	r3, [r5, #20]
 80082ca:	2300      	movs	r3, #0
 80082cc:	9309      	str	r3, [sp, #36]	@ 0x24
 80082ce:	2320      	movs	r3, #32
 80082d0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80082d4:	2330      	movs	r3, #48	@ 0x30
 80082d6:	f04f 0901 	mov.w	r9, #1
 80082da:	f8cd 800c 	str.w	r8, [sp, #12]
 80082de:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8008478 <_svfiprintf_r+0x1e4>
 80082e2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80082e6:	4623      	mov	r3, r4
 80082e8:	469a      	mov	sl, r3
 80082ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80082ee:	b10a      	cbz	r2, 80082f4 <_svfiprintf_r+0x60>
 80082f0:	2a25      	cmp	r2, #37	@ 0x25
 80082f2:	d1f9      	bne.n	80082e8 <_svfiprintf_r+0x54>
 80082f4:	ebba 0b04 	subs.w	fp, sl, r4
 80082f8:	d00b      	beq.n	8008312 <_svfiprintf_r+0x7e>
 80082fa:	465b      	mov	r3, fp
 80082fc:	4622      	mov	r2, r4
 80082fe:	4629      	mov	r1, r5
 8008300:	4638      	mov	r0, r7
 8008302:	f7ff ff6b 	bl	80081dc <__ssputs_r>
 8008306:	3001      	adds	r0, #1
 8008308:	f000 80a7 	beq.w	800845a <_svfiprintf_r+0x1c6>
 800830c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800830e:	445a      	add	r2, fp
 8008310:	9209      	str	r2, [sp, #36]	@ 0x24
 8008312:	f89a 3000 	ldrb.w	r3, [sl]
 8008316:	2b00      	cmp	r3, #0
 8008318:	f000 809f 	beq.w	800845a <_svfiprintf_r+0x1c6>
 800831c:	2300      	movs	r3, #0
 800831e:	f04f 32ff 	mov.w	r2, #4294967295
 8008322:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008326:	f10a 0a01 	add.w	sl, sl, #1
 800832a:	9304      	str	r3, [sp, #16]
 800832c:	9307      	str	r3, [sp, #28]
 800832e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008332:	931a      	str	r3, [sp, #104]	@ 0x68
 8008334:	4654      	mov	r4, sl
 8008336:	2205      	movs	r2, #5
 8008338:	f814 1b01 	ldrb.w	r1, [r4], #1
 800833c:	484e      	ldr	r0, [pc, #312]	@ (8008478 <_svfiprintf_r+0x1e4>)
 800833e:	f7fd fcc6 	bl	8005cce <memchr>
 8008342:	9a04      	ldr	r2, [sp, #16]
 8008344:	b9d8      	cbnz	r0, 800837e <_svfiprintf_r+0xea>
 8008346:	06d0      	lsls	r0, r2, #27
 8008348:	bf44      	itt	mi
 800834a:	2320      	movmi	r3, #32
 800834c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008350:	0711      	lsls	r1, r2, #28
 8008352:	bf44      	itt	mi
 8008354:	232b      	movmi	r3, #43	@ 0x2b
 8008356:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800835a:	f89a 3000 	ldrb.w	r3, [sl]
 800835e:	2b2a      	cmp	r3, #42	@ 0x2a
 8008360:	d015      	beq.n	800838e <_svfiprintf_r+0xfa>
 8008362:	4654      	mov	r4, sl
 8008364:	2000      	movs	r0, #0
 8008366:	f04f 0c0a 	mov.w	ip, #10
 800836a:	9a07      	ldr	r2, [sp, #28]
 800836c:	4621      	mov	r1, r4
 800836e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008372:	3b30      	subs	r3, #48	@ 0x30
 8008374:	2b09      	cmp	r3, #9
 8008376:	d94b      	bls.n	8008410 <_svfiprintf_r+0x17c>
 8008378:	b1b0      	cbz	r0, 80083a8 <_svfiprintf_r+0x114>
 800837a:	9207      	str	r2, [sp, #28]
 800837c:	e014      	b.n	80083a8 <_svfiprintf_r+0x114>
 800837e:	eba0 0308 	sub.w	r3, r0, r8
 8008382:	fa09 f303 	lsl.w	r3, r9, r3
 8008386:	4313      	orrs	r3, r2
 8008388:	46a2      	mov	sl, r4
 800838a:	9304      	str	r3, [sp, #16]
 800838c:	e7d2      	b.n	8008334 <_svfiprintf_r+0xa0>
 800838e:	9b03      	ldr	r3, [sp, #12]
 8008390:	1d19      	adds	r1, r3, #4
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	9103      	str	r1, [sp, #12]
 8008396:	2b00      	cmp	r3, #0
 8008398:	bfbb      	ittet	lt
 800839a:	425b      	neglt	r3, r3
 800839c:	f042 0202 	orrlt.w	r2, r2, #2
 80083a0:	9307      	strge	r3, [sp, #28]
 80083a2:	9307      	strlt	r3, [sp, #28]
 80083a4:	bfb8      	it	lt
 80083a6:	9204      	strlt	r2, [sp, #16]
 80083a8:	7823      	ldrb	r3, [r4, #0]
 80083aa:	2b2e      	cmp	r3, #46	@ 0x2e
 80083ac:	d10a      	bne.n	80083c4 <_svfiprintf_r+0x130>
 80083ae:	7863      	ldrb	r3, [r4, #1]
 80083b0:	2b2a      	cmp	r3, #42	@ 0x2a
 80083b2:	d132      	bne.n	800841a <_svfiprintf_r+0x186>
 80083b4:	9b03      	ldr	r3, [sp, #12]
 80083b6:	3402      	adds	r4, #2
 80083b8:	1d1a      	adds	r2, r3, #4
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	9203      	str	r2, [sp, #12]
 80083be:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80083c2:	9305      	str	r3, [sp, #20]
 80083c4:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800847c <_svfiprintf_r+0x1e8>
 80083c8:	2203      	movs	r2, #3
 80083ca:	4650      	mov	r0, sl
 80083cc:	7821      	ldrb	r1, [r4, #0]
 80083ce:	f7fd fc7e 	bl	8005cce <memchr>
 80083d2:	b138      	cbz	r0, 80083e4 <_svfiprintf_r+0x150>
 80083d4:	2240      	movs	r2, #64	@ 0x40
 80083d6:	9b04      	ldr	r3, [sp, #16]
 80083d8:	eba0 000a 	sub.w	r0, r0, sl
 80083dc:	4082      	lsls	r2, r0
 80083de:	4313      	orrs	r3, r2
 80083e0:	3401      	adds	r4, #1
 80083e2:	9304      	str	r3, [sp, #16]
 80083e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80083e8:	2206      	movs	r2, #6
 80083ea:	4825      	ldr	r0, [pc, #148]	@ (8008480 <_svfiprintf_r+0x1ec>)
 80083ec:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80083f0:	f7fd fc6d 	bl	8005cce <memchr>
 80083f4:	2800      	cmp	r0, #0
 80083f6:	d036      	beq.n	8008466 <_svfiprintf_r+0x1d2>
 80083f8:	4b22      	ldr	r3, [pc, #136]	@ (8008484 <_svfiprintf_r+0x1f0>)
 80083fa:	bb1b      	cbnz	r3, 8008444 <_svfiprintf_r+0x1b0>
 80083fc:	9b03      	ldr	r3, [sp, #12]
 80083fe:	3307      	adds	r3, #7
 8008400:	f023 0307 	bic.w	r3, r3, #7
 8008404:	3308      	adds	r3, #8
 8008406:	9303      	str	r3, [sp, #12]
 8008408:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800840a:	4433      	add	r3, r6
 800840c:	9309      	str	r3, [sp, #36]	@ 0x24
 800840e:	e76a      	b.n	80082e6 <_svfiprintf_r+0x52>
 8008410:	460c      	mov	r4, r1
 8008412:	2001      	movs	r0, #1
 8008414:	fb0c 3202 	mla	r2, ip, r2, r3
 8008418:	e7a8      	b.n	800836c <_svfiprintf_r+0xd8>
 800841a:	2300      	movs	r3, #0
 800841c:	f04f 0c0a 	mov.w	ip, #10
 8008420:	4619      	mov	r1, r3
 8008422:	3401      	adds	r4, #1
 8008424:	9305      	str	r3, [sp, #20]
 8008426:	4620      	mov	r0, r4
 8008428:	f810 2b01 	ldrb.w	r2, [r0], #1
 800842c:	3a30      	subs	r2, #48	@ 0x30
 800842e:	2a09      	cmp	r2, #9
 8008430:	d903      	bls.n	800843a <_svfiprintf_r+0x1a6>
 8008432:	2b00      	cmp	r3, #0
 8008434:	d0c6      	beq.n	80083c4 <_svfiprintf_r+0x130>
 8008436:	9105      	str	r1, [sp, #20]
 8008438:	e7c4      	b.n	80083c4 <_svfiprintf_r+0x130>
 800843a:	4604      	mov	r4, r0
 800843c:	2301      	movs	r3, #1
 800843e:	fb0c 2101 	mla	r1, ip, r1, r2
 8008442:	e7f0      	b.n	8008426 <_svfiprintf_r+0x192>
 8008444:	ab03      	add	r3, sp, #12
 8008446:	9300      	str	r3, [sp, #0]
 8008448:	462a      	mov	r2, r5
 800844a:	4638      	mov	r0, r7
 800844c:	4b0e      	ldr	r3, [pc, #56]	@ (8008488 <_svfiprintf_r+0x1f4>)
 800844e:	a904      	add	r1, sp, #16
 8008450:	f7fc fcca 	bl	8004de8 <_printf_float>
 8008454:	1c42      	adds	r2, r0, #1
 8008456:	4606      	mov	r6, r0
 8008458:	d1d6      	bne.n	8008408 <_svfiprintf_r+0x174>
 800845a:	89ab      	ldrh	r3, [r5, #12]
 800845c:	065b      	lsls	r3, r3, #25
 800845e:	f53f af2d 	bmi.w	80082bc <_svfiprintf_r+0x28>
 8008462:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008464:	e72c      	b.n	80082c0 <_svfiprintf_r+0x2c>
 8008466:	ab03      	add	r3, sp, #12
 8008468:	9300      	str	r3, [sp, #0]
 800846a:	462a      	mov	r2, r5
 800846c:	4638      	mov	r0, r7
 800846e:	4b06      	ldr	r3, [pc, #24]	@ (8008488 <_svfiprintf_r+0x1f4>)
 8008470:	a904      	add	r1, sp, #16
 8008472:	f7fc ff57 	bl	8005324 <_printf_i>
 8008476:	e7ed      	b.n	8008454 <_svfiprintf_r+0x1c0>
 8008478:	080097b1 	.word	0x080097b1
 800847c:	080097b7 	.word	0x080097b7
 8008480:	080097bb 	.word	0x080097bb
 8008484:	08004de9 	.word	0x08004de9
 8008488:	080081dd 	.word	0x080081dd

0800848c <__sflush_r>:
 800848c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008492:	0716      	lsls	r6, r2, #28
 8008494:	4605      	mov	r5, r0
 8008496:	460c      	mov	r4, r1
 8008498:	d454      	bmi.n	8008544 <__sflush_r+0xb8>
 800849a:	684b      	ldr	r3, [r1, #4]
 800849c:	2b00      	cmp	r3, #0
 800849e:	dc02      	bgt.n	80084a6 <__sflush_r+0x1a>
 80084a0:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	dd48      	ble.n	8008538 <__sflush_r+0xac>
 80084a6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80084a8:	2e00      	cmp	r6, #0
 80084aa:	d045      	beq.n	8008538 <__sflush_r+0xac>
 80084ac:	2300      	movs	r3, #0
 80084ae:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80084b2:	682f      	ldr	r7, [r5, #0]
 80084b4:	6a21      	ldr	r1, [r4, #32]
 80084b6:	602b      	str	r3, [r5, #0]
 80084b8:	d030      	beq.n	800851c <__sflush_r+0x90>
 80084ba:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80084bc:	89a3      	ldrh	r3, [r4, #12]
 80084be:	0759      	lsls	r1, r3, #29
 80084c0:	d505      	bpl.n	80084ce <__sflush_r+0x42>
 80084c2:	6863      	ldr	r3, [r4, #4]
 80084c4:	1ad2      	subs	r2, r2, r3
 80084c6:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80084c8:	b10b      	cbz	r3, 80084ce <__sflush_r+0x42>
 80084ca:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80084cc:	1ad2      	subs	r2, r2, r3
 80084ce:	2300      	movs	r3, #0
 80084d0:	4628      	mov	r0, r5
 80084d2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80084d4:	6a21      	ldr	r1, [r4, #32]
 80084d6:	47b0      	blx	r6
 80084d8:	1c43      	adds	r3, r0, #1
 80084da:	89a3      	ldrh	r3, [r4, #12]
 80084dc:	d106      	bne.n	80084ec <__sflush_r+0x60>
 80084de:	6829      	ldr	r1, [r5, #0]
 80084e0:	291d      	cmp	r1, #29
 80084e2:	d82b      	bhi.n	800853c <__sflush_r+0xb0>
 80084e4:	4a28      	ldr	r2, [pc, #160]	@ (8008588 <__sflush_r+0xfc>)
 80084e6:	410a      	asrs	r2, r1
 80084e8:	07d6      	lsls	r6, r2, #31
 80084ea:	d427      	bmi.n	800853c <__sflush_r+0xb0>
 80084ec:	2200      	movs	r2, #0
 80084ee:	6062      	str	r2, [r4, #4]
 80084f0:	6922      	ldr	r2, [r4, #16]
 80084f2:	04d9      	lsls	r1, r3, #19
 80084f4:	6022      	str	r2, [r4, #0]
 80084f6:	d504      	bpl.n	8008502 <__sflush_r+0x76>
 80084f8:	1c42      	adds	r2, r0, #1
 80084fa:	d101      	bne.n	8008500 <__sflush_r+0x74>
 80084fc:	682b      	ldr	r3, [r5, #0]
 80084fe:	b903      	cbnz	r3, 8008502 <__sflush_r+0x76>
 8008500:	6560      	str	r0, [r4, #84]	@ 0x54
 8008502:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008504:	602f      	str	r7, [r5, #0]
 8008506:	b1b9      	cbz	r1, 8008538 <__sflush_r+0xac>
 8008508:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800850c:	4299      	cmp	r1, r3
 800850e:	d002      	beq.n	8008516 <__sflush_r+0x8a>
 8008510:	4628      	mov	r0, r5
 8008512:	f7fe fa41 	bl	8006998 <_free_r>
 8008516:	2300      	movs	r3, #0
 8008518:	6363      	str	r3, [r4, #52]	@ 0x34
 800851a:	e00d      	b.n	8008538 <__sflush_r+0xac>
 800851c:	2301      	movs	r3, #1
 800851e:	4628      	mov	r0, r5
 8008520:	47b0      	blx	r6
 8008522:	4602      	mov	r2, r0
 8008524:	1c50      	adds	r0, r2, #1
 8008526:	d1c9      	bne.n	80084bc <__sflush_r+0x30>
 8008528:	682b      	ldr	r3, [r5, #0]
 800852a:	2b00      	cmp	r3, #0
 800852c:	d0c6      	beq.n	80084bc <__sflush_r+0x30>
 800852e:	2b1d      	cmp	r3, #29
 8008530:	d001      	beq.n	8008536 <__sflush_r+0xaa>
 8008532:	2b16      	cmp	r3, #22
 8008534:	d11d      	bne.n	8008572 <__sflush_r+0xe6>
 8008536:	602f      	str	r7, [r5, #0]
 8008538:	2000      	movs	r0, #0
 800853a:	e021      	b.n	8008580 <__sflush_r+0xf4>
 800853c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008540:	b21b      	sxth	r3, r3
 8008542:	e01a      	b.n	800857a <__sflush_r+0xee>
 8008544:	690f      	ldr	r7, [r1, #16]
 8008546:	2f00      	cmp	r7, #0
 8008548:	d0f6      	beq.n	8008538 <__sflush_r+0xac>
 800854a:	0793      	lsls	r3, r2, #30
 800854c:	bf18      	it	ne
 800854e:	2300      	movne	r3, #0
 8008550:	680e      	ldr	r6, [r1, #0]
 8008552:	bf08      	it	eq
 8008554:	694b      	ldreq	r3, [r1, #20]
 8008556:	1bf6      	subs	r6, r6, r7
 8008558:	600f      	str	r7, [r1, #0]
 800855a:	608b      	str	r3, [r1, #8]
 800855c:	2e00      	cmp	r6, #0
 800855e:	ddeb      	ble.n	8008538 <__sflush_r+0xac>
 8008560:	4633      	mov	r3, r6
 8008562:	463a      	mov	r2, r7
 8008564:	4628      	mov	r0, r5
 8008566:	6a21      	ldr	r1, [r4, #32]
 8008568:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800856c:	47e0      	blx	ip
 800856e:	2800      	cmp	r0, #0
 8008570:	dc07      	bgt.n	8008582 <__sflush_r+0xf6>
 8008572:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008576:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800857a:	f04f 30ff 	mov.w	r0, #4294967295
 800857e:	81a3      	strh	r3, [r4, #12]
 8008580:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008582:	4407      	add	r7, r0
 8008584:	1a36      	subs	r6, r6, r0
 8008586:	e7e9      	b.n	800855c <__sflush_r+0xd0>
 8008588:	dfbffffe 	.word	0xdfbffffe

0800858c <_fflush_r>:
 800858c:	b538      	push	{r3, r4, r5, lr}
 800858e:	690b      	ldr	r3, [r1, #16]
 8008590:	4605      	mov	r5, r0
 8008592:	460c      	mov	r4, r1
 8008594:	b913      	cbnz	r3, 800859c <_fflush_r+0x10>
 8008596:	2500      	movs	r5, #0
 8008598:	4628      	mov	r0, r5
 800859a:	bd38      	pop	{r3, r4, r5, pc}
 800859c:	b118      	cbz	r0, 80085a6 <_fflush_r+0x1a>
 800859e:	6a03      	ldr	r3, [r0, #32]
 80085a0:	b90b      	cbnz	r3, 80085a6 <_fflush_r+0x1a>
 80085a2:	f7fd fa7b 	bl	8005a9c <__sinit>
 80085a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d0f3      	beq.n	8008596 <_fflush_r+0xa>
 80085ae:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80085b0:	07d0      	lsls	r0, r2, #31
 80085b2:	d404      	bmi.n	80085be <_fflush_r+0x32>
 80085b4:	0599      	lsls	r1, r3, #22
 80085b6:	d402      	bmi.n	80085be <_fflush_r+0x32>
 80085b8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80085ba:	f7fd fb86 	bl	8005cca <__retarget_lock_acquire_recursive>
 80085be:	4628      	mov	r0, r5
 80085c0:	4621      	mov	r1, r4
 80085c2:	f7ff ff63 	bl	800848c <__sflush_r>
 80085c6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80085c8:	4605      	mov	r5, r0
 80085ca:	07da      	lsls	r2, r3, #31
 80085cc:	d4e4      	bmi.n	8008598 <_fflush_r+0xc>
 80085ce:	89a3      	ldrh	r3, [r4, #12]
 80085d0:	059b      	lsls	r3, r3, #22
 80085d2:	d4e1      	bmi.n	8008598 <_fflush_r+0xc>
 80085d4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80085d6:	f7fd fb79 	bl	8005ccc <__retarget_lock_release_recursive>
 80085da:	e7dd      	b.n	8008598 <_fflush_r+0xc>

080085dc <memmove>:
 80085dc:	4288      	cmp	r0, r1
 80085de:	b510      	push	{r4, lr}
 80085e0:	eb01 0402 	add.w	r4, r1, r2
 80085e4:	d902      	bls.n	80085ec <memmove+0x10>
 80085e6:	4284      	cmp	r4, r0
 80085e8:	4623      	mov	r3, r4
 80085ea:	d807      	bhi.n	80085fc <memmove+0x20>
 80085ec:	1e43      	subs	r3, r0, #1
 80085ee:	42a1      	cmp	r1, r4
 80085f0:	d008      	beq.n	8008604 <memmove+0x28>
 80085f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80085f6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80085fa:	e7f8      	b.n	80085ee <memmove+0x12>
 80085fc:	4601      	mov	r1, r0
 80085fe:	4402      	add	r2, r0
 8008600:	428a      	cmp	r2, r1
 8008602:	d100      	bne.n	8008606 <memmove+0x2a>
 8008604:	bd10      	pop	{r4, pc}
 8008606:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800860a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800860e:	e7f7      	b.n	8008600 <memmove+0x24>

08008610 <strncmp>:
 8008610:	b510      	push	{r4, lr}
 8008612:	b16a      	cbz	r2, 8008630 <strncmp+0x20>
 8008614:	3901      	subs	r1, #1
 8008616:	1884      	adds	r4, r0, r2
 8008618:	f810 2b01 	ldrb.w	r2, [r0], #1
 800861c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8008620:	429a      	cmp	r2, r3
 8008622:	d103      	bne.n	800862c <strncmp+0x1c>
 8008624:	42a0      	cmp	r0, r4
 8008626:	d001      	beq.n	800862c <strncmp+0x1c>
 8008628:	2a00      	cmp	r2, #0
 800862a:	d1f5      	bne.n	8008618 <strncmp+0x8>
 800862c:	1ad0      	subs	r0, r2, r3
 800862e:	bd10      	pop	{r4, pc}
 8008630:	4610      	mov	r0, r2
 8008632:	e7fc      	b.n	800862e <strncmp+0x1e>

08008634 <_sbrk_r>:
 8008634:	b538      	push	{r3, r4, r5, lr}
 8008636:	2300      	movs	r3, #0
 8008638:	4d05      	ldr	r5, [pc, #20]	@ (8008650 <_sbrk_r+0x1c>)
 800863a:	4604      	mov	r4, r0
 800863c:	4608      	mov	r0, r1
 800863e:	602b      	str	r3, [r5, #0]
 8008640:	f7f9 fa4c 	bl	8001adc <_sbrk>
 8008644:	1c43      	adds	r3, r0, #1
 8008646:	d102      	bne.n	800864e <_sbrk_r+0x1a>
 8008648:	682b      	ldr	r3, [r5, #0]
 800864a:	b103      	cbz	r3, 800864e <_sbrk_r+0x1a>
 800864c:	6023      	str	r3, [r4, #0]
 800864e:	bd38      	pop	{r3, r4, r5, pc}
 8008650:	200003fc 	.word	0x200003fc

08008654 <memcpy>:
 8008654:	440a      	add	r2, r1
 8008656:	4291      	cmp	r1, r2
 8008658:	f100 33ff 	add.w	r3, r0, #4294967295
 800865c:	d100      	bne.n	8008660 <memcpy+0xc>
 800865e:	4770      	bx	lr
 8008660:	b510      	push	{r4, lr}
 8008662:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008666:	4291      	cmp	r1, r2
 8008668:	f803 4f01 	strb.w	r4, [r3, #1]!
 800866c:	d1f9      	bne.n	8008662 <memcpy+0xe>
 800866e:	bd10      	pop	{r4, pc}

08008670 <nan>:
 8008670:	2000      	movs	r0, #0
 8008672:	4901      	ldr	r1, [pc, #4]	@ (8008678 <nan+0x8>)
 8008674:	4770      	bx	lr
 8008676:	bf00      	nop
 8008678:	7ff80000 	.word	0x7ff80000

0800867c <__assert_func>:
 800867c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800867e:	4614      	mov	r4, r2
 8008680:	461a      	mov	r2, r3
 8008682:	4b09      	ldr	r3, [pc, #36]	@ (80086a8 <__assert_func+0x2c>)
 8008684:	4605      	mov	r5, r0
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	68d8      	ldr	r0, [r3, #12]
 800868a:	b954      	cbnz	r4, 80086a2 <__assert_func+0x26>
 800868c:	4b07      	ldr	r3, [pc, #28]	@ (80086ac <__assert_func+0x30>)
 800868e:	461c      	mov	r4, r3
 8008690:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008694:	9100      	str	r1, [sp, #0]
 8008696:	462b      	mov	r3, r5
 8008698:	4905      	ldr	r1, [pc, #20]	@ (80086b0 <__assert_func+0x34>)
 800869a:	f000 fba7 	bl	8008dec <fiprintf>
 800869e:	f000 fbb7 	bl	8008e10 <abort>
 80086a2:	4b04      	ldr	r3, [pc, #16]	@ (80086b4 <__assert_func+0x38>)
 80086a4:	e7f4      	b.n	8008690 <__assert_func+0x14>
 80086a6:	bf00      	nop
 80086a8:	20000020 	.word	0x20000020
 80086ac:	08009805 	.word	0x08009805
 80086b0:	080097d7 	.word	0x080097d7
 80086b4:	080097ca 	.word	0x080097ca

080086b8 <_calloc_r>:
 80086b8:	b570      	push	{r4, r5, r6, lr}
 80086ba:	fba1 5402 	umull	r5, r4, r1, r2
 80086be:	b93c      	cbnz	r4, 80086d0 <_calloc_r+0x18>
 80086c0:	4629      	mov	r1, r5
 80086c2:	f7fe f9db 	bl	8006a7c <_malloc_r>
 80086c6:	4606      	mov	r6, r0
 80086c8:	b928      	cbnz	r0, 80086d6 <_calloc_r+0x1e>
 80086ca:	2600      	movs	r6, #0
 80086cc:	4630      	mov	r0, r6
 80086ce:	bd70      	pop	{r4, r5, r6, pc}
 80086d0:	220c      	movs	r2, #12
 80086d2:	6002      	str	r2, [r0, #0]
 80086d4:	e7f9      	b.n	80086ca <_calloc_r+0x12>
 80086d6:	462a      	mov	r2, r5
 80086d8:	4621      	mov	r1, r4
 80086da:	f7fd fa78 	bl	8005bce <memset>
 80086de:	e7f5      	b.n	80086cc <_calloc_r+0x14>

080086e0 <rshift>:
 80086e0:	6903      	ldr	r3, [r0, #16]
 80086e2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80086e6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80086ea:	f100 0414 	add.w	r4, r0, #20
 80086ee:	ea4f 1261 	mov.w	r2, r1, asr #5
 80086f2:	dd46      	ble.n	8008782 <rshift+0xa2>
 80086f4:	f011 011f 	ands.w	r1, r1, #31
 80086f8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80086fc:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008700:	d10c      	bne.n	800871c <rshift+0x3c>
 8008702:	4629      	mov	r1, r5
 8008704:	f100 0710 	add.w	r7, r0, #16
 8008708:	42b1      	cmp	r1, r6
 800870a:	d335      	bcc.n	8008778 <rshift+0x98>
 800870c:	1a9b      	subs	r3, r3, r2
 800870e:	009b      	lsls	r3, r3, #2
 8008710:	1eea      	subs	r2, r5, #3
 8008712:	4296      	cmp	r6, r2
 8008714:	bf38      	it	cc
 8008716:	2300      	movcc	r3, #0
 8008718:	4423      	add	r3, r4
 800871a:	e015      	b.n	8008748 <rshift+0x68>
 800871c:	46a1      	mov	r9, r4
 800871e:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8008722:	f1c1 0820 	rsb	r8, r1, #32
 8008726:	40cf      	lsrs	r7, r1
 8008728:	f105 0e04 	add.w	lr, r5, #4
 800872c:	4576      	cmp	r6, lr
 800872e:	46f4      	mov	ip, lr
 8008730:	d816      	bhi.n	8008760 <rshift+0x80>
 8008732:	1a9a      	subs	r2, r3, r2
 8008734:	0092      	lsls	r2, r2, #2
 8008736:	3a04      	subs	r2, #4
 8008738:	3501      	adds	r5, #1
 800873a:	42ae      	cmp	r6, r5
 800873c:	bf38      	it	cc
 800873e:	2200      	movcc	r2, #0
 8008740:	18a3      	adds	r3, r4, r2
 8008742:	50a7      	str	r7, [r4, r2]
 8008744:	b107      	cbz	r7, 8008748 <rshift+0x68>
 8008746:	3304      	adds	r3, #4
 8008748:	42a3      	cmp	r3, r4
 800874a:	eba3 0204 	sub.w	r2, r3, r4
 800874e:	bf08      	it	eq
 8008750:	2300      	moveq	r3, #0
 8008752:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008756:	6102      	str	r2, [r0, #16]
 8008758:	bf08      	it	eq
 800875a:	6143      	streq	r3, [r0, #20]
 800875c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008760:	f8dc c000 	ldr.w	ip, [ip]
 8008764:	fa0c fc08 	lsl.w	ip, ip, r8
 8008768:	ea4c 0707 	orr.w	r7, ip, r7
 800876c:	f849 7b04 	str.w	r7, [r9], #4
 8008770:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008774:	40cf      	lsrs	r7, r1
 8008776:	e7d9      	b.n	800872c <rshift+0x4c>
 8008778:	f851 cb04 	ldr.w	ip, [r1], #4
 800877c:	f847 cf04 	str.w	ip, [r7, #4]!
 8008780:	e7c2      	b.n	8008708 <rshift+0x28>
 8008782:	4623      	mov	r3, r4
 8008784:	e7e0      	b.n	8008748 <rshift+0x68>

08008786 <__hexdig_fun>:
 8008786:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800878a:	2b09      	cmp	r3, #9
 800878c:	d802      	bhi.n	8008794 <__hexdig_fun+0xe>
 800878e:	3820      	subs	r0, #32
 8008790:	b2c0      	uxtb	r0, r0
 8008792:	4770      	bx	lr
 8008794:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8008798:	2b05      	cmp	r3, #5
 800879a:	d801      	bhi.n	80087a0 <__hexdig_fun+0x1a>
 800879c:	3847      	subs	r0, #71	@ 0x47
 800879e:	e7f7      	b.n	8008790 <__hexdig_fun+0xa>
 80087a0:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 80087a4:	2b05      	cmp	r3, #5
 80087a6:	d801      	bhi.n	80087ac <__hexdig_fun+0x26>
 80087a8:	3827      	subs	r0, #39	@ 0x27
 80087aa:	e7f1      	b.n	8008790 <__hexdig_fun+0xa>
 80087ac:	2000      	movs	r0, #0
 80087ae:	4770      	bx	lr

080087b0 <__gethex>:
 80087b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087b4:	468a      	mov	sl, r1
 80087b6:	4690      	mov	r8, r2
 80087b8:	b085      	sub	sp, #20
 80087ba:	9302      	str	r3, [sp, #8]
 80087bc:	680b      	ldr	r3, [r1, #0]
 80087be:	9001      	str	r0, [sp, #4]
 80087c0:	1c9c      	adds	r4, r3, #2
 80087c2:	46a1      	mov	r9, r4
 80087c4:	f814 0b01 	ldrb.w	r0, [r4], #1
 80087c8:	2830      	cmp	r0, #48	@ 0x30
 80087ca:	d0fa      	beq.n	80087c2 <__gethex+0x12>
 80087cc:	eba9 0303 	sub.w	r3, r9, r3
 80087d0:	f1a3 0b02 	sub.w	fp, r3, #2
 80087d4:	f7ff ffd7 	bl	8008786 <__hexdig_fun>
 80087d8:	4605      	mov	r5, r0
 80087da:	2800      	cmp	r0, #0
 80087dc:	d168      	bne.n	80088b0 <__gethex+0x100>
 80087de:	2201      	movs	r2, #1
 80087e0:	4648      	mov	r0, r9
 80087e2:	499f      	ldr	r1, [pc, #636]	@ (8008a60 <__gethex+0x2b0>)
 80087e4:	f7ff ff14 	bl	8008610 <strncmp>
 80087e8:	4607      	mov	r7, r0
 80087ea:	2800      	cmp	r0, #0
 80087ec:	d167      	bne.n	80088be <__gethex+0x10e>
 80087ee:	f899 0001 	ldrb.w	r0, [r9, #1]
 80087f2:	4626      	mov	r6, r4
 80087f4:	f7ff ffc7 	bl	8008786 <__hexdig_fun>
 80087f8:	2800      	cmp	r0, #0
 80087fa:	d062      	beq.n	80088c2 <__gethex+0x112>
 80087fc:	4623      	mov	r3, r4
 80087fe:	7818      	ldrb	r0, [r3, #0]
 8008800:	4699      	mov	r9, r3
 8008802:	2830      	cmp	r0, #48	@ 0x30
 8008804:	f103 0301 	add.w	r3, r3, #1
 8008808:	d0f9      	beq.n	80087fe <__gethex+0x4e>
 800880a:	f7ff ffbc 	bl	8008786 <__hexdig_fun>
 800880e:	fab0 f580 	clz	r5, r0
 8008812:	f04f 0b01 	mov.w	fp, #1
 8008816:	096d      	lsrs	r5, r5, #5
 8008818:	464a      	mov	r2, r9
 800881a:	4616      	mov	r6, r2
 800881c:	7830      	ldrb	r0, [r6, #0]
 800881e:	3201      	adds	r2, #1
 8008820:	f7ff ffb1 	bl	8008786 <__hexdig_fun>
 8008824:	2800      	cmp	r0, #0
 8008826:	d1f8      	bne.n	800881a <__gethex+0x6a>
 8008828:	2201      	movs	r2, #1
 800882a:	4630      	mov	r0, r6
 800882c:	498c      	ldr	r1, [pc, #560]	@ (8008a60 <__gethex+0x2b0>)
 800882e:	f7ff feef 	bl	8008610 <strncmp>
 8008832:	2800      	cmp	r0, #0
 8008834:	d13f      	bne.n	80088b6 <__gethex+0x106>
 8008836:	b944      	cbnz	r4, 800884a <__gethex+0x9a>
 8008838:	1c74      	adds	r4, r6, #1
 800883a:	4622      	mov	r2, r4
 800883c:	4616      	mov	r6, r2
 800883e:	7830      	ldrb	r0, [r6, #0]
 8008840:	3201      	adds	r2, #1
 8008842:	f7ff ffa0 	bl	8008786 <__hexdig_fun>
 8008846:	2800      	cmp	r0, #0
 8008848:	d1f8      	bne.n	800883c <__gethex+0x8c>
 800884a:	1ba4      	subs	r4, r4, r6
 800884c:	00a7      	lsls	r7, r4, #2
 800884e:	7833      	ldrb	r3, [r6, #0]
 8008850:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8008854:	2b50      	cmp	r3, #80	@ 0x50
 8008856:	d13e      	bne.n	80088d6 <__gethex+0x126>
 8008858:	7873      	ldrb	r3, [r6, #1]
 800885a:	2b2b      	cmp	r3, #43	@ 0x2b
 800885c:	d033      	beq.n	80088c6 <__gethex+0x116>
 800885e:	2b2d      	cmp	r3, #45	@ 0x2d
 8008860:	d034      	beq.n	80088cc <__gethex+0x11c>
 8008862:	2400      	movs	r4, #0
 8008864:	1c71      	adds	r1, r6, #1
 8008866:	7808      	ldrb	r0, [r1, #0]
 8008868:	f7ff ff8d 	bl	8008786 <__hexdig_fun>
 800886c:	1e43      	subs	r3, r0, #1
 800886e:	b2db      	uxtb	r3, r3
 8008870:	2b18      	cmp	r3, #24
 8008872:	d830      	bhi.n	80088d6 <__gethex+0x126>
 8008874:	f1a0 0210 	sub.w	r2, r0, #16
 8008878:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800887c:	f7ff ff83 	bl	8008786 <__hexdig_fun>
 8008880:	f100 3cff 	add.w	ip, r0, #4294967295
 8008884:	fa5f fc8c 	uxtb.w	ip, ip
 8008888:	f1bc 0f18 	cmp.w	ip, #24
 800888c:	f04f 030a 	mov.w	r3, #10
 8008890:	d91e      	bls.n	80088d0 <__gethex+0x120>
 8008892:	b104      	cbz	r4, 8008896 <__gethex+0xe6>
 8008894:	4252      	negs	r2, r2
 8008896:	4417      	add	r7, r2
 8008898:	f8ca 1000 	str.w	r1, [sl]
 800889c:	b1ed      	cbz	r5, 80088da <__gethex+0x12a>
 800889e:	f1bb 0f00 	cmp.w	fp, #0
 80088a2:	bf0c      	ite	eq
 80088a4:	2506      	moveq	r5, #6
 80088a6:	2500      	movne	r5, #0
 80088a8:	4628      	mov	r0, r5
 80088aa:	b005      	add	sp, #20
 80088ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088b0:	2500      	movs	r5, #0
 80088b2:	462c      	mov	r4, r5
 80088b4:	e7b0      	b.n	8008818 <__gethex+0x68>
 80088b6:	2c00      	cmp	r4, #0
 80088b8:	d1c7      	bne.n	800884a <__gethex+0x9a>
 80088ba:	4627      	mov	r7, r4
 80088bc:	e7c7      	b.n	800884e <__gethex+0x9e>
 80088be:	464e      	mov	r6, r9
 80088c0:	462f      	mov	r7, r5
 80088c2:	2501      	movs	r5, #1
 80088c4:	e7c3      	b.n	800884e <__gethex+0x9e>
 80088c6:	2400      	movs	r4, #0
 80088c8:	1cb1      	adds	r1, r6, #2
 80088ca:	e7cc      	b.n	8008866 <__gethex+0xb6>
 80088cc:	2401      	movs	r4, #1
 80088ce:	e7fb      	b.n	80088c8 <__gethex+0x118>
 80088d0:	fb03 0002 	mla	r0, r3, r2, r0
 80088d4:	e7ce      	b.n	8008874 <__gethex+0xc4>
 80088d6:	4631      	mov	r1, r6
 80088d8:	e7de      	b.n	8008898 <__gethex+0xe8>
 80088da:	4629      	mov	r1, r5
 80088dc:	eba6 0309 	sub.w	r3, r6, r9
 80088e0:	3b01      	subs	r3, #1
 80088e2:	2b07      	cmp	r3, #7
 80088e4:	dc0a      	bgt.n	80088fc <__gethex+0x14c>
 80088e6:	9801      	ldr	r0, [sp, #4]
 80088e8:	f7fe f954 	bl	8006b94 <_Balloc>
 80088ec:	4604      	mov	r4, r0
 80088ee:	b940      	cbnz	r0, 8008902 <__gethex+0x152>
 80088f0:	4602      	mov	r2, r0
 80088f2:	21e4      	movs	r1, #228	@ 0xe4
 80088f4:	4b5b      	ldr	r3, [pc, #364]	@ (8008a64 <__gethex+0x2b4>)
 80088f6:	485c      	ldr	r0, [pc, #368]	@ (8008a68 <__gethex+0x2b8>)
 80088f8:	f7ff fec0 	bl	800867c <__assert_func>
 80088fc:	3101      	adds	r1, #1
 80088fe:	105b      	asrs	r3, r3, #1
 8008900:	e7ef      	b.n	80088e2 <__gethex+0x132>
 8008902:	2300      	movs	r3, #0
 8008904:	f100 0a14 	add.w	sl, r0, #20
 8008908:	4655      	mov	r5, sl
 800890a:	469b      	mov	fp, r3
 800890c:	45b1      	cmp	r9, r6
 800890e:	d337      	bcc.n	8008980 <__gethex+0x1d0>
 8008910:	f845 bb04 	str.w	fp, [r5], #4
 8008914:	eba5 050a 	sub.w	r5, r5, sl
 8008918:	10ad      	asrs	r5, r5, #2
 800891a:	6125      	str	r5, [r4, #16]
 800891c:	4658      	mov	r0, fp
 800891e:	f7fe fa2b 	bl	8006d78 <__hi0bits>
 8008922:	016d      	lsls	r5, r5, #5
 8008924:	f8d8 6000 	ldr.w	r6, [r8]
 8008928:	1a2d      	subs	r5, r5, r0
 800892a:	42b5      	cmp	r5, r6
 800892c:	dd54      	ble.n	80089d8 <__gethex+0x228>
 800892e:	1bad      	subs	r5, r5, r6
 8008930:	4629      	mov	r1, r5
 8008932:	4620      	mov	r0, r4
 8008934:	f7fe fdb3 	bl	800749e <__any_on>
 8008938:	4681      	mov	r9, r0
 800893a:	b178      	cbz	r0, 800895c <__gethex+0x1ac>
 800893c:	f04f 0901 	mov.w	r9, #1
 8008940:	1e6b      	subs	r3, r5, #1
 8008942:	1159      	asrs	r1, r3, #5
 8008944:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8008948:	f003 021f 	and.w	r2, r3, #31
 800894c:	fa09 f202 	lsl.w	r2, r9, r2
 8008950:	420a      	tst	r2, r1
 8008952:	d003      	beq.n	800895c <__gethex+0x1ac>
 8008954:	454b      	cmp	r3, r9
 8008956:	dc36      	bgt.n	80089c6 <__gethex+0x216>
 8008958:	f04f 0902 	mov.w	r9, #2
 800895c:	4629      	mov	r1, r5
 800895e:	4620      	mov	r0, r4
 8008960:	f7ff febe 	bl	80086e0 <rshift>
 8008964:	442f      	add	r7, r5
 8008966:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800896a:	42bb      	cmp	r3, r7
 800896c:	da42      	bge.n	80089f4 <__gethex+0x244>
 800896e:	4621      	mov	r1, r4
 8008970:	9801      	ldr	r0, [sp, #4]
 8008972:	f7fe f94f 	bl	8006c14 <_Bfree>
 8008976:	2300      	movs	r3, #0
 8008978:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800897a:	25a3      	movs	r5, #163	@ 0xa3
 800897c:	6013      	str	r3, [r2, #0]
 800897e:	e793      	b.n	80088a8 <__gethex+0xf8>
 8008980:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8008984:	2a2e      	cmp	r2, #46	@ 0x2e
 8008986:	d012      	beq.n	80089ae <__gethex+0x1fe>
 8008988:	2b20      	cmp	r3, #32
 800898a:	d104      	bne.n	8008996 <__gethex+0x1e6>
 800898c:	f845 bb04 	str.w	fp, [r5], #4
 8008990:	f04f 0b00 	mov.w	fp, #0
 8008994:	465b      	mov	r3, fp
 8008996:	7830      	ldrb	r0, [r6, #0]
 8008998:	9303      	str	r3, [sp, #12]
 800899a:	f7ff fef4 	bl	8008786 <__hexdig_fun>
 800899e:	9b03      	ldr	r3, [sp, #12]
 80089a0:	f000 000f 	and.w	r0, r0, #15
 80089a4:	4098      	lsls	r0, r3
 80089a6:	ea4b 0b00 	orr.w	fp, fp, r0
 80089aa:	3304      	adds	r3, #4
 80089ac:	e7ae      	b.n	800890c <__gethex+0x15c>
 80089ae:	45b1      	cmp	r9, r6
 80089b0:	d8ea      	bhi.n	8008988 <__gethex+0x1d8>
 80089b2:	2201      	movs	r2, #1
 80089b4:	4630      	mov	r0, r6
 80089b6:	492a      	ldr	r1, [pc, #168]	@ (8008a60 <__gethex+0x2b0>)
 80089b8:	9303      	str	r3, [sp, #12]
 80089ba:	f7ff fe29 	bl	8008610 <strncmp>
 80089be:	9b03      	ldr	r3, [sp, #12]
 80089c0:	2800      	cmp	r0, #0
 80089c2:	d1e1      	bne.n	8008988 <__gethex+0x1d8>
 80089c4:	e7a2      	b.n	800890c <__gethex+0x15c>
 80089c6:	4620      	mov	r0, r4
 80089c8:	1ea9      	subs	r1, r5, #2
 80089ca:	f7fe fd68 	bl	800749e <__any_on>
 80089ce:	2800      	cmp	r0, #0
 80089d0:	d0c2      	beq.n	8008958 <__gethex+0x1a8>
 80089d2:	f04f 0903 	mov.w	r9, #3
 80089d6:	e7c1      	b.n	800895c <__gethex+0x1ac>
 80089d8:	da09      	bge.n	80089ee <__gethex+0x23e>
 80089da:	1b75      	subs	r5, r6, r5
 80089dc:	4621      	mov	r1, r4
 80089de:	462a      	mov	r2, r5
 80089e0:	9801      	ldr	r0, [sp, #4]
 80089e2:	f7fe fb2d 	bl	8007040 <__lshift>
 80089e6:	4604      	mov	r4, r0
 80089e8:	1b7f      	subs	r7, r7, r5
 80089ea:	f100 0a14 	add.w	sl, r0, #20
 80089ee:	f04f 0900 	mov.w	r9, #0
 80089f2:	e7b8      	b.n	8008966 <__gethex+0x1b6>
 80089f4:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80089f8:	42bd      	cmp	r5, r7
 80089fa:	dd6f      	ble.n	8008adc <__gethex+0x32c>
 80089fc:	1bed      	subs	r5, r5, r7
 80089fe:	42ae      	cmp	r6, r5
 8008a00:	dc34      	bgt.n	8008a6c <__gethex+0x2bc>
 8008a02:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008a06:	2b02      	cmp	r3, #2
 8008a08:	d022      	beq.n	8008a50 <__gethex+0x2a0>
 8008a0a:	2b03      	cmp	r3, #3
 8008a0c:	d024      	beq.n	8008a58 <__gethex+0x2a8>
 8008a0e:	2b01      	cmp	r3, #1
 8008a10:	d115      	bne.n	8008a3e <__gethex+0x28e>
 8008a12:	42ae      	cmp	r6, r5
 8008a14:	d113      	bne.n	8008a3e <__gethex+0x28e>
 8008a16:	2e01      	cmp	r6, #1
 8008a18:	d10b      	bne.n	8008a32 <__gethex+0x282>
 8008a1a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008a1e:	9a02      	ldr	r2, [sp, #8]
 8008a20:	2562      	movs	r5, #98	@ 0x62
 8008a22:	6013      	str	r3, [r2, #0]
 8008a24:	2301      	movs	r3, #1
 8008a26:	6123      	str	r3, [r4, #16]
 8008a28:	f8ca 3000 	str.w	r3, [sl]
 8008a2c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008a2e:	601c      	str	r4, [r3, #0]
 8008a30:	e73a      	b.n	80088a8 <__gethex+0xf8>
 8008a32:	4620      	mov	r0, r4
 8008a34:	1e71      	subs	r1, r6, #1
 8008a36:	f7fe fd32 	bl	800749e <__any_on>
 8008a3a:	2800      	cmp	r0, #0
 8008a3c:	d1ed      	bne.n	8008a1a <__gethex+0x26a>
 8008a3e:	4621      	mov	r1, r4
 8008a40:	9801      	ldr	r0, [sp, #4]
 8008a42:	f7fe f8e7 	bl	8006c14 <_Bfree>
 8008a46:	2300      	movs	r3, #0
 8008a48:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008a4a:	2550      	movs	r5, #80	@ 0x50
 8008a4c:	6013      	str	r3, [r2, #0]
 8008a4e:	e72b      	b.n	80088a8 <__gethex+0xf8>
 8008a50:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d1f3      	bne.n	8008a3e <__gethex+0x28e>
 8008a56:	e7e0      	b.n	8008a1a <__gethex+0x26a>
 8008a58:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d1dd      	bne.n	8008a1a <__gethex+0x26a>
 8008a5e:	e7ee      	b.n	8008a3e <__gethex+0x28e>
 8008a60:	08009658 	.word	0x08009658
 8008a64:	080094eb 	.word	0x080094eb
 8008a68:	08009806 	.word	0x08009806
 8008a6c:	1e6f      	subs	r7, r5, #1
 8008a6e:	f1b9 0f00 	cmp.w	r9, #0
 8008a72:	d130      	bne.n	8008ad6 <__gethex+0x326>
 8008a74:	b127      	cbz	r7, 8008a80 <__gethex+0x2d0>
 8008a76:	4639      	mov	r1, r7
 8008a78:	4620      	mov	r0, r4
 8008a7a:	f7fe fd10 	bl	800749e <__any_on>
 8008a7e:	4681      	mov	r9, r0
 8008a80:	2301      	movs	r3, #1
 8008a82:	4629      	mov	r1, r5
 8008a84:	1b76      	subs	r6, r6, r5
 8008a86:	2502      	movs	r5, #2
 8008a88:	117a      	asrs	r2, r7, #5
 8008a8a:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8008a8e:	f007 071f 	and.w	r7, r7, #31
 8008a92:	40bb      	lsls	r3, r7
 8008a94:	4213      	tst	r3, r2
 8008a96:	4620      	mov	r0, r4
 8008a98:	bf18      	it	ne
 8008a9a:	f049 0902 	orrne.w	r9, r9, #2
 8008a9e:	f7ff fe1f 	bl	80086e0 <rshift>
 8008aa2:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8008aa6:	f1b9 0f00 	cmp.w	r9, #0
 8008aaa:	d047      	beq.n	8008b3c <__gethex+0x38c>
 8008aac:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008ab0:	2b02      	cmp	r3, #2
 8008ab2:	d015      	beq.n	8008ae0 <__gethex+0x330>
 8008ab4:	2b03      	cmp	r3, #3
 8008ab6:	d017      	beq.n	8008ae8 <__gethex+0x338>
 8008ab8:	2b01      	cmp	r3, #1
 8008aba:	d109      	bne.n	8008ad0 <__gethex+0x320>
 8008abc:	f019 0f02 	tst.w	r9, #2
 8008ac0:	d006      	beq.n	8008ad0 <__gethex+0x320>
 8008ac2:	f8da 3000 	ldr.w	r3, [sl]
 8008ac6:	ea49 0903 	orr.w	r9, r9, r3
 8008aca:	f019 0f01 	tst.w	r9, #1
 8008ace:	d10e      	bne.n	8008aee <__gethex+0x33e>
 8008ad0:	f045 0510 	orr.w	r5, r5, #16
 8008ad4:	e032      	b.n	8008b3c <__gethex+0x38c>
 8008ad6:	f04f 0901 	mov.w	r9, #1
 8008ada:	e7d1      	b.n	8008a80 <__gethex+0x2d0>
 8008adc:	2501      	movs	r5, #1
 8008ade:	e7e2      	b.n	8008aa6 <__gethex+0x2f6>
 8008ae0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008ae2:	f1c3 0301 	rsb	r3, r3, #1
 8008ae6:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008ae8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d0f0      	beq.n	8008ad0 <__gethex+0x320>
 8008aee:	f04f 0c00 	mov.w	ip, #0
 8008af2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8008af6:	f104 0314 	add.w	r3, r4, #20
 8008afa:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8008afe:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8008b02:	4618      	mov	r0, r3
 8008b04:	f853 2b04 	ldr.w	r2, [r3], #4
 8008b08:	f1b2 3fff 	cmp.w	r2, #4294967295
 8008b0c:	d01b      	beq.n	8008b46 <__gethex+0x396>
 8008b0e:	3201      	adds	r2, #1
 8008b10:	6002      	str	r2, [r0, #0]
 8008b12:	2d02      	cmp	r5, #2
 8008b14:	f104 0314 	add.w	r3, r4, #20
 8008b18:	d13c      	bne.n	8008b94 <__gethex+0x3e4>
 8008b1a:	f8d8 2000 	ldr.w	r2, [r8]
 8008b1e:	3a01      	subs	r2, #1
 8008b20:	42b2      	cmp	r2, r6
 8008b22:	d109      	bne.n	8008b38 <__gethex+0x388>
 8008b24:	2201      	movs	r2, #1
 8008b26:	1171      	asrs	r1, r6, #5
 8008b28:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008b2c:	f006 061f 	and.w	r6, r6, #31
 8008b30:	fa02 f606 	lsl.w	r6, r2, r6
 8008b34:	421e      	tst	r6, r3
 8008b36:	d13a      	bne.n	8008bae <__gethex+0x3fe>
 8008b38:	f045 0520 	orr.w	r5, r5, #32
 8008b3c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008b3e:	601c      	str	r4, [r3, #0]
 8008b40:	9b02      	ldr	r3, [sp, #8]
 8008b42:	601f      	str	r7, [r3, #0]
 8008b44:	e6b0      	b.n	80088a8 <__gethex+0xf8>
 8008b46:	4299      	cmp	r1, r3
 8008b48:	f843 cc04 	str.w	ip, [r3, #-4]
 8008b4c:	d8d9      	bhi.n	8008b02 <__gethex+0x352>
 8008b4e:	68a3      	ldr	r3, [r4, #8]
 8008b50:	459b      	cmp	fp, r3
 8008b52:	db17      	blt.n	8008b84 <__gethex+0x3d4>
 8008b54:	6861      	ldr	r1, [r4, #4]
 8008b56:	9801      	ldr	r0, [sp, #4]
 8008b58:	3101      	adds	r1, #1
 8008b5a:	f7fe f81b 	bl	8006b94 <_Balloc>
 8008b5e:	4681      	mov	r9, r0
 8008b60:	b918      	cbnz	r0, 8008b6a <__gethex+0x3ba>
 8008b62:	4602      	mov	r2, r0
 8008b64:	2184      	movs	r1, #132	@ 0x84
 8008b66:	4b19      	ldr	r3, [pc, #100]	@ (8008bcc <__gethex+0x41c>)
 8008b68:	e6c5      	b.n	80088f6 <__gethex+0x146>
 8008b6a:	6922      	ldr	r2, [r4, #16]
 8008b6c:	f104 010c 	add.w	r1, r4, #12
 8008b70:	3202      	adds	r2, #2
 8008b72:	0092      	lsls	r2, r2, #2
 8008b74:	300c      	adds	r0, #12
 8008b76:	f7ff fd6d 	bl	8008654 <memcpy>
 8008b7a:	4621      	mov	r1, r4
 8008b7c:	9801      	ldr	r0, [sp, #4]
 8008b7e:	f7fe f849 	bl	8006c14 <_Bfree>
 8008b82:	464c      	mov	r4, r9
 8008b84:	6923      	ldr	r3, [r4, #16]
 8008b86:	1c5a      	adds	r2, r3, #1
 8008b88:	6122      	str	r2, [r4, #16]
 8008b8a:	2201      	movs	r2, #1
 8008b8c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008b90:	615a      	str	r2, [r3, #20]
 8008b92:	e7be      	b.n	8008b12 <__gethex+0x362>
 8008b94:	6922      	ldr	r2, [r4, #16]
 8008b96:	455a      	cmp	r2, fp
 8008b98:	dd0b      	ble.n	8008bb2 <__gethex+0x402>
 8008b9a:	2101      	movs	r1, #1
 8008b9c:	4620      	mov	r0, r4
 8008b9e:	f7ff fd9f 	bl	80086e0 <rshift>
 8008ba2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008ba6:	3701      	adds	r7, #1
 8008ba8:	42bb      	cmp	r3, r7
 8008baa:	f6ff aee0 	blt.w	800896e <__gethex+0x1be>
 8008bae:	2501      	movs	r5, #1
 8008bb0:	e7c2      	b.n	8008b38 <__gethex+0x388>
 8008bb2:	f016 061f 	ands.w	r6, r6, #31
 8008bb6:	d0fa      	beq.n	8008bae <__gethex+0x3fe>
 8008bb8:	4453      	add	r3, sl
 8008bba:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8008bbe:	f7fe f8db 	bl	8006d78 <__hi0bits>
 8008bc2:	f1c6 0620 	rsb	r6, r6, #32
 8008bc6:	42b0      	cmp	r0, r6
 8008bc8:	dbe7      	blt.n	8008b9a <__gethex+0x3ea>
 8008bca:	e7f0      	b.n	8008bae <__gethex+0x3fe>
 8008bcc:	080094eb 	.word	0x080094eb

08008bd0 <L_shift>:
 8008bd0:	f1c2 0208 	rsb	r2, r2, #8
 8008bd4:	0092      	lsls	r2, r2, #2
 8008bd6:	b570      	push	{r4, r5, r6, lr}
 8008bd8:	f1c2 0620 	rsb	r6, r2, #32
 8008bdc:	6843      	ldr	r3, [r0, #4]
 8008bde:	6804      	ldr	r4, [r0, #0]
 8008be0:	fa03 f506 	lsl.w	r5, r3, r6
 8008be4:	432c      	orrs	r4, r5
 8008be6:	40d3      	lsrs	r3, r2
 8008be8:	6004      	str	r4, [r0, #0]
 8008bea:	f840 3f04 	str.w	r3, [r0, #4]!
 8008bee:	4288      	cmp	r0, r1
 8008bf0:	d3f4      	bcc.n	8008bdc <L_shift+0xc>
 8008bf2:	bd70      	pop	{r4, r5, r6, pc}

08008bf4 <__match>:
 8008bf4:	b530      	push	{r4, r5, lr}
 8008bf6:	6803      	ldr	r3, [r0, #0]
 8008bf8:	3301      	adds	r3, #1
 8008bfa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008bfe:	b914      	cbnz	r4, 8008c06 <__match+0x12>
 8008c00:	6003      	str	r3, [r0, #0]
 8008c02:	2001      	movs	r0, #1
 8008c04:	bd30      	pop	{r4, r5, pc}
 8008c06:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008c0a:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8008c0e:	2d19      	cmp	r5, #25
 8008c10:	bf98      	it	ls
 8008c12:	3220      	addls	r2, #32
 8008c14:	42a2      	cmp	r2, r4
 8008c16:	d0f0      	beq.n	8008bfa <__match+0x6>
 8008c18:	2000      	movs	r0, #0
 8008c1a:	e7f3      	b.n	8008c04 <__match+0x10>

08008c1c <__hexnan>:
 8008c1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c20:	2500      	movs	r5, #0
 8008c22:	680b      	ldr	r3, [r1, #0]
 8008c24:	4682      	mov	sl, r0
 8008c26:	115e      	asrs	r6, r3, #5
 8008c28:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008c2c:	f013 031f 	ands.w	r3, r3, #31
 8008c30:	bf18      	it	ne
 8008c32:	3604      	addne	r6, #4
 8008c34:	1f37      	subs	r7, r6, #4
 8008c36:	4690      	mov	r8, r2
 8008c38:	46b9      	mov	r9, r7
 8008c3a:	463c      	mov	r4, r7
 8008c3c:	46ab      	mov	fp, r5
 8008c3e:	b087      	sub	sp, #28
 8008c40:	6801      	ldr	r1, [r0, #0]
 8008c42:	9301      	str	r3, [sp, #4]
 8008c44:	f846 5c04 	str.w	r5, [r6, #-4]
 8008c48:	9502      	str	r5, [sp, #8]
 8008c4a:	784a      	ldrb	r2, [r1, #1]
 8008c4c:	1c4b      	adds	r3, r1, #1
 8008c4e:	9303      	str	r3, [sp, #12]
 8008c50:	b342      	cbz	r2, 8008ca4 <__hexnan+0x88>
 8008c52:	4610      	mov	r0, r2
 8008c54:	9105      	str	r1, [sp, #20]
 8008c56:	9204      	str	r2, [sp, #16]
 8008c58:	f7ff fd95 	bl	8008786 <__hexdig_fun>
 8008c5c:	2800      	cmp	r0, #0
 8008c5e:	d151      	bne.n	8008d04 <__hexnan+0xe8>
 8008c60:	9a04      	ldr	r2, [sp, #16]
 8008c62:	9905      	ldr	r1, [sp, #20]
 8008c64:	2a20      	cmp	r2, #32
 8008c66:	d818      	bhi.n	8008c9a <__hexnan+0x7e>
 8008c68:	9b02      	ldr	r3, [sp, #8]
 8008c6a:	459b      	cmp	fp, r3
 8008c6c:	dd13      	ble.n	8008c96 <__hexnan+0x7a>
 8008c6e:	454c      	cmp	r4, r9
 8008c70:	d206      	bcs.n	8008c80 <__hexnan+0x64>
 8008c72:	2d07      	cmp	r5, #7
 8008c74:	dc04      	bgt.n	8008c80 <__hexnan+0x64>
 8008c76:	462a      	mov	r2, r5
 8008c78:	4649      	mov	r1, r9
 8008c7a:	4620      	mov	r0, r4
 8008c7c:	f7ff ffa8 	bl	8008bd0 <L_shift>
 8008c80:	4544      	cmp	r4, r8
 8008c82:	d952      	bls.n	8008d2a <__hexnan+0x10e>
 8008c84:	2300      	movs	r3, #0
 8008c86:	f1a4 0904 	sub.w	r9, r4, #4
 8008c8a:	f844 3c04 	str.w	r3, [r4, #-4]
 8008c8e:	461d      	mov	r5, r3
 8008c90:	464c      	mov	r4, r9
 8008c92:	f8cd b008 	str.w	fp, [sp, #8]
 8008c96:	9903      	ldr	r1, [sp, #12]
 8008c98:	e7d7      	b.n	8008c4a <__hexnan+0x2e>
 8008c9a:	2a29      	cmp	r2, #41	@ 0x29
 8008c9c:	d157      	bne.n	8008d4e <__hexnan+0x132>
 8008c9e:	3102      	adds	r1, #2
 8008ca0:	f8ca 1000 	str.w	r1, [sl]
 8008ca4:	f1bb 0f00 	cmp.w	fp, #0
 8008ca8:	d051      	beq.n	8008d4e <__hexnan+0x132>
 8008caa:	454c      	cmp	r4, r9
 8008cac:	d206      	bcs.n	8008cbc <__hexnan+0xa0>
 8008cae:	2d07      	cmp	r5, #7
 8008cb0:	dc04      	bgt.n	8008cbc <__hexnan+0xa0>
 8008cb2:	462a      	mov	r2, r5
 8008cb4:	4649      	mov	r1, r9
 8008cb6:	4620      	mov	r0, r4
 8008cb8:	f7ff ff8a 	bl	8008bd0 <L_shift>
 8008cbc:	4544      	cmp	r4, r8
 8008cbe:	d936      	bls.n	8008d2e <__hexnan+0x112>
 8008cc0:	4623      	mov	r3, r4
 8008cc2:	f1a8 0204 	sub.w	r2, r8, #4
 8008cc6:	f853 1b04 	ldr.w	r1, [r3], #4
 8008cca:	429f      	cmp	r7, r3
 8008ccc:	f842 1f04 	str.w	r1, [r2, #4]!
 8008cd0:	d2f9      	bcs.n	8008cc6 <__hexnan+0xaa>
 8008cd2:	1b3b      	subs	r3, r7, r4
 8008cd4:	f023 0303 	bic.w	r3, r3, #3
 8008cd8:	3304      	adds	r3, #4
 8008cda:	3401      	adds	r4, #1
 8008cdc:	3e03      	subs	r6, #3
 8008cde:	42b4      	cmp	r4, r6
 8008ce0:	bf88      	it	hi
 8008ce2:	2304      	movhi	r3, #4
 8008ce4:	2200      	movs	r2, #0
 8008ce6:	4443      	add	r3, r8
 8008ce8:	f843 2b04 	str.w	r2, [r3], #4
 8008cec:	429f      	cmp	r7, r3
 8008cee:	d2fb      	bcs.n	8008ce8 <__hexnan+0xcc>
 8008cf0:	683b      	ldr	r3, [r7, #0]
 8008cf2:	b91b      	cbnz	r3, 8008cfc <__hexnan+0xe0>
 8008cf4:	4547      	cmp	r7, r8
 8008cf6:	d128      	bne.n	8008d4a <__hexnan+0x12e>
 8008cf8:	2301      	movs	r3, #1
 8008cfa:	603b      	str	r3, [r7, #0]
 8008cfc:	2005      	movs	r0, #5
 8008cfe:	b007      	add	sp, #28
 8008d00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d04:	3501      	adds	r5, #1
 8008d06:	2d08      	cmp	r5, #8
 8008d08:	f10b 0b01 	add.w	fp, fp, #1
 8008d0c:	dd06      	ble.n	8008d1c <__hexnan+0x100>
 8008d0e:	4544      	cmp	r4, r8
 8008d10:	d9c1      	bls.n	8008c96 <__hexnan+0x7a>
 8008d12:	2300      	movs	r3, #0
 8008d14:	2501      	movs	r5, #1
 8008d16:	f844 3c04 	str.w	r3, [r4, #-4]
 8008d1a:	3c04      	subs	r4, #4
 8008d1c:	6822      	ldr	r2, [r4, #0]
 8008d1e:	f000 000f 	and.w	r0, r0, #15
 8008d22:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8008d26:	6020      	str	r0, [r4, #0]
 8008d28:	e7b5      	b.n	8008c96 <__hexnan+0x7a>
 8008d2a:	2508      	movs	r5, #8
 8008d2c:	e7b3      	b.n	8008c96 <__hexnan+0x7a>
 8008d2e:	9b01      	ldr	r3, [sp, #4]
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d0dd      	beq.n	8008cf0 <__hexnan+0xd4>
 8008d34:	f04f 32ff 	mov.w	r2, #4294967295
 8008d38:	f1c3 0320 	rsb	r3, r3, #32
 8008d3c:	40da      	lsrs	r2, r3
 8008d3e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8008d42:	4013      	ands	r3, r2
 8008d44:	f846 3c04 	str.w	r3, [r6, #-4]
 8008d48:	e7d2      	b.n	8008cf0 <__hexnan+0xd4>
 8008d4a:	3f04      	subs	r7, #4
 8008d4c:	e7d0      	b.n	8008cf0 <__hexnan+0xd4>
 8008d4e:	2004      	movs	r0, #4
 8008d50:	e7d5      	b.n	8008cfe <__hexnan+0xe2>

08008d52 <__ascii_mbtowc>:
 8008d52:	b082      	sub	sp, #8
 8008d54:	b901      	cbnz	r1, 8008d58 <__ascii_mbtowc+0x6>
 8008d56:	a901      	add	r1, sp, #4
 8008d58:	b142      	cbz	r2, 8008d6c <__ascii_mbtowc+0x1a>
 8008d5a:	b14b      	cbz	r3, 8008d70 <__ascii_mbtowc+0x1e>
 8008d5c:	7813      	ldrb	r3, [r2, #0]
 8008d5e:	600b      	str	r3, [r1, #0]
 8008d60:	7812      	ldrb	r2, [r2, #0]
 8008d62:	1e10      	subs	r0, r2, #0
 8008d64:	bf18      	it	ne
 8008d66:	2001      	movne	r0, #1
 8008d68:	b002      	add	sp, #8
 8008d6a:	4770      	bx	lr
 8008d6c:	4610      	mov	r0, r2
 8008d6e:	e7fb      	b.n	8008d68 <__ascii_mbtowc+0x16>
 8008d70:	f06f 0001 	mvn.w	r0, #1
 8008d74:	e7f8      	b.n	8008d68 <__ascii_mbtowc+0x16>

08008d76 <_realloc_r>:
 8008d76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d7a:	4680      	mov	r8, r0
 8008d7c:	4615      	mov	r5, r2
 8008d7e:	460c      	mov	r4, r1
 8008d80:	b921      	cbnz	r1, 8008d8c <_realloc_r+0x16>
 8008d82:	4611      	mov	r1, r2
 8008d84:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008d88:	f7fd be78 	b.w	8006a7c <_malloc_r>
 8008d8c:	b92a      	cbnz	r2, 8008d9a <_realloc_r+0x24>
 8008d8e:	f7fd fe03 	bl	8006998 <_free_r>
 8008d92:	2400      	movs	r4, #0
 8008d94:	4620      	mov	r0, r4
 8008d96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d9a:	f000 f840 	bl	8008e1e <_malloc_usable_size_r>
 8008d9e:	4285      	cmp	r5, r0
 8008da0:	4606      	mov	r6, r0
 8008da2:	d802      	bhi.n	8008daa <_realloc_r+0x34>
 8008da4:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8008da8:	d8f4      	bhi.n	8008d94 <_realloc_r+0x1e>
 8008daa:	4629      	mov	r1, r5
 8008dac:	4640      	mov	r0, r8
 8008dae:	f7fd fe65 	bl	8006a7c <_malloc_r>
 8008db2:	4607      	mov	r7, r0
 8008db4:	2800      	cmp	r0, #0
 8008db6:	d0ec      	beq.n	8008d92 <_realloc_r+0x1c>
 8008db8:	42b5      	cmp	r5, r6
 8008dba:	462a      	mov	r2, r5
 8008dbc:	4621      	mov	r1, r4
 8008dbe:	bf28      	it	cs
 8008dc0:	4632      	movcs	r2, r6
 8008dc2:	f7ff fc47 	bl	8008654 <memcpy>
 8008dc6:	4621      	mov	r1, r4
 8008dc8:	4640      	mov	r0, r8
 8008dca:	f7fd fde5 	bl	8006998 <_free_r>
 8008dce:	463c      	mov	r4, r7
 8008dd0:	e7e0      	b.n	8008d94 <_realloc_r+0x1e>

08008dd2 <__ascii_wctomb>:
 8008dd2:	4603      	mov	r3, r0
 8008dd4:	4608      	mov	r0, r1
 8008dd6:	b141      	cbz	r1, 8008dea <__ascii_wctomb+0x18>
 8008dd8:	2aff      	cmp	r2, #255	@ 0xff
 8008dda:	d904      	bls.n	8008de6 <__ascii_wctomb+0x14>
 8008ddc:	228a      	movs	r2, #138	@ 0x8a
 8008dde:	f04f 30ff 	mov.w	r0, #4294967295
 8008de2:	601a      	str	r2, [r3, #0]
 8008de4:	4770      	bx	lr
 8008de6:	2001      	movs	r0, #1
 8008de8:	700a      	strb	r2, [r1, #0]
 8008dea:	4770      	bx	lr

08008dec <fiprintf>:
 8008dec:	b40e      	push	{r1, r2, r3}
 8008dee:	b503      	push	{r0, r1, lr}
 8008df0:	4601      	mov	r1, r0
 8008df2:	ab03      	add	r3, sp, #12
 8008df4:	4805      	ldr	r0, [pc, #20]	@ (8008e0c <fiprintf+0x20>)
 8008df6:	f853 2b04 	ldr.w	r2, [r3], #4
 8008dfa:	6800      	ldr	r0, [r0, #0]
 8008dfc:	9301      	str	r3, [sp, #4]
 8008dfe:	f000 f83d 	bl	8008e7c <_vfiprintf_r>
 8008e02:	b002      	add	sp, #8
 8008e04:	f85d eb04 	ldr.w	lr, [sp], #4
 8008e08:	b003      	add	sp, #12
 8008e0a:	4770      	bx	lr
 8008e0c:	20000020 	.word	0x20000020

08008e10 <abort>:
 8008e10:	2006      	movs	r0, #6
 8008e12:	b508      	push	{r3, lr}
 8008e14:	f000 fa06 	bl	8009224 <raise>
 8008e18:	2001      	movs	r0, #1
 8008e1a:	f7f8 fdea 	bl	80019f2 <_exit>

08008e1e <_malloc_usable_size_r>:
 8008e1e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008e22:	1f18      	subs	r0, r3, #4
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	bfbc      	itt	lt
 8008e28:	580b      	ldrlt	r3, [r1, r0]
 8008e2a:	18c0      	addlt	r0, r0, r3
 8008e2c:	4770      	bx	lr

08008e2e <__sfputc_r>:
 8008e2e:	6893      	ldr	r3, [r2, #8]
 8008e30:	b410      	push	{r4}
 8008e32:	3b01      	subs	r3, #1
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	6093      	str	r3, [r2, #8]
 8008e38:	da07      	bge.n	8008e4a <__sfputc_r+0x1c>
 8008e3a:	6994      	ldr	r4, [r2, #24]
 8008e3c:	42a3      	cmp	r3, r4
 8008e3e:	db01      	blt.n	8008e44 <__sfputc_r+0x16>
 8008e40:	290a      	cmp	r1, #10
 8008e42:	d102      	bne.n	8008e4a <__sfputc_r+0x1c>
 8008e44:	bc10      	pop	{r4}
 8008e46:	f000 b931 	b.w	80090ac <__swbuf_r>
 8008e4a:	6813      	ldr	r3, [r2, #0]
 8008e4c:	1c58      	adds	r0, r3, #1
 8008e4e:	6010      	str	r0, [r2, #0]
 8008e50:	7019      	strb	r1, [r3, #0]
 8008e52:	4608      	mov	r0, r1
 8008e54:	bc10      	pop	{r4}
 8008e56:	4770      	bx	lr

08008e58 <__sfputs_r>:
 8008e58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e5a:	4606      	mov	r6, r0
 8008e5c:	460f      	mov	r7, r1
 8008e5e:	4614      	mov	r4, r2
 8008e60:	18d5      	adds	r5, r2, r3
 8008e62:	42ac      	cmp	r4, r5
 8008e64:	d101      	bne.n	8008e6a <__sfputs_r+0x12>
 8008e66:	2000      	movs	r0, #0
 8008e68:	e007      	b.n	8008e7a <__sfputs_r+0x22>
 8008e6a:	463a      	mov	r2, r7
 8008e6c:	4630      	mov	r0, r6
 8008e6e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e72:	f7ff ffdc 	bl	8008e2e <__sfputc_r>
 8008e76:	1c43      	adds	r3, r0, #1
 8008e78:	d1f3      	bne.n	8008e62 <__sfputs_r+0xa>
 8008e7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008e7c <_vfiprintf_r>:
 8008e7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e80:	460d      	mov	r5, r1
 8008e82:	4614      	mov	r4, r2
 8008e84:	4698      	mov	r8, r3
 8008e86:	4606      	mov	r6, r0
 8008e88:	b09d      	sub	sp, #116	@ 0x74
 8008e8a:	b118      	cbz	r0, 8008e94 <_vfiprintf_r+0x18>
 8008e8c:	6a03      	ldr	r3, [r0, #32]
 8008e8e:	b90b      	cbnz	r3, 8008e94 <_vfiprintf_r+0x18>
 8008e90:	f7fc fe04 	bl	8005a9c <__sinit>
 8008e94:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008e96:	07d9      	lsls	r1, r3, #31
 8008e98:	d405      	bmi.n	8008ea6 <_vfiprintf_r+0x2a>
 8008e9a:	89ab      	ldrh	r3, [r5, #12]
 8008e9c:	059a      	lsls	r2, r3, #22
 8008e9e:	d402      	bmi.n	8008ea6 <_vfiprintf_r+0x2a>
 8008ea0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008ea2:	f7fc ff12 	bl	8005cca <__retarget_lock_acquire_recursive>
 8008ea6:	89ab      	ldrh	r3, [r5, #12]
 8008ea8:	071b      	lsls	r3, r3, #28
 8008eaa:	d501      	bpl.n	8008eb0 <_vfiprintf_r+0x34>
 8008eac:	692b      	ldr	r3, [r5, #16]
 8008eae:	b99b      	cbnz	r3, 8008ed8 <_vfiprintf_r+0x5c>
 8008eb0:	4629      	mov	r1, r5
 8008eb2:	4630      	mov	r0, r6
 8008eb4:	f000 f938 	bl	8009128 <__swsetup_r>
 8008eb8:	b170      	cbz	r0, 8008ed8 <_vfiprintf_r+0x5c>
 8008eba:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008ebc:	07dc      	lsls	r4, r3, #31
 8008ebe:	d504      	bpl.n	8008eca <_vfiprintf_r+0x4e>
 8008ec0:	f04f 30ff 	mov.w	r0, #4294967295
 8008ec4:	b01d      	add	sp, #116	@ 0x74
 8008ec6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008eca:	89ab      	ldrh	r3, [r5, #12]
 8008ecc:	0598      	lsls	r0, r3, #22
 8008ece:	d4f7      	bmi.n	8008ec0 <_vfiprintf_r+0x44>
 8008ed0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008ed2:	f7fc fefb 	bl	8005ccc <__retarget_lock_release_recursive>
 8008ed6:	e7f3      	b.n	8008ec0 <_vfiprintf_r+0x44>
 8008ed8:	2300      	movs	r3, #0
 8008eda:	9309      	str	r3, [sp, #36]	@ 0x24
 8008edc:	2320      	movs	r3, #32
 8008ede:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008ee2:	2330      	movs	r3, #48	@ 0x30
 8008ee4:	f04f 0901 	mov.w	r9, #1
 8008ee8:	f8cd 800c 	str.w	r8, [sp, #12]
 8008eec:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8009098 <_vfiprintf_r+0x21c>
 8008ef0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008ef4:	4623      	mov	r3, r4
 8008ef6:	469a      	mov	sl, r3
 8008ef8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008efc:	b10a      	cbz	r2, 8008f02 <_vfiprintf_r+0x86>
 8008efe:	2a25      	cmp	r2, #37	@ 0x25
 8008f00:	d1f9      	bne.n	8008ef6 <_vfiprintf_r+0x7a>
 8008f02:	ebba 0b04 	subs.w	fp, sl, r4
 8008f06:	d00b      	beq.n	8008f20 <_vfiprintf_r+0xa4>
 8008f08:	465b      	mov	r3, fp
 8008f0a:	4622      	mov	r2, r4
 8008f0c:	4629      	mov	r1, r5
 8008f0e:	4630      	mov	r0, r6
 8008f10:	f7ff ffa2 	bl	8008e58 <__sfputs_r>
 8008f14:	3001      	adds	r0, #1
 8008f16:	f000 80a7 	beq.w	8009068 <_vfiprintf_r+0x1ec>
 8008f1a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008f1c:	445a      	add	r2, fp
 8008f1e:	9209      	str	r2, [sp, #36]	@ 0x24
 8008f20:	f89a 3000 	ldrb.w	r3, [sl]
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	f000 809f 	beq.w	8009068 <_vfiprintf_r+0x1ec>
 8008f2a:	2300      	movs	r3, #0
 8008f2c:	f04f 32ff 	mov.w	r2, #4294967295
 8008f30:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008f34:	f10a 0a01 	add.w	sl, sl, #1
 8008f38:	9304      	str	r3, [sp, #16]
 8008f3a:	9307      	str	r3, [sp, #28]
 8008f3c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008f40:	931a      	str	r3, [sp, #104]	@ 0x68
 8008f42:	4654      	mov	r4, sl
 8008f44:	2205      	movs	r2, #5
 8008f46:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f4a:	4853      	ldr	r0, [pc, #332]	@ (8009098 <_vfiprintf_r+0x21c>)
 8008f4c:	f7fc febf 	bl	8005cce <memchr>
 8008f50:	9a04      	ldr	r2, [sp, #16]
 8008f52:	b9d8      	cbnz	r0, 8008f8c <_vfiprintf_r+0x110>
 8008f54:	06d1      	lsls	r1, r2, #27
 8008f56:	bf44      	itt	mi
 8008f58:	2320      	movmi	r3, #32
 8008f5a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008f5e:	0713      	lsls	r3, r2, #28
 8008f60:	bf44      	itt	mi
 8008f62:	232b      	movmi	r3, #43	@ 0x2b
 8008f64:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008f68:	f89a 3000 	ldrb.w	r3, [sl]
 8008f6c:	2b2a      	cmp	r3, #42	@ 0x2a
 8008f6e:	d015      	beq.n	8008f9c <_vfiprintf_r+0x120>
 8008f70:	4654      	mov	r4, sl
 8008f72:	2000      	movs	r0, #0
 8008f74:	f04f 0c0a 	mov.w	ip, #10
 8008f78:	9a07      	ldr	r2, [sp, #28]
 8008f7a:	4621      	mov	r1, r4
 8008f7c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008f80:	3b30      	subs	r3, #48	@ 0x30
 8008f82:	2b09      	cmp	r3, #9
 8008f84:	d94b      	bls.n	800901e <_vfiprintf_r+0x1a2>
 8008f86:	b1b0      	cbz	r0, 8008fb6 <_vfiprintf_r+0x13a>
 8008f88:	9207      	str	r2, [sp, #28]
 8008f8a:	e014      	b.n	8008fb6 <_vfiprintf_r+0x13a>
 8008f8c:	eba0 0308 	sub.w	r3, r0, r8
 8008f90:	fa09 f303 	lsl.w	r3, r9, r3
 8008f94:	4313      	orrs	r3, r2
 8008f96:	46a2      	mov	sl, r4
 8008f98:	9304      	str	r3, [sp, #16]
 8008f9a:	e7d2      	b.n	8008f42 <_vfiprintf_r+0xc6>
 8008f9c:	9b03      	ldr	r3, [sp, #12]
 8008f9e:	1d19      	adds	r1, r3, #4
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	9103      	str	r1, [sp, #12]
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	bfbb      	ittet	lt
 8008fa8:	425b      	neglt	r3, r3
 8008faa:	f042 0202 	orrlt.w	r2, r2, #2
 8008fae:	9307      	strge	r3, [sp, #28]
 8008fb0:	9307      	strlt	r3, [sp, #28]
 8008fb2:	bfb8      	it	lt
 8008fb4:	9204      	strlt	r2, [sp, #16]
 8008fb6:	7823      	ldrb	r3, [r4, #0]
 8008fb8:	2b2e      	cmp	r3, #46	@ 0x2e
 8008fba:	d10a      	bne.n	8008fd2 <_vfiprintf_r+0x156>
 8008fbc:	7863      	ldrb	r3, [r4, #1]
 8008fbe:	2b2a      	cmp	r3, #42	@ 0x2a
 8008fc0:	d132      	bne.n	8009028 <_vfiprintf_r+0x1ac>
 8008fc2:	9b03      	ldr	r3, [sp, #12]
 8008fc4:	3402      	adds	r4, #2
 8008fc6:	1d1a      	adds	r2, r3, #4
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	9203      	str	r2, [sp, #12]
 8008fcc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008fd0:	9305      	str	r3, [sp, #20]
 8008fd2:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800909c <_vfiprintf_r+0x220>
 8008fd6:	2203      	movs	r2, #3
 8008fd8:	4650      	mov	r0, sl
 8008fda:	7821      	ldrb	r1, [r4, #0]
 8008fdc:	f7fc fe77 	bl	8005cce <memchr>
 8008fe0:	b138      	cbz	r0, 8008ff2 <_vfiprintf_r+0x176>
 8008fe2:	2240      	movs	r2, #64	@ 0x40
 8008fe4:	9b04      	ldr	r3, [sp, #16]
 8008fe6:	eba0 000a 	sub.w	r0, r0, sl
 8008fea:	4082      	lsls	r2, r0
 8008fec:	4313      	orrs	r3, r2
 8008fee:	3401      	adds	r4, #1
 8008ff0:	9304      	str	r3, [sp, #16]
 8008ff2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ff6:	2206      	movs	r2, #6
 8008ff8:	4829      	ldr	r0, [pc, #164]	@ (80090a0 <_vfiprintf_r+0x224>)
 8008ffa:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008ffe:	f7fc fe66 	bl	8005cce <memchr>
 8009002:	2800      	cmp	r0, #0
 8009004:	d03f      	beq.n	8009086 <_vfiprintf_r+0x20a>
 8009006:	4b27      	ldr	r3, [pc, #156]	@ (80090a4 <_vfiprintf_r+0x228>)
 8009008:	bb1b      	cbnz	r3, 8009052 <_vfiprintf_r+0x1d6>
 800900a:	9b03      	ldr	r3, [sp, #12]
 800900c:	3307      	adds	r3, #7
 800900e:	f023 0307 	bic.w	r3, r3, #7
 8009012:	3308      	adds	r3, #8
 8009014:	9303      	str	r3, [sp, #12]
 8009016:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009018:	443b      	add	r3, r7
 800901a:	9309      	str	r3, [sp, #36]	@ 0x24
 800901c:	e76a      	b.n	8008ef4 <_vfiprintf_r+0x78>
 800901e:	460c      	mov	r4, r1
 8009020:	2001      	movs	r0, #1
 8009022:	fb0c 3202 	mla	r2, ip, r2, r3
 8009026:	e7a8      	b.n	8008f7a <_vfiprintf_r+0xfe>
 8009028:	2300      	movs	r3, #0
 800902a:	f04f 0c0a 	mov.w	ip, #10
 800902e:	4619      	mov	r1, r3
 8009030:	3401      	adds	r4, #1
 8009032:	9305      	str	r3, [sp, #20]
 8009034:	4620      	mov	r0, r4
 8009036:	f810 2b01 	ldrb.w	r2, [r0], #1
 800903a:	3a30      	subs	r2, #48	@ 0x30
 800903c:	2a09      	cmp	r2, #9
 800903e:	d903      	bls.n	8009048 <_vfiprintf_r+0x1cc>
 8009040:	2b00      	cmp	r3, #0
 8009042:	d0c6      	beq.n	8008fd2 <_vfiprintf_r+0x156>
 8009044:	9105      	str	r1, [sp, #20]
 8009046:	e7c4      	b.n	8008fd2 <_vfiprintf_r+0x156>
 8009048:	4604      	mov	r4, r0
 800904a:	2301      	movs	r3, #1
 800904c:	fb0c 2101 	mla	r1, ip, r1, r2
 8009050:	e7f0      	b.n	8009034 <_vfiprintf_r+0x1b8>
 8009052:	ab03      	add	r3, sp, #12
 8009054:	9300      	str	r3, [sp, #0]
 8009056:	462a      	mov	r2, r5
 8009058:	4630      	mov	r0, r6
 800905a:	4b13      	ldr	r3, [pc, #76]	@ (80090a8 <_vfiprintf_r+0x22c>)
 800905c:	a904      	add	r1, sp, #16
 800905e:	f7fb fec3 	bl	8004de8 <_printf_float>
 8009062:	4607      	mov	r7, r0
 8009064:	1c78      	adds	r0, r7, #1
 8009066:	d1d6      	bne.n	8009016 <_vfiprintf_r+0x19a>
 8009068:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800906a:	07d9      	lsls	r1, r3, #31
 800906c:	d405      	bmi.n	800907a <_vfiprintf_r+0x1fe>
 800906e:	89ab      	ldrh	r3, [r5, #12]
 8009070:	059a      	lsls	r2, r3, #22
 8009072:	d402      	bmi.n	800907a <_vfiprintf_r+0x1fe>
 8009074:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009076:	f7fc fe29 	bl	8005ccc <__retarget_lock_release_recursive>
 800907a:	89ab      	ldrh	r3, [r5, #12]
 800907c:	065b      	lsls	r3, r3, #25
 800907e:	f53f af1f 	bmi.w	8008ec0 <_vfiprintf_r+0x44>
 8009082:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009084:	e71e      	b.n	8008ec4 <_vfiprintf_r+0x48>
 8009086:	ab03      	add	r3, sp, #12
 8009088:	9300      	str	r3, [sp, #0]
 800908a:	462a      	mov	r2, r5
 800908c:	4630      	mov	r0, r6
 800908e:	4b06      	ldr	r3, [pc, #24]	@ (80090a8 <_vfiprintf_r+0x22c>)
 8009090:	a904      	add	r1, sp, #16
 8009092:	f7fc f947 	bl	8005324 <_printf_i>
 8009096:	e7e4      	b.n	8009062 <_vfiprintf_r+0x1e6>
 8009098:	080097b1 	.word	0x080097b1
 800909c:	080097b7 	.word	0x080097b7
 80090a0:	080097bb 	.word	0x080097bb
 80090a4:	08004de9 	.word	0x08004de9
 80090a8:	08008e59 	.word	0x08008e59

080090ac <__swbuf_r>:
 80090ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090ae:	460e      	mov	r6, r1
 80090b0:	4614      	mov	r4, r2
 80090b2:	4605      	mov	r5, r0
 80090b4:	b118      	cbz	r0, 80090be <__swbuf_r+0x12>
 80090b6:	6a03      	ldr	r3, [r0, #32]
 80090b8:	b90b      	cbnz	r3, 80090be <__swbuf_r+0x12>
 80090ba:	f7fc fcef 	bl	8005a9c <__sinit>
 80090be:	69a3      	ldr	r3, [r4, #24]
 80090c0:	60a3      	str	r3, [r4, #8]
 80090c2:	89a3      	ldrh	r3, [r4, #12]
 80090c4:	071a      	lsls	r2, r3, #28
 80090c6:	d501      	bpl.n	80090cc <__swbuf_r+0x20>
 80090c8:	6923      	ldr	r3, [r4, #16]
 80090ca:	b943      	cbnz	r3, 80090de <__swbuf_r+0x32>
 80090cc:	4621      	mov	r1, r4
 80090ce:	4628      	mov	r0, r5
 80090d0:	f000 f82a 	bl	8009128 <__swsetup_r>
 80090d4:	b118      	cbz	r0, 80090de <__swbuf_r+0x32>
 80090d6:	f04f 37ff 	mov.w	r7, #4294967295
 80090da:	4638      	mov	r0, r7
 80090dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80090de:	6823      	ldr	r3, [r4, #0]
 80090e0:	6922      	ldr	r2, [r4, #16]
 80090e2:	b2f6      	uxtb	r6, r6
 80090e4:	1a98      	subs	r0, r3, r2
 80090e6:	6963      	ldr	r3, [r4, #20]
 80090e8:	4637      	mov	r7, r6
 80090ea:	4283      	cmp	r3, r0
 80090ec:	dc05      	bgt.n	80090fa <__swbuf_r+0x4e>
 80090ee:	4621      	mov	r1, r4
 80090f0:	4628      	mov	r0, r5
 80090f2:	f7ff fa4b 	bl	800858c <_fflush_r>
 80090f6:	2800      	cmp	r0, #0
 80090f8:	d1ed      	bne.n	80090d6 <__swbuf_r+0x2a>
 80090fa:	68a3      	ldr	r3, [r4, #8]
 80090fc:	3b01      	subs	r3, #1
 80090fe:	60a3      	str	r3, [r4, #8]
 8009100:	6823      	ldr	r3, [r4, #0]
 8009102:	1c5a      	adds	r2, r3, #1
 8009104:	6022      	str	r2, [r4, #0]
 8009106:	701e      	strb	r6, [r3, #0]
 8009108:	6962      	ldr	r2, [r4, #20]
 800910a:	1c43      	adds	r3, r0, #1
 800910c:	429a      	cmp	r2, r3
 800910e:	d004      	beq.n	800911a <__swbuf_r+0x6e>
 8009110:	89a3      	ldrh	r3, [r4, #12]
 8009112:	07db      	lsls	r3, r3, #31
 8009114:	d5e1      	bpl.n	80090da <__swbuf_r+0x2e>
 8009116:	2e0a      	cmp	r6, #10
 8009118:	d1df      	bne.n	80090da <__swbuf_r+0x2e>
 800911a:	4621      	mov	r1, r4
 800911c:	4628      	mov	r0, r5
 800911e:	f7ff fa35 	bl	800858c <_fflush_r>
 8009122:	2800      	cmp	r0, #0
 8009124:	d0d9      	beq.n	80090da <__swbuf_r+0x2e>
 8009126:	e7d6      	b.n	80090d6 <__swbuf_r+0x2a>

08009128 <__swsetup_r>:
 8009128:	b538      	push	{r3, r4, r5, lr}
 800912a:	4b29      	ldr	r3, [pc, #164]	@ (80091d0 <__swsetup_r+0xa8>)
 800912c:	4605      	mov	r5, r0
 800912e:	6818      	ldr	r0, [r3, #0]
 8009130:	460c      	mov	r4, r1
 8009132:	b118      	cbz	r0, 800913c <__swsetup_r+0x14>
 8009134:	6a03      	ldr	r3, [r0, #32]
 8009136:	b90b      	cbnz	r3, 800913c <__swsetup_r+0x14>
 8009138:	f7fc fcb0 	bl	8005a9c <__sinit>
 800913c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009140:	0719      	lsls	r1, r3, #28
 8009142:	d422      	bmi.n	800918a <__swsetup_r+0x62>
 8009144:	06da      	lsls	r2, r3, #27
 8009146:	d407      	bmi.n	8009158 <__swsetup_r+0x30>
 8009148:	2209      	movs	r2, #9
 800914a:	602a      	str	r2, [r5, #0]
 800914c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009150:	f04f 30ff 	mov.w	r0, #4294967295
 8009154:	81a3      	strh	r3, [r4, #12]
 8009156:	e033      	b.n	80091c0 <__swsetup_r+0x98>
 8009158:	0758      	lsls	r0, r3, #29
 800915a:	d512      	bpl.n	8009182 <__swsetup_r+0x5a>
 800915c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800915e:	b141      	cbz	r1, 8009172 <__swsetup_r+0x4a>
 8009160:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009164:	4299      	cmp	r1, r3
 8009166:	d002      	beq.n	800916e <__swsetup_r+0x46>
 8009168:	4628      	mov	r0, r5
 800916a:	f7fd fc15 	bl	8006998 <_free_r>
 800916e:	2300      	movs	r3, #0
 8009170:	6363      	str	r3, [r4, #52]	@ 0x34
 8009172:	89a3      	ldrh	r3, [r4, #12]
 8009174:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009178:	81a3      	strh	r3, [r4, #12]
 800917a:	2300      	movs	r3, #0
 800917c:	6063      	str	r3, [r4, #4]
 800917e:	6923      	ldr	r3, [r4, #16]
 8009180:	6023      	str	r3, [r4, #0]
 8009182:	89a3      	ldrh	r3, [r4, #12]
 8009184:	f043 0308 	orr.w	r3, r3, #8
 8009188:	81a3      	strh	r3, [r4, #12]
 800918a:	6923      	ldr	r3, [r4, #16]
 800918c:	b94b      	cbnz	r3, 80091a2 <__swsetup_r+0x7a>
 800918e:	89a3      	ldrh	r3, [r4, #12]
 8009190:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009194:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009198:	d003      	beq.n	80091a2 <__swsetup_r+0x7a>
 800919a:	4621      	mov	r1, r4
 800919c:	4628      	mov	r0, r5
 800919e:	f000 f882 	bl	80092a6 <__smakebuf_r>
 80091a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80091a6:	f013 0201 	ands.w	r2, r3, #1
 80091aa:	d00a      	beq.n	80091c2 <__swsetup_r+0x9a>
 80091ac:	2200      	movs	r2, #0
 80091ae:	60a2      	str	r2, [r4, #8]
 80091b0:	6962      	ldr	r2, [r4, #20]
 80091b2:	4252      	negs	r2, r2
 80091b4:	61a2      	str	r2, [r4, #24]
 80091b6:	6922      	ldr	r2, [r4, #16]
 80091b8:	b942      	cbnz	r2, 80091cc <__swsetup_r+0xa4>
 80091ba:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80091be:	d1c5      	bne.n	800914c <__swsetup_r+0x24>
 80091c0:	bd38      	pop	{r3, r4, r5, pc}
 80091c2:	0799      	lsls	r1, r3, #30
 80091c4:	bf58      	it	pl
 80091c6:	6962      	ldrpl	r2, [r4, #20]
 80091c8:	60a2      	str	r2, [r4, #8]
 80091ca:	e7f4      	b.n	80091b6 <__swsetup_r+0x8e>
 80091cc:	2000      	movs	r0, #0
 80091ce:	e7f7      	b.n	80091c0 <__swsetup_r+0x98>
 80091d0:	20000020 	.word	0x20000020

080091d4 <_raise_r>:
 80091d4:	291f      	cmp	r1, #31
 80091d6:	b538      	push	{r3, r4, r5, lr}
 80091d8:	4605      	mov	r5, r0
 80091da:	460c      	mov	r4, r1
 80091dc:	d904      	bls.n	80091e8 <_raise_r+0x14>
 80091de:	2316      	movs	r3, #22
 80091e0:	6003      	str	r3, [r0, #0]
 80091e2:	f04f 30ff 	mov.w	r0, #4294967295
 80091e6:	bd38      	pop	{r3, r4, r5, pc}
 80091e8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80091ea:	b112      	cbz	r2, 80091f2 <_raise_r+0x1e>
 80091ec:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80091f0:	b94b      	cbnz	r3, 8009206 <_raise_r+0x32>
 80091f2:	4628      	mov	r0, r5
 80091f4:	f000 f830 	bl	8009258 <_getpid_r>
 80091f8:	4622      	mov	r2, r4
 80091fa:	4601      	mov	r1, r0
 80091fc:	4628      	mov	r0, r5
 80091fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009202:	f000 b817 	b.w	8009234 <_kill_r>
 8009206:	2b01      	cmp	r3, #1
 8009208:	d00a      	beq.n	8009220 <_raise_r+0x4c>
 800920a:	1c59      	adds	r1, r3, #1
 800920c:	d103      	bne.n	8009216 <_raise_r+0x42>
 800920e:	2316      	movs	r3, #22
 8009210:	6003      	str	r3, [r0, #0]
 8009212:	2001      	movs	r0, #1
 8009214:	e7e7      	b.n	80091e6 <_raise_r+0x12>
 8009216:	2100      	movs	r1, #0
 8009218:	4620      	mov	r0, r4
 800921a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800921e:	4798      	blx	r3
 8009220:	2000      	movs	r0, #0
 8009222:	e7e0      	b.n	80091e6 <_raise_r+0x12>

08009224 <raise>:
 8009224:	4b02      	ldr	r3, [pc, #8]	@ (8009230 <raise+0xc>)
 8009226:	4601      	mov	r1, r0
 8009228:	6818      	ldr	r0, [r3, #0]
 800922a:	f7ff bfd3 	b.w	80091d4 <_raise_r>
 800922e:	bf00      	nop
 8009230:	20000020 	.word	0x20000020

08009234 <_kill_r>:
 8009234:	b538      	push	{r3, r4, r5, lr}
 8009236:	2300      	movs	r3, #0
 8009238:	4d06      	ldr	r5, [pc, #24]	@ (8009254 <_kill_r+0x20>)
 800923a:	4604      	mov	r4, r0
 800923c:	4608      	mov	r0, r1
 800923e:	4611      	mov	r1, r2
 8009240:	602b      	str	r3, [r5, #0]
 8009242:	f7f8 fbc6 	bl	80019d2 <_kill>
 8009246:	1c43      	adds	r3, r0, #1
 8009248:	d102      	bne.n	8009250 <_kill_r+0x1c>
 800924a:	682b      	ldr	r3, [r5, #0]
 800924c:	b103      	cbz	r3, 8009250 <_kill_r+0x1c>
 800924e:	6023      	str	r3, [r4, #0]
 8009250:	bd38      	pop	{r3, r4, r5, pc}
 8009252:	bf00      	nop
 8009254:	200003fc 	.word	0x200003fc

08009258 <_getpid_r>:
 8009258:	f7f8 bbb4 	b.w	80019c4 <_getpid>

0800925c <__swhatbuf_r>:
 800925c:	b570      	push	{r4, r5, r6, lr}
 800925e:	460c      	mov	r4, r1
 8009260:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009264:	4615      	mov	r5, r2
 8009266:	2900      	cmp	r1, #0
 8009268:	461e      	mov	r6, r3
 800926a:	b096      	sub	sp, #88	@ 0x58
 800926c:	da0c      	bge.n	8009288 <__swhatbuf_r+0x2c>
 800926e:	89a3      	ldrh	r3, [r4, #12]
 8009270:	2100      	movs	r1, #0
 8009272:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009276:	bf14      	ite	ne
 8009278:	2340      	movne	r3, #64	@ 0x40
 800927a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800927e:	2000      	movs	r0, #0
 8009280:	6031      	str	r1, [r6, #0]
 8009282:	602b      	str	r3, [r5, #0]
 8009284:	b016      	add	sp, #88	@ 0x58
 8009286:	bd70      	pop	{r4, r5, r6, pc}
 8009288:	466a      	mov	r2, sp
 800928a:	f000 f849 	bl	8009320 <_fstat_r>
 800928e:	2800      	cmp	r0, #0
 8009290:	dbed      	blt.n	800926e <__swhatbuf_r+0x12>
 8009292:	9901      	ldr	r1, [sp, #4]
 8009294:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009298:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800929c:	4259      	negs	r1, r3
 800929e:	4159      	adcs	r1, r3
 80092a0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80092a4:	e7eb      	b.n	800927e <__swhatbuf_r+0x22>

080092a6 <__smakebuf_r>:
 80092a6:	898b      	ldrh	r3, [r1, #12]
 80092a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80092aa:	079d      	lsls	r5, r3, #30
 80092ac:	4606      	mov	r6, r0
 80092ae:	460c      	mov	r4, r1
 80092b0:	d507      	bpl.n	80092c2 <__smakebuf_r+0x1c>
 80092b2:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80092b6:	6023      	str	r3, [r4, #0]
 80092b8:	6123      	str	r3, [r4, #16]
 80092ba:	2301      	movs	r3, #1
 80092bc:	6163      	str	r3, [r4, #20]
 80092be:	b003      	add	sp, #12
 80092c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80092c2:	466a      	mov	r2, sp
 80092c4:	ab01      	add	r3, sp, #4
 80092c6:	f7ff ffc9 	bl	800925c <__swhatbuf_r>
 80092ca:	9f00      	ldr	r7, [sp, #0]
 80092cc:	4605      	mov	r5, r0
 80092ce:	4639      	mov	r1, r7
 80092d0:	4630      	mov	r0, r6
 80092d2:	f7fd fbd3 	bl	8006a7c <_malloc_r>
 80092d6:	b948      	cbnz	r0, 80092ec <__smakebuf_r+0x46>
 80092d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80092dc:	059a      	lsls	r2, r3, #22
 80092de:	d4ee      	bmi.n	80092be <__smakebuf_r+0x18>
 80092e0:	f023 0303 	bic.w	r3, r3, #3
 80092e4:	f043 0302 	orr.w	r3, r3, #2
 80092e8:	81a3      	strh	r3, [r4, #12]
 80092ea:	e7e2      	b.n	80092b2 <__smakebuf_r+0xc>
 80092ec:	89a3      	ldrh	r3, [r4, #12]
 80092ee:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80092f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80092f6:	81a3      	strh	r3, [r4, #12]
 80092f8:	9b01      	ldr	r3, [sp, #4]
 80092fa:	6020      	str	r0, [r4, #0]
 80092fc:	b15b      	cbz	r3, 8009316 <__smakebuf_r+0x70>
 80092fe:	4630      	mov	r0, r6
 8009300:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009304:	f000 f81e 	bl	8009344 <_isatty_r>
 8009308:	b128      	cbz	r0, 8009316 <__smakebuf_r+0x70>
 800930a:	89a3      	ldrh	r3, [r4, #12]
 800930c:	f023 0303 	bic.w	r3, r3, #3
 8009310:	f043 0301 	orr.w	r3, r3, #1
 8009314:	81a3      	strh	r3, [r4, #12]
 8009316:	89a3      	ldrh	r3, [r4, #12]
 8009318:	431d      	orrs	r5, r3
 800931a:	81a5      	strh	r5, [r4, #12]
 800931c:	e7cf      	b.n	80092be <__smakebuf_r+0x18>
	...

08009320 <_fstat_r>:
 8009320:	b538      	push	{r3, r4, r5, lr}
 8009322:	2300      	movs	r3, #0
 8009324:	4d06      	ldr	r5, [pc, #24]	@ (8009340 <_fstat_r+0x20>)
 8009326:	4604      	mov	r4, r0
 8009328:	4608      	mov	r0, r1
 800932a:	4611      	mov	r1, r2
 800932c:	602b      	str	r3, [r5, #0]
 800932e:	f7f8 fbaf 	bl	8001a90 <_fstat>
 8009332:	1c43      	adds	r3, r0, #1
 8009334:	d102      	bne.n	800933c <_fstat_r+0x1c>
 8009336:	682b      	ldr	r3, [r5, #0]
 8009338:	b103      	cbz	r3, 800933c <_fstat_r+0x1c>
 800933a:	6023      	str	r3, [r4, #0]
 800933c:	bd38      	pop	{r3, r4, r5, pc}
 800933e:	bf00      	nop
 8009340:	200003fc 	.word	0x200003fc

08009344 <_isatty_r>:
 8009344:	b538      	push	{r3, r4, r5, lr}
 8009346:	2300      	movs	r3, #0
 8009348:	4d05      	ldr	r5, [pc, #20]	@ (8009360 <_isatty_r+0x1c>)
 800934a:	4604      	mov	r4, r0
 800934c:	4608      	mov	r0, r1
 800934e:	602b      	str	r3, [r5, #0]
 8009350:	f7f8 fbad 	bl	8001aae <_isatty>
 8009354:	1c43      	adds	r3, r0, #1
 8009356:	d102      	bne.n	800935e <_isatty_r+0x1a>
 8009358:	682b      	ldr	r3, [r5, #0]
 800935a:	b103      	cbz	r3, 800935e <_isatty_r+0x1a>
 800935c:	6023      	str	r3, [r4, #0]
 800935e:	bd38      	pop	{r3, r4, r5, pc}
 8009360:	200003fc 	.word	0x200003fc

08009364 <_init>:
 8009364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009366:	bf00      	nop
 8009368:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800936a:	bc08      	pop	{r3}
 800936c:	469e      	mov	lr, r3
 800936e:	4770      	bx	lr

08009370 <_fini>:
 8009370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009372:	bf00      	nop
 8009374:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009376:	bc08      	pop	{r3}
 8009378:	469e      	mov	lr, r3
 800937a:	4770      	bx	lr
